<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç API –∑–µ–ª–∏–π D&D</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 20px; border: 1px solid #ccc; border-radius: 8px; }
        .result { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 4px; }
        button { padding: 10px 20px; margin: 5px; cursor: pointer; }
        input, select { padding: 8px; margin: 5px; }
        .error { color: red; background: #ffe6e6; padding: 10px; border-radius: 4px; }
        .success { color: green; background: #e6ffe6; padding: 10px; border-radius: 4px; }
    </style>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç API –∑–µ–ª–∏–π D&D (–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)</h1>
    
    <div class="test-section">
        <h3>–°–ª—É—á–∞–π–Ω—ã–µ –∑–µ–ª—å—è</h3>
        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <input type="number" id="count" value="3" min="1" max="10"></label>
        <label>–†–µ–¥–∫–æ—Å—Ç—å: 
            <select id="rarity">
                <option value="">–õ—é–±–∞—è</option>
                <option value="common">–û–±—ã—á–Ω–æ–µ</option>
                <option value="uncommon">–ù–µ–æ–±—ã—á–Ω–æ–µ</option>
                <option value="rare">–†–µ–¥–∫–æ–µ</option>
                <option value="very rare">–û—á–µ–Ω—å —Ä–µ–¥–∫–æ–µ</option>
                <option value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ</option>
            </select>
        </label>
        <label>–¢–∏–ø: 
            <select id="type">
                <option value="">–õ—é–±–æ–π</option>
                <option value="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</option>
                <option value="–£—Å–∏–ª–µ–Ω–∏–µ">–£—Å–∏–ª–µ–Ω–∏–µ</option>
                <option value="–ó–∞—â–∏—Ç–∞">–ó–∞—â–∏—Ç–∞</option>
                <option value="–ò–ª–ª—é–∑–∏—è">–ò–ª–ª—é–∑–∏—è</option>
                <option value="–¢—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏—è">–¢—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏—è</option>
                <option value="–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è">–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è</option>
                <option value="–ü—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ">–ü—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ</option>
            </select>
        </label>
        <br>
        <button onclick="testRandomPotions()">üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–µ–ª—å—è</button>
        <div id="randomResult" class="result"></div>
    </div>
    
    <div class="test-section">
        <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏</h3>
        <button onclick="testRarities()">üìã –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç–∏</button>
        <div id="raritiesResult" class="result"></div>
    </div>
    
    <div class="test-section">
        <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã</h3>
        <button onclick="testTypes()">üîç –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã</button>
        <div id="typesResult" class="result"></div>
    </div>
    
    <div class="test-section">
        <h3>–ó–µ–ª—å—è –ø–æ —Ç–∏–ø—É</h3>
        <label>–¢–∏–ø: 
            <select id="typeFilter">
                <option value="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</option>
                <option value="–£—Å–∏–ª–µ–Ω–∏–µ">–£—Å–∏–ª–µ–Ω–∏–µ</option>
                <option value="–ó–∞—â–∏—Ç–∞">–ó–∞—â–∏—Ç–∞</option>
                <option value="–ò–ª–ª—é–∑–∏—è">–ò–ª–ª—é–∑–∏—è</option>
                <option value="–¢—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏—è">–¢—Ä–∞–Ω—Å–º—É—Ç–∞—Ü–∏—è</option>
                <option value="–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è">–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è</option>
                <option value="–ü—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ">–ü—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ</option>
            </select>
        </label>
        <button onclick="testPotionsByType()">üîç –ù–∞–π—Ç–∏ –ø–æ —Ç–∏–ø—É</button>
        <div id="typeResult" class="result"></div>
    </div>

    <script>
        async function testRandomPotions() {
            const count = document.getElementById('count').value;
            const rarity = document.getElementById('rarity').value;
            const type = document.getElementById('type').value;
            
            const params = new URLSearchParams();
            params.append('action', 'random');
            params.append('count', count);
            if (rarity) params.append('rarity', rarity);
            if (type) params.append('type', type);
            
            try {
                document.getElementById('randomResult').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                const response = await fetch(`api/generate-potions.php?${params.toString()}`);
                const data = await response.json();
                
                if (data.success) {
                    let html = '<div class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–µ–ª–∏–π: ' + data.data.length + '</div>';
                    html += '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>';
                    data.data.forEach((potion, index) => {
                        html += `
                            <div style="border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid ${potion.color}">
                                <h5>${potion.icon} ${potion.name}</h5>
                                <p><strong>–†–µ–¥–∫–æ—Å—Ç—å:</strong> <span style="color: ${potion.color}">${potion.rarity}</span></p>
                                <p><strong>–¢–∏–ø:</strong> ${potion.icon} ${potion.type}</p>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${potion.description}</p>
                                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${potion.value}</p>
                                <p><strong>–í–µ—Å:</strong> ${potion.weight}</p>
                                <p><strong>–°–≤–æ–π—Å—Ç–≤–∞:</strong> ${potion.properties.join(', ')}</p>
                            </div>
                        `;
                    });
                    document.getElementById('randomResult').innerHTML = html;
                } else {
                    document.getElementById('randomResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.error}</div>`;
                }
            } catch (error) {
                document.getElementById('randomResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            }
        }
        
        async function testRarities() {
            try {
                document.getElementById('raritiesResult').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                const response = await fetch('api/generate-potions.php?action=rarities');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('raritiesResult').innerHTML = `
                        <div class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–¥–∫–æ—Å—Ç–∏</div>
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:</h4>
                        <ul>${data.data.map(rarity => `<li>${rarity}</li>`).join('')}</ul>
                    `;
                } else {
                    document.getElementById('raritiesResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.error}</div>`;
                }
            } catch (error) {
                document.getElementById('raritiesResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            }
        }
        
        async function testTypes() {
            try {
                document.getElementById('typesResult').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                const response = await fetch('api/generate-potions.php?action=types');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('typesResult').innerHTML = `
                        <div class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã</div>
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</h4>
                        <ul>${data.data.map(type => `<li>${type}</li>`).join('')}</ul>
                    `;
                } else {
                    document.getElementById('typesResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.error}</div>`;
                }
            } catch (error) {
                document.getElementById('typesResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            }
        }
        
        async function testPotionsByType() {
            const type = document.getElementById('typeFilter').value;
            
            try {
                document.getElementById('typeResult').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                const response = await fetch(`api/generate-potions.php?action=by_type&type=${encodeURIComponent(type)}`);
                const data = await response.json();
                
                if (data.success) {
                    let html = `<div class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –∑–µ–ª—å—è —Ç–∏–ø–∞ "${type}"</div>`;
                    html += `<h4>–ó–µ–ª—å—è —Ç–∏–ø–∞ "${type}":</h4>`;
                    if (data.data.length > 0) {
                        data.data.forEach((potion, index) => {
                            html += `
                                <div style="border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid ${potion.color}">
                                    <h5>${potion.icon} ${potion.name}</h5>
                                    <p><strong>–†–µ–¥–∫–æ—Å—Ç—å:</strong> <span style="color: ${potion.color}">${potion.rarity}</span></p>
                                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${potion.description}</p>
                                    <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${potion.value}</p>
                                </div>
                            `;
                        });
                    } else {
                        html += '<p>–ó–µ–ª—å—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
                    }
                    document.getElementById('typeResult').innerHTML = html;
                } else {
                    document.getElementById('typeResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.error}</div>`;
                }
            } catch (error) {
                document.getElementById('typeResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            }
        }
    </script>
</body>
</html>

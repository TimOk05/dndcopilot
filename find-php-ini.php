<?php
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ php.ini –≤ —Å–∏—Å—Ç–µ–º–µ
echo "<h1>üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ php.ini</h1>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π php.ini
echo "<h2>1. –¢–µ–∫—É—â–∏–π php.ini</h2>";
$current_ini = php_ini_loaded_file();
if ($current_ini) {
    echo "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π php.ini: <strong>$current_ini</strong><br>";
} else {
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π php.ini<br>";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ini —Ñ–∞–π–ª—ã
echo "<h2>2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ini —Ñ–∞–π–ª—ã</h2>";
$additional_inis = php_ini_scanned_files();
if ($additional_inis) {
    echo "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ini —Ñ–∞–π–ª—ã:<br>";
    $files = explode(',', $additional_inis);
    foreach ($files as $file) {
        $file = trim($file);
        if ($file) {
            echo "- $file<br>";
        }
    }
} else {
    echo "‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ini —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã<br>";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
echo "<h2>3. –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è</h2>";
$possible_paths = [
    'C:\\Windows\\php.ini',
    'C:\\Windows\\System32\\php.ini',
    'C:\\php\\php.ini',
    'C:\\xampp\\php\\php.ini',
    'C:\\wamp\\bin\\php\\php8.1.0\\php.ini',
    'C:\\wamp64\\bin\\php\\php8.1.0\\php.ini',
    'C:\\laragon\\bin\\php\\php8.1.0\\php.ini',
    'C:\\Program Files\\PHP\\php.ini',
    'C:\\Program Files (x86)\\PHP\\php.ini'
];

foreach ($possible_paths as $path) {
    if (file_exists($path)) {
        echo "‚úÖ –ù–∞–π–¥–µ–Ω: <strong>$path</strong><br>";
    } else {
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: $path<br>";
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "<h2>4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</h2>";
$env_vars = [
    'PHP_INI_SCAN_DIR',
    'PHPRC',
    'PHP_INI_DIR'
];

foreach ($env_vars as $var) {
    $value = getenv($var);
    if ($value) {
        echo "‚úÖ $var = <strong>$value</strong><br>";
    } else {
        echo "‚ùå $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞<br>";
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PHP
echo "<h2>5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PHP</h2>";
echo "–í–µ—Ä—Å–∏—è PHP: <strong>" . PHP_VERSION . "</strong><br>";
echo "–ü—É—Ç—å –∫ PHP: <strong>" . PHP_BINARY . "</strong><br>";
echo "–ü—É—Ç—å –∫ –º–æ–¥—É–ª—è–º: <strong>" . PHP_EXTENSION_DIR . "</strong><br>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenSSL
echo "<h2>6. –°—Ç–∞—Ç—É—Å OpenSSL</h2>";
if (extension_loaded('openssl')) {
    echo "‚úÖ OpenSSL –≤–∫–ª—é—á–µ–Ω<br>";
    echo "–í–µ—Ä—Å–∏—è: " . OPENSSL_VERSION_TEXT . "<br>";
} else {
    echo "‚ùå OpenSSL –ù–ï –≤–∫–ª—é—á–µ–Ω<br>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    echo "<h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:</h3>";
    $modules = get_loaded_extensions();
    $ssl_modules = array_filter($modules, function($module) {
        return stripos($module, 'ssl') !== false || stripos($module, 'curl') !== false;
    });
    
    if (!empty($ssl_modules)) {
        echo "–ù–∞–π–¥–µ–Ω—ã SSL-—Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:<br>";
        foreach ($ssl_modules as $module) {
            echo "- $module<br>";
        }
    } else {
        echo "SSL-—Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã<br>";
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º cURL
echo "<h2>7. –°—Ç–∞—Ç—É—Å cURL</h2>";
if (function_exists('curl_init')) {
    echo "‚úÖ cURL –¥–æ—Å—Ç—É–ø–µ–Ω<br>";
    $curl_version = curl_version();
    echo "–í–µ—Ä—Å–∏—è: " . $curl_version['version'] . "<br>";
    echo "SSL –≤–µ—Ä—Å–∏—è: " . $curl_version['ssl_version'] . "<br>";
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTPS
    echo "<h3>–¢–µ—Å—Ç HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</h3>";
    $ch = curl_init('https://www.google.com');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_NOBODY, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
    
    $result = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);
    
    if ($result !== false && $httpCode === 200) {
        echo "‚úÖ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ cURL!<br>";
    } else {
        echo "‚ùå HTTPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ cURL: $error<br>";
    }
} else {
    echo "‚ùå cURL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω<br>";
}

echo "<h2>8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>";
if (!extension_loaded('openssl')) {
    echo "<strong>üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:</strong><br>";
    echo "OpenSSL –Ω–µ –≤–∫–ª—é—á–µ–Ω. –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:<br>";
    echo "<br>";
    echo "<strong>–í–∞—Ä–∏–∞–Ω—Ç A: –ò–∑–º–µ–Ω–∏—Ç—å php.ini</strong><br>";
    echo "1. –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª php.ini (—Å–º. –≤—ã—à–µ)<br>";
    echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ<br>";
    echo "3. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ;extension=openssl<br>";
    echo "4. –£–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π: extension=openssl<br>";
    echo "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä<br>";
    echo "<br>";
    echo "<strong>–í–∞—Ä–∏–∞–Ω—Ç B: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XAMPP/WAMP</strong><br>";
    echo "1. –°–∫–∞—á–∞–π—Ç–µ XAMPP –∏–ª–∏ WAMP<br>";
    echo "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ - –æ–Ω–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å OpenSSL<br>";
    echo "<br>";
    echo "<strong>–í–∞—Ä–∏–∞–Ω—Ç C: –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PHP</strong><br>";
    echo "1. –°–∫–∞—á–∞–π—Ç–µ PHP —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞<br>";
    echo "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏<br>";
    echo "<br>";
} else {
    echo "<strong>‚úÖ OpenSSL —Ä–∞–±–æ—Ç–∞–µ—Ç!</strong><br>";
    echo "AI –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!<br>";
}
?>

<?php
/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ D&D API –∏ AI API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */

require_once 'config.php';
require_once 'api/dnd-api-service.php';
require_once 'api/ai-service.php';
require_once 'api/generate-characters-v3.php';

echo "<h1>üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ D&D API –∏ AI API</h1>\n";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
    .test-section { background: white; margin: 10px 0; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .success { border-left: 4px solid #4CAF50; }
    .error { border-left: 4px solid #f44336; }
    .warning { border-left: 4px solid #ff9800; }
    .info { border-left: 4px solid #2196F3; }
    pre { background: #f8f8f8; padding: 10px; border-radius: 4px; overflow-x: auto; }
    .api-info { background: #e3f2fd; padding: 10px; border-radius: 4px; margin: 10px 0; }
</style>\n";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ D&D API Service
echo "<div class='test-section info'>\n";
echo "<h2>üîß –¢–µ—Å—Ç 1: D&D API Service</h2>\n";

try {
    $dnd_service = new DndApiService();
    echo "<p>‚úÖ D&D API Service —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã
    echo "<h3>–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã (Human):</h3>\n";
    $race_data = $dnd_service->getRaceData('human');
    echo "<div class='api-info'>\n";
    echo "<strong>–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—ã:</strong><br>\n";
    echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($race_data['name'] ?? 'N/A') . "<br>\n";
    echo "–°–∫–æ—Ä–æ—Å—Ç—å: " . ($race_data['speed'] ?? 'N/A') . "<br>\n";
    echo "–ë–æ–Ω—É—Å—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: " . json_encode($race_data['ability_bonuses'] ?? []) . "<br>\n";
    echo "–ß–µ—Ä—Ç—ã: " . json_encode($race_data['traits'] ?? []) . "<br>\n";
    echo "–Ø–∑—ã–∫–∏: " . json_encode($race_data['languages'] ?? []) . "<br>\n";
    echo "</div>\n";
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
    echo "<h3>–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞ (Fighter):</h3>\n";
    $class_data = $dnd_service->getClassData('fighter');
    echo "<div class='api-info'>\n";
    echo "<strong>–î–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞:</strong><br>\n";
    echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($class_data['name'] ?? 'N/A') . "<br>\n";
    echo "–ö–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è: " . ($class_data['hit_die'] ?? 'N/A') . "<br>\n";
    echo "–í–ª–∞–¥–µ–Ω–∏—è: " . json_encode($class_data['proficiencies'] ?? []) . "<br>\n";
    echo "–ó–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å—Å—Ç–≤–æ: " . ($class_data['spellcasting'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
    echo "</div>\n";
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
    echo "<h3>–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π (Wizard, —É—Ä–æ–≤–µ–Ω—å 1):</h3>\n";
    $spells = $dnd_service->getSpellsForClass('wizard', 1);
    echo "<div class='api-info'>\n";
    echo "<strong>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</strong><br>\n";
    if (!empty($spells)) {
        foreach (array_slice($spells, 0, 3) as $spell) {
            echo "- {$spell['name']} (—É—Ä–æ–≤–µ–Ω—å {$spell['level']}, —à–∫–æ–ª–∞ {$spell['school']})<br>\n";
        }
        if (count($spells) > 3) {
            echo "... –∏ –µ—â–µ " . (count($spells) - 3) . " –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π<br>\n";
        }
    } else {
        echo "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –¥–∞–Ω–Ω—ã–µ)<br>\n";
    }
    echo "</div>\n";
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ D&D API Service: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Service
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>ü§ñ –¢–µ—Å—Ç 2: AI Service</h2>\n";

try {
    $ai_service = new AiService();
    echo "<p>‚úÖ AI Service —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    $test_character = [
        'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ü–µ—Ä—Å–æ–Ω–∞–∂',
        'race' => '–ß–µ–ª–æ–≤–µ–∫',
        'class' => '–í–æ–∏–Ω',
        'level' => 1,
        'occupation' => '–ö—É–∑–Ω–µ—Ü',
        'gender' => '–ú—É–∂—á–∏–Ω–∞',
        'alignment' => '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä—ã–π',
        'abilities' => ['str' => 16, 'dex' => 14, 'con' => 15, 'int' => 12, 'wis' => 10, 'cha' => 8]
    ];
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    echo "<h3>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</h3>\n";
    $description = $ai_service->generateCharacterDescription($test_character, true);
    echo "<div class='api-info'>\n";
    echo "<strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>\n";
    echo htmlspecialchars($description) . "<br>\n";
    echo "</div>\n";
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
    echo "<h3>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</h3>\n";
    $background = $ai_service->generateCharacterBackground($test_character, true);
    echo "<div class='api-info'>\n";
    echo "<strong>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</strong><br>\n";
    echo htmlspecialchars($background) . "<br>\n";
    echo "</div>\n";
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ AI Service: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>üé≠ –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>\n";

try {
    $generator = new CharacterGeneratorV3();
    echo "<p>‚úÖ CharacterGeneratorV3 —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    $params = [
        'race' => 'elf',
        'class' => 'wizard',
        'level' => 3,
        'alignment' => 'lawful-good',
        'gender' => 'female',
        'use_ai' => 'on'
    ];
    
    echo "<h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª—å—Ñ–∏–π–∫–∏-–≤–æ–ª—à–µ–±–Ω–∏—Ü—ã 3 —É—Ä–æ–≤–Ω—è:</h3>\n";
    $result = $generator->generateCharacter($params);
    
    if ($result['success']) {
        $character = $result['character'];
        echo "<div class='api-info'>\n";
        echo "<strong>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</strong><br>\n";
        echo "–ò–º—è: {$character['name']}<br>\n";
        echo "–†–∞—Å–∞: {$character['race']}<br>\n";
        echo "–ö–ª–∞—Å—Å: {$character['class']}<br>\n";
        echo "–£—Ä–æ–≤–µ–Ω—å: {$character['level']}<br>\n";
        echo "HP: {$character['hit_points']}<br>\n";
        echo "AC: {$character['armor_class']}<br>\n";
        echo "–°–∫–æ—Ä–æ—Å—Ç—å: {$character['speed']}<br>\n";
        echo "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {$character['occupation']}<br>\n";
        echo "</div>\n";
        
        echo "<h4>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>\n";
        echo "<div class='api-info'>\n";
        foreach ($character['abilities'] as $ability => $value) {
            $ability_names = ['str' => '–°–∏–ª–∞', 'dex' => '–õ–æ–≤–∫–æ—Å—Ç—å', 'con' => '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', 
                            'int' => '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'wis' => '–ú—É–¥—Ä–æ—Å—Ç—å', 'cha' => '–•–∞—Ä–∏–∑–º–∞'];
            echo "{$ability_names[$ability]}: {$value}<br>\n";
        }
        echo "</div>\n";
        
        echo "<h4>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</h4>\n";
        echo "<div class='api-info'>\n";
        if (!empty($character['spells'])) {
            foreach (array_slice($character['spells'], 0, 5) as $spell) {
                echo "- {$spell['name']} (—É—Ä–æ–≤–µ–Ω—å {$spell['level']})<br>\n";
            }
            if (count($character['spells']) > 5) {
                echo "... –∏ –µ—â–µ " . (count($character['spells']) - 5) . " –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π<br>\n";
            }
        } else {
            echo "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã<br>\n";
        }
        echo "</div>\n";
        
        echo "<h4>–û–ø–∏—Å–∞–Ω–∏–µ:</h4>\n";
        echo "<div class='api-info'>\n";
        echo htmlspecialchars($character['description']) . "<br>\n";
        echo "</div>\n";
        
        echo "<h4>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</h4>\n";
        echo "<div class='api-info'>\n";
        echo htmlspecialchars($character['background']) . "<br>\n";
        echo "</div>\n";
        
        echo "<h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API:</h4>\n";
        echo "<div class='api-info'>\n";
        if (isset($result['api_info'])) {
            echo "D&D API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: " . ($result['api_info']['dnd_api_used'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
            echo "AI API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: " . ($result['api_info']['ai_api_used'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
            echo "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: " . ($result['api_info']['data_source'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "<br>\n";
        }
        echo "</div>\n";
        
    } else {
        echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " . ($result['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>üíæ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</h2>\n";

try {
    $dnd_service = new DndApiService();
    
    echo "<h3>–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã (–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API):</h3>\n";
    $start_time = microtime(true);
    $race_data1 = $dnd_service->getRaceData('dwarf');
    $time1 = microtime(true) - $start_time;
    echo "<p>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . round($time1 * 1000, 2) . " –º—Å</p>\n";
    
    echo "<h3>–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã (–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞):</h3>\n";
    $start_time = microtime(true);
    $race_data2 = $dnd_service->getRaceData('dwarf');
    $time2 = microtime(true) - $start_time;
    echo "<p>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . round($time2 * 1000, 2) . " –º—Å</p>\n";
    
    if ($time2 < $time1) {
        echo "<p class='success'>‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ.</p>\n";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>üîÑ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö</h2>\n";

try {
    $dnd_service = new DndApiService();
    
    echo "<h3>–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å–æ–π (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback):</h3>\n";
    $fallback_race = $dnd_service->getRaceData('nonexistent_race');
    echo "<div class='api-info'>\n";
    echo "<strong>Fallback –¥–∞–Ω–Ω—ã–µ:</strong><br>\n";
    echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($fallback_race['name'] ?? 'N/A') . "<br>\n";
    echo "–ë–æ–Ω—É—Å—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: " . json_encode($fallback_race['ability_bonuses'] ?? []) . "<br>\n";
    echo "</div>\n";
    
    echo "<h3>–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback):</h3>\n";
    $fallback_class = $dnd_service->getClassData('nonexistent_class');
    echo "<div class='api-info'>\n";
    echo "<strong>Fallback –¥–∞–Ω–Ω—ã–µ:</strong><br>\n";
    echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($fallback_class['name'] ?? 'N/A') . "<br>\n";
    echo "–ö–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è: " . ($fallback_class['hit_die'] ?? 'N/A') . "<br>\n";
    echo "</div>\n";
    
    echo "<p class='success'>‚úÖ Fallback –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</p>\n";
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "</p>\n";
}

echo "</div>\n";

// –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo "<div class='test-section success'>\n";
echo "<h2>üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>\n";
echo "<p><strong>–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤–∫–ª—é—á–∞–µ—Ç:</strong></p>\n";
echo "<ul>\n";
echo "<li>üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ D&D API (D&D 5e API, Open5e)</li>\n";
echo "<li>ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–π</li>\n";
echo "<li>üíæ –°–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>\n";
echo "<li>üîÑ Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API</li>\n";
echo "<li>üìù –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö</li>\n";
echo "</ul>\n";
echo "<p><strong>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:</strong></p>\n";
echo "<ol>\n";
echo "<li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ config.php</li>\n";
echo "<li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ generate-characters-v3.php –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏</li>\n";
echo "<li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API</li>\n";
echo "</ol>\n";
echo "</div>\n";

echo "<div class='test-section warning'>\n";
echo "<h2>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h2>\n";
echo "<ul>\n";
echo "<li>–í–Ω–µ—à–Ω–∏–µ API –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</li>\n";
echo "<li>AI API —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π</li>\n";
echo "<li>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ API</li>\n";
echo "<li>Fallback –¥–∞–Ω–Ω—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API</li>\n";
echo "</ul>\n";
echo "</div>\n";
?>

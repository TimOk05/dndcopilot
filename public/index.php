<?php
session_start();
require_once '../app/Middleware/auth.php';

// Language Service –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

// –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –ø–æ–∑–∂–µ

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if (!isLoggedIn()) {
    header('Location: login.php');
    exit;
}

// –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$currentUser = $_SESSION['username'] ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

// –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä—É—Å—Å–∫–∏–π
$currentLanguage = 'ru';



// --- –ó–∞–º–µ—Ç–∫–∏ ---
if (!isset($_SESSION['notes'])) {
    $_SESSION['notes'] = [];
}
if (isset($_POST['add_note']) && isset($_POST['note_content'])) {
    $_SESSION['notes'][] = trim($_POST['note_content']);
    exit('OK');
}
if (isset($_POST['remove_note'])) {
    $idx = (int)$_POST['remove_note'];
    if (isset($_SESSION['notes'][$idx])) {
        array_splice($_SESSION['notes'], $idx, 1);
    }
    exit('OK');
}

// --- –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AJAX ---
if (isset($_POST['fast_action'])) {
    $action = $_POST['fast_action'];
    error_log('fast_action called with action: ' . $action);
    error_log('Request URI: ' . $_SERVER['REQUEST_URI']);
    error_log('Script name: ' . $_SERVER['SCRIPT_NAME']);
    // --- –ö–æ—Å—Ç–∏ ---
    if ($action === 'dice_result') {
        $dice = $_POST['dice'] ?? '1d20';
        $label = $_POST['label'] ?? '';
        if (preg_match('/^(\d{1,2})d(\d{1,3})$/', $dice, $m)) {
            $count = (int)$m[1]; $sides = (int)$m[2];
            $results = [];
            for ($i = 0; $i < $count; $i++) $results[] = rand(1, $sides);
            $sum = array_sum($results);
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Å—Ç–µ–π
            if ($count == 1) {
                $out = "üé≤ –ë—Ä–æ—Å–æ–∫: $dice\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: " . $results[0];
            } else {
                $out = "üé≤ –ë—Ä–æ—Å–æ–∫: $dice\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: " . implode(', ', $results) . "\nüíé –°—É–º–º–∞: $sum";
            }
            if ($label) $out .= "\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $label";
            echo nl2br(htmlspecialchars($out));
            exit;
        } else {
            echo '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–±–æ–≤!';
            exit;
        }
    }
    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã ---
    if ($action === 'save_note') {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        error_log('save_note called with content: ' . substr($_POST['content'] ?? '', 0, 100));
        error_log('save_note REQUEST_URI: ' . $_SERVER['REQUEST_URI']);
        error_log('save_note SCRIPT_NAME: ' . $_SERVER['SCRIPT_NAME']);
        
        $content = $_POST['content'] ?? '';
        $title = $_POST['title'] ?? '';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!isset($_SESSION['notes'])) {
            $_SESSION['notes'] = [];
        }
        
        if ($content) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏
            if ($title) {
                $content = "<h3>$title</h3>" . $content;
            }
            
            $_SESSION['notes'][] = $content;
            echo 'OK';
        } else {
            echo '–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ';
        }
        exit;
    }
    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ ---
    if ($action === 'update_notes') {
        $notes = $_SESSION['notes'] ?? [];
        $html = '';
        foreach ($notes as $i => $note) {
            $nameLine = '';
            
            // –ò—â–µ–º –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
            if (preg_match('/<div class="character-note-title">([^<]+)<\/div>/iu', $note, $matches)) {
                $nameLine = trim($matches[1]);
            } elseif (preg_match('/<div class="enemy-note-title">([^<]+)<\/div>/iu', $note, $matches)) {
                $nameLine = trim($matches[1]);
            } elseif (preg_match('/<div class="npc-name-header">([^<]+)<\/div>/iu', $note, $matches)) {
                $nameLine = trim($matches[1]);
            } elseif (preg_match('/<div class="npc-modern-header">([^<]+)<\/div>/iu', $note, $matches)) {
                $nameLine = trim($matches[1]);
            } elseif (preg_match('/<div class="dice-result-header">([^<]+)<\/div>/iu', $note, $matches)) {
                $nameLine = trim($matches[1]);
            } else {
                // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                $plain = strip_tags(str_replace(['<br>', "\n"], "\n", $note));
                $lines = array_filter(array_map('trim', explode("\n", $plain)));
                
                foreach ($lines as $line) {
                    if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/iu', $line)) {
                        $nameLine = $line;
                        break;
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                if ($nameLine) {
                    if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:\s*(.+)$/iu', $nameLine, $matches)) {
                        $nameLine = trim($matches[2]);
                    }
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ NPC –∑–∞–º–µ—Ç–∫–∞, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
                if (!$nameLine) {
                    foreach ($lines as $line) {
                        $line = trim($line);
                        if ($line && !preg_match('/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è)/iu', $line)) {
                            $nameLine = $line;
                            break;
                        }
                    }
                }
            }
            
            // –û—á–∏—â–∞–µ–º –∏–º—è - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            if ($nameLine) {
                $nameLine = preg_replace('/[^\w–∞-—è—ë\s]/ui', '', $nameLine);
                $nameLine = trim($nameLine);
                
                // –ï—Å–ª–∏ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
                if (mb_strlen($nameLine) > 20) {
                    $nameLine = mb_substr($nameLine, 0, 20) . '‚Ä¶';
                }
            }
            
            $preview = $nameLine ?: '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –∑–µ–ª—å–µ–º
            $isPotionNote = strpos($note, 'potion-note-header') !== false || strpos($note, '–ó–µ–ª—å–µ') !== false || strpos($note, 'üß™') !== false;
            $editButton = $isPotionNote ? '' : '<button class="note-edit" onclick="event.stopPropagation();editNoteTitle(' . $i . ', \'' . htmlspecialchars($nameLine, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '\')">‚úèÔ∏è</button>';
            
            $potionClass = $isPotionNote ? ' potion-note' : '';
            $html .= '<div class="note-item' . $potionClass . '" onclick="expandNote(' . $i . ')">' . htmlspecialchars($preview, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . $editButton . '<button class="note-remove" onclick="event.stopPropagation();removeNote(' . $i . ')">√ó</button></div>';
        }
        echo $html;
        exit;
    }
    // --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏ ---
    if ($action === 'edit_note_title') {
        $noteIndex = (int)($_POST['note_index'] ?? -1);
        $newTitle = trim($_POST['new_title'] ?? '');
        
        if ($noteIndex >= 0 && $noteIndex < count($_SESSION['notes']) && $newTitle !== '') {
            $note = $_SESSION['notes'][$noteIndex];
            
            // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
            if (preg_match('/<div class="dice-result-header">[^<]+<\/div>/iu', $note)) {
                // –î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ—Å—Ç–µ–π
                $note = preg_replace('/<div class="dice-result-header">[^<]+<\/div>/iu', '<div class="dice-result-header">' . htmlspecialchars($newTitle, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</div>', $note);
            } elseif (preg_match('/<div class="npc-name-header">[^<]+<\/div>/iu', $note)) {
                // –î–ª—è NPC
                $note = preg_replace('/<div class="npc-name-header">[^<]+<\/div>/iu', '<div class="npc-name-header">' . htmlspecialchars($newTitle, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</div>', $note);
            } elseif (preg_match('/<div class="character-note-title">[^<]+<\/div>/iu', $note)) {
                // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                $note = preg_replace('/<div class="character-note-title">[^<]+<\/div>/iu', '<div class="character-note-title">' . htmlspecialchars($newTitle, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</div>', $note);
            } elseif (preg_match('/<div class="enemy-note-title">[^<]+<\/div>/iu', $note)) {
                // –î–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
                $note = preg_replace('/<div class="enemy-note-title">[^<]+<\/div>/iu', '<div class="enemy-note-title">' . htmlspecialchars($newTitle, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</div>', $note);
            }
            
            $_SESSION['notes'][$noteIndex] = $note;
            echo 'success';
        } else {
            echo 'error';
        }
        exit;
    }
    
    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ ---
    if ($action === 'get_notes_data') {
        header('Content-Type: application/json');
        echo json_encode($_SESSION['notes'] ?? [], JSON_UNESCAPED_UNICODE);
        exit;
    }
    echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
    exit;
}

// --- –ß–∞—Ç ---
if (!isset($_SESSION['chat'])) {
    $_SESSION['chat'] = [];
}
if (isset($_GET['reset'])) {
    $_SESSION['chat'] = [];
    header("Location: index.php");
    exit;
}

// --- –ù–æ–≤—ã–π systemInstruction —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ---
$systemInstruction = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ DnD. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –±–ª–æ–∫–æ–≤.\n–°—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É, –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n–ò–º—è: ...\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ...\n–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ...\n–°–ª–∞–±–æ—Å—Ç—å: ...\n–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: –û—Ä—É–∂–∏–µ: ... –£—Ä–æ–Ω: ... –•–∏—Ç—ã: ... –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ...\n\n–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–û–ø–∏—Å–∞–Ω–∏–µ' –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–æ–≤. –ù–∞—á–∏–Ω–∞–π –±–ª–æ–∫–∏ —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –ù–ï –¥—É–±–ª–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–í–ê–ñ–ù–û: –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–≤—ã–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–≤–æ–π–Ω–∞—è –∞—Ç–∞–∫–∞', '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω', '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å', '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä–∞', '–Ø—Ä–æ—Å—Ç—å', '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞', '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–∞–≥–∏—è', '–ë–æ–µ–≤–æ–π —Å—Ç–∏–ª—å', '–°–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π', '–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–°–∫—Ä—ã—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–û–±—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏', '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ'. –ù–ï –ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∫—Ä–æ–º–µ '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û—Ä—É–∂–∏–µ, –£—Ä–æ–Ω, –•–∏—Ç—ã, –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –Ω–∞–ø–∏—à–∏ '-'. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.";
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['message']) && !isset($_POST['add_note']) && !isset($_POST['remove_note'])) {
    $userMessage = trim($_POST['message']);
    if ($userMessage !== '') {
        if (empty($_SESSION['chat']) || $_SESSION['chat'][0]['role'] !== 'system') {
            array_unshift($_SESSION['chat'], ['role' => 'system', 'content' => $systemInstruction]);
        }
        $_SESSION['chat'][] = ['role' => 'user', 'content' => $userMessage];
        $apiKey = 'sk-1e898ddba737411e948af435d767e893';
        $apiUrl = 'https://api.deepseek.com/v1/chat/completions';
        $messages = array_map(function($msg) {
            return ['role' => $msg['role'], 'content' => $msg['content']];
        }, $_SESSION['chat']);
        $data = [
            'model' => 'deepseek-chat',
            'messages' => $messages
        ];
        $ch = curl_init($apiUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $apiKey
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $response = curl_exec($ch);
        curl_close($ch);
        $result = json_decode($response, true);
        $aiMessage = $result['choices'][0]['message']['content'] ?? '[–û—à–∏–±–∫–∞ AI]';
        $aiMessage = preg_replace('/[*_`>#\-]+/', '', $aiMessage);
        $aiMessage = str_replace(['"', "'", '‚Äú', '‚Äù', '¬´', '¬ª'], '', $aiMessage);
        $aiMessage = preg_replace('/\n{2,}/', "\n", $aiMessage);
        $aiMessage = preg_replace('/\s{3,}/', "\n", $aiMessage);
        $lines = explode("\n", $aiMessage);
        $formatted = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if (mb_strlen($line) > 90) {
                $formatted = array_merge($formatted, str_split($line, 80));
            } else {
                $formatted[] = $line;
            }
        }
        $aiMessage = implode("\n", $formatted);
        $_SESSION['chat'][] = ['role' => 'assistant', 'content' => $aiMessage];
    }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
$fastBtns = '<div class="button-grid">';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openDiceStep1()" data-tooltip="–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏" aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—Ä–æ—Å–∫–æ–≤ –∫–æ—Å—Ç–µ–π"><span class="svg-icon icon-dice" data-icon="dice"></span> –ö–æ—Å—Ç–∏</button>';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openCharacterModal()" data-tooltip="–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"><span class="svg-icon icon-hero" data-icon="hero"></span> –ü–µ—Ä—Å–æ–Ω–∞–∂</button>';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openEnemyModal()" data-tooltip="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞" aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤"><span class="svg-icon icon-enemy" data-icon="enemy"></span> –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏</button>';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openPotionModalSimple()" data-tooltip="–°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å–µ" aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–µ–ª–∏–π"><span class="svg-icon icon-potion" data-icon="potion"></span> –ó–µ–ª—å—è</button>';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openSpellModal()" data-tooltip="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è" aria-label="–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"><span class="svg-icon icon-spell" data-icon="spell"></span> –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è</button>';
$fastBtns .= '<button class="fast-btn btn btn-primary interactive" onclick="openInitiativeModal()" data-tooltip="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π" aria-label="–û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π"><span class="svg-icon icon-initiative" data-icon="initiative"></span> –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</button>';
$fastBtns .= '</div>';

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º system) ---
$chatMsgs = '';
foreach ($_SESSION['chat'] as $msg) {
    if ($msg['role'] === 'system') continue;
    $who = $msg['role'] === 'user' ? '–í—ã' : 'AI';
    $class = $msg['role'];
    $chatMsgs .= '<div class="msg ' . $class . '"><b>' . $who . ':</b> ' . nl2br(htmlspecialchars($msg['content'])) . '</div>';
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∑–∞–º–µ—Ç–æ–∫ ---
$notesBlock = '';
foreach ($_SESSION['notes'] as $i => $note) {
    $nameLine = '';
    
    // –ò—â–µ–º –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
    if (preg_match('/<div class="character-note-title">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } elseif (preg_match('/<div class="enemy-note-title">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } elseif (preg_match('/<div class="npc-name-header">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } elseif (preg_match('/<div class="npc-modern-header">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } elseif (preg_match('/<div class="dice-result-header">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } else {
        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        $plain = strip_tags(str_replace(['<br>', "\n"], "\n", $note));
        $lines = array_filter(array_map('trim', explode("\n", $plain)));
        
        foreach ($lines as $line) {
            if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/iu', $line)) {
                $nameLine = $line;
                break;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if ($nameLine) {
            if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:\s*(.+)$/iu', $nameLine, $matches)) {
                $nameLine = trim($matches[2]);
            }
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ NPC –∑–∞–º–µ—Ç–∫–∞, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
        if (!$nameLine) {
            foreach ($lines as $line) {
                $line = trim($line);
                if ($line && !preg_match('/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è)/iu', $line)) {
                    $nameLine = $line;
                    break;
                }
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–º—è - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    if ($nameLine) {
        $nameLine = preg_replace('/[^\w–∞-—è—ë\s]/ui', '', $nameLine);
        $nameLine = trim($nameLine);
        
        // –ï—Å–ª–∏ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
        if (mb_strlen($nameLine) > 20) {
            $nameLine = mb_substr($nameLine, 0, 20) . '‚Ä¶';
        }
    }
    
    $preview = $nameLine ?: '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –∑–µ–ª—å–µ–º
    $isPotionNote = strpos($note, 'potion-note-header') !== false || strpos($note, '–ó–µ–ª—å–µ') !== false || strpos($note, 'üß™') !== false;
    $editButton = $isPotionNote ? '' : '<button class="note-edit" onclick="event.stopPropagation();editNoteTitle(' . $i . ', \'' . htmlspecialchars($nameLine, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '\')">‚úèÔ∏è</button>';
    
    $potionClass = $isPotionNote ? ' potion-note' : '';
    $notesBlock .= '<div class="note-item' . $potionClass . '" onclick="expandNote(' . $i . ')">' . htmlspecialchars($preview, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . $editButton . '<button class="note-remove" onclick="event.stopPropagation();removeNote(' . $i . ')">√ó</button></div>';
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
$template = file_get_contents(__DIR__ . '/template.html');
$template = str_replace('{{fast_buttons}}', $fastBtns, $template);
$template = str_replace('{{chat_messages}}', $chatMsgs, $template);
$template = str_replace('{{notes_block}}', $notesBlock, $template);
echo $template;
?>


<script>
// --- Dice Modal Steps ---
function openDiceStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Å—Ç–∏:</b><div class="mini-menu-btns">' +
        ['d3','d4','d6','d8','d10','d12','d20','d100'].map(d => `<button onclick=\'openDiceStep2("${d}")\' class=\'fast-btn\'>${d}</button>`).join(' ') + '</div>'
    );
    document.getElementById('modal-save').style.display = 'none';
}
function openDiceStep2(dice) {
    showModal(`<b class="mini-menu-title">–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ ${dice}?</b><div class="npc-level-wrap"><input type=number id=dice-count value=1 min=1 max=20 style=\'width:60px\'></div><div class="npc-level-wrap"><input type=text id=dice-label placeholder=\'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\' style=\'margin-top:8px;width:90%\'></div><button class=\'fast-btn\' onclick=\'getDiceResult("${dice}")\'>–ë—Ä–æ—Å–∏—Ç—å</button>`);
    document.getElementById('modal-save').style.display = 'none';
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    setTimeout(() => document.getElementById('dice-count').focus(), 100);
}
function getDiceResult(dice) {
    let count = document.getElementById('dice-count').value;
    let label = document.getElementById('dice-label').value;
    let diceStr = count + dice;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=dice_result&dice=' + encodeURIComponent(diceStr) + '&label=' + encodeURIComponent(label)
    })
    .then(r => r.text())
    .then(txt => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const editButton = `<button class="fast-btn" onclick="editDiceComment('${dice}', '${count}', '${label}')" style="margin-bottom: 10px;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</button>`;
        
        document.getElementById('modal-content').innerHTML = editButton + formatResultSegments(txt, false);
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveDiceResultAsNote(txt, label); closeModal(); };
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∏
        saveDiceResultAsNote(txt, label);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function editDiceComment(dice, count, currentLabel) {
    showModal(`<b class="mini-menu-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ${count}${dice}</b>
        <div class="npc-level-wrap">
            <input type="text" id="edit-dice-label" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" value="${currentLabel}" style="width:90%">
        </div>
        <button class="fast-btn" onclick="updateDiceComment(\'' + dice + '\', \'' + count + '\')">–û–±–Ω–æ–≤–∏—Ç—å</button>`);
    document.getElementById('modal-save').style.display = 'none';
    setTimeout(() => document.getElementById('edit-dice-label').focus(), 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function updateDiceComment(dice, count) {
    let newLabel = document.getElementById('edit-dice-label').value;
    let diceStr = count + dice;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=dice_result&dice=' + encodeURIComponent(diceStr) + '&label=' + encodeURIComponent(newLabel)
    })
    .then(r => r.text())
    .then(txt => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const editButton = `<button class="fast-btn" onclick="editDiceComment('${dice}', '${count}', '${newLabel}')" style="margin-bottom: 10px;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</button>`;
        
        document.getElementById('modal-content').innerHTML = editButton + formatResultSegments(txt, false);
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveDiceResultAsNote(txt, newLabel); closeModal(); };
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∏
        saveDiceResultAsNote(txt, newLabel);
    });
}
// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ ---
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ API







// --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
function openCharacterModal() {
    showModal(`
        <div class="character-generator">
            <div class="generator-header">
                <h2 style="color: var(--text-color, #e0e0e0); margin-bottom: 10px;">üé≠ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</h2>
                <p class="generator-subtitle" style="color: var(--text-color, #e0e0e0); opacity: 0.8; margin: 0;">–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D 5e —Å –ø–æ–º–æ—â—å—é AI</p>
            </div>
            
            <div class="character-form-container">
                <form id="newCharacterForm" class="character-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="new-character-race">–†–∞—Å–∞</label>
                            <select id="new-character-race" name="race" required>
                                <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="new-character-class">–ö–ª–∞—Å—Å</label>
                            <select id="new-character-class" name="class" required>
                                <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–æ–≤...</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="new-character-level">–£—Ä–æ–≤–µ–Ω—å</label>
                            <select id="new-character-level" name="level" required>
                                <option value="1">1 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="2">2 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="3">3 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="4">4 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="5">5 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="6">6 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="7">7 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="8">8 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="9">9 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="10">10 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="11">11 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="12">12 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="13">13 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="14">14 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="15">15 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="16">16 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="17">17 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="18">18 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="19">19 —É—Ä–æ–≤–µ–Ω—å</option>
                                <option value="20">20 —É—Ä–æ–≤–µ–Ω—å</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="new-character-gender">–ü–æ–ª</label>
                            <select id="new-character-gender" name="gender">
                                <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
                                <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                                <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="new-character-alignment">–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ</label>
                            <select id="new-character-alignment" name="alignment">
                                <option value="random">–°–ª—É—á–∞–π–Ω–æ–µ</option>
                                <option value="lawful_good">–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã–π –¥–æ–±—Ä—ã–π</option>
                                <option value="neutral_good">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–æ–±—Ä—ã–π</option>
                                <option value="chaotic_good">–•–∞–æ—Ç–∏—á–Ω—ã–π –¥–æ–±—Ä—ã–π</option>
                                <option value="lawful_neutral">–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                                <option value="true_neutral">–ò—Å—Ç–∏–Ω–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                                <option value="chaotic_neutral">–•–∞–æ—Ç–∏—á–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                                <option value="lawful_evil">–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã–π –∑–ª–æ–π</option>
                                <option value="neutral_evil">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∑–ª–æ–π</option>
                                <option value="chaotic_evil">–•–∞–æ—Ç–∏—á–Ω—ã–π –∑–ª–æ–π</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="new-character-background">–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è</label>
                            <select id="new-character-background" name="background">
                                <option value="random">–°–ª—É—á–∞–π–Ω–∞—è</option>
                                <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–π...</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group full-width">
                            <label for="new-character-ability-method">–ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</label>
                            <select id="new-character-ability-method" name="ability_method">
                                <option value="standard_array">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ (15,14,13,12,10,8)</option>
                                <option value="point_buy">–ü–æ–∫—É–ø–∫–∞ –æ—á–∫–æ–≤ (27 –æ—á–∫–æ–≤)</option>
                                <option value="roll_4d6">4d6 drop lowest</option>
                                <option value="roll_3d6">3d6 (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <span class="btn-icon">üé≤</span>
                            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal()">
                            <span class="btn-icon">‚ùå</span>
                            –û—Ç–º–µ–Ω–∞
                        </button>
                    </div>
                </form>
                
                <div id="characterProgress" class="character-progress" style="display: none;">
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill"></div>
                        </div>
                        <div class="progress-text" id="characterProgressText">–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</div>
                    </div>
                </div>
                
                <div id="characterResult" class="character-result" style="display: none;">
                    <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—é–¥–∞ -->
                </div>
            </div>
        </div>
    `);
    
    document.getElementById('modal-save').style.display = 'none';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadNewCharacterData();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('newCharacterForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const resultDiv = document.getElementById('characterResult');
        const progressDiv = document.getElementById('characterProgress');
        const formContainer = document.querySelector('.character-form-container');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        formContainer.style.display = 'none';
        progressDiv.style.display = 'block';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressFill = progressDiv.querySelector('.progress-fill');
        const progressText = progressDiv.querySelector('#characterProgressText');
        let progress = 0;
        const progressInterval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress > 90) progress = 90;
            progressFill.style.width = progress + '%';
            
            if (progress < 30) {
                progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...';
            } else if (progress < 60) {
                progressText.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...';
            } else if (progress < 90) {
                progressText.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI...';
            } else {
                progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...';
            }
        }, 200);
        
        fetch('api/generate-characters.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            console.log('Generation response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Generation response data:', JSON.stringify(data, null, 2));
            clearInterval(progressInterval);
            progressFill.style.width = '100%';
            
            setTimeout(() => {
                progressDiv.style.display = 'none';
                resultDiv.style.display = 'block';
                
                if (data.success) {
                    const character = data.character;
                    resultDiv.innerHTML = formatNewCharacter(character);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    const saveButton = document.createElement('div');
                    saveButton.className = 'character-actions';
                    saveButton.innerHTML = `
                        <button onclick="saveNewCharacterToNotes()" class="btn btn-success">
                            <span class="btn-icon">üíæ</span>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏
                        </button>
                        <button onclick="regenerateCharacter()" class="btn btn-primary">
                            <span class="btn-icon">üîÑ</span>
                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                        </button>
                        <button onclick="closeModal()" class="btn btn-secondary">
                            <span class="btn-icon">‚ùå</span>
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    `;
                    resultDiv.appendChild(saveButton);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    saveNewCharacterToNotes(character);
                } else {
                    resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') + '</div>';
                }
            }, 500);
        })
        .catch(error => {
            clearInterval(progressInterval);
            progressDiv.style.display = 'none';
            formContainer.style.display = 'block';
            console.error('Generation error:', error);
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
        });
    });
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
function loadNewCharacterData() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—ã
    fetch('api/generate-characters.php?action=races')
        .then(response => {
            console.log('Races response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Races data:', JSON.stringify(data, null, 2));
            if (data.success && data.races) {
                const raceSelect = document.getElementById('new-character-race');
                raceSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É</option>';
                data.races.forEach(race => {
                    const option = document.createElement('option');
                    option.value = race.id;
                    option.textContent = race.name_ru || race.name;
                    raceSelect.appendChild(option);
                    console.log('Added race option:', race.id, race.name_ru || race.name);
                });
                console.log('Races loaded successfully:', data.races.length);
            } else {
                console.error('Failed to load races:', data);
            }
        })
        .catch(error => {
            console.error('Error loading races:', error);
        });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã
    fetch('api/generate-characters.php?action=classes')
        .then(response => {
            console.log('Classes response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Classes data:', JSON.stringify(data, null, 2));
            if (data.success && data.classes) {
                const classSelect = document.getElementById('new-character-class');
                classSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>';
                data.classes.forEach(cls => {
                    const option = document.createElement('option');
                    option.value = cls.id;
                    option.textContent = cls.name_ru || cls.name;
                    classSelect.appendChild(option);
                    console.log('Added class option:', cls.id, cls.name_ru || cls.name);
                });
                console.log('Classes loaded successfully:', data.classes.length);
            } else {
                console.error('Failed to load classes:', data);
            }
        })
        .catch(error => {
            console.error('Error loading classes:', error);
        });
    
    // –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ
    const backgroundSelect = document.getElementById('new-character-background');
    backgroundSelect.innerHTML = `
        <option value="random">–°–ª—É—á–∞–π–Ω–∞—è</option>
        <option value="acolyte">–ê–∫–æ–ª–∏—Ç</option>
        <option value="criminal">–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫</option>
        <option value="folk_hero">–ù–∞—Ä–æ–¥–Ω—ã–π –≥–µ—Ä–æ–π</option>
        <option value="noble">–î–≤–æ—Ä—è–Ω–∏–Ω</option>
        <option value="soldier">–°–æ–ª–¥–∞—Ç</option>
        <option value="sage">–ú—É–¥—Ä–µ—Ü</option>
        <option value="sailor">–ú–∞—Ç—Ä–æ—Å</option>
        <option value="guild_artisan">–ì–∏–ª—å–¥–µ–π—Å–∫–∏–π —Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫</option>
        <option value="hermit">–û—Ç—à–µ–ª—å–Ω–∏–∫</option>
        <option value="outlander">–ë—Ä–æ–¥—è–≥–∞</option>
    `;
}

function formatNewCharacter(character) {
    let html = `
        <div class="character-card">
            <div class="character-header">
                <h3>${character.name}</h3>
                <div class="character-subtitle">${character.race} - ${character.class} (${character.level} —É—Ä–æ–≤–µ–Ω—å)</div>
            </div>
            
            <div class="character-stats">
                <div class="stat-row">
                    <div class="stat-item"><strong>–ü–æ–ª:</strong> ${character.gender}</div>
                    <div class="stat-item"><strong>–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</strong> ${character.alignment}</div>
                    <div class="stat-item"><strong>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</strong> ${character.background}</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-item"><strong>–•–∏—Ç—ã:</strong> ${character.hit_points}</div>
                    <div class="stat-item"><strong>–ö–î:</strong> ${character.armor_class}</div>
                    <div class="stat-item"><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${character.speed} —Ñ—É—Ç–æ–≤</div>
                </div>
                
                <div class="abilities-section">
                    <h4>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                    <div class="abilities-grid">
                        <div class="ability-item">–°–ò–õ: ${character.abilities.str} (${character.modifiers.str >= 0 ? '+' : ''}${character.modifiers.str})</div>
                        <div class="ability-item">–õ–û–í: ${character.abilities.dex} (${character.modifiers.dex >= 0 ? '+' : ''}${character.modifiers.dex})</div>
                        <div class="ability-item">–¢–ï–õ: ${character.abilities.con} (${character.modifiers.con >= 0 ? '+' : ''}${character.modifiers.con})</div>
                        <div class="ability-item">–ò–ù–¢: ${character.abilities.int} (${character.modifiers.int >= 0 ? '+' : ''}${character.modifiers.int})</div>
                        <div class="ability-item">–ú–î–†: ${character.abilities.wis} (${character.modifiers.wis >= 0 ? '+' : ''}${character.modifiers.wis})</div>
                        <div class="ability-item">–•–ê–†: ${character.abilities.cha} (${character.modifiers.cha >= 0 ? '+' : ''}${character.modifiers.cha})</div>
                    </div>
                </div>
                
                ${character.description ? `
                    <div class="character-description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                        <p>${character.description}</p>
                    </div>
                ` : ''}
                
                ${character.background_story ? `
                    <div class="character-background">
                        <h4>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è</h4>
                        <p>${character.background_story}</p>
                    </div>
                ` : ''}
                
                ${character.equipment ? `
                    <div class="character-equipment">
                        <h4>–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</h4>
                        ${character.equipment.weapons && character.equipment.weapons.length > 0 ? `
                            <div class="equipment-category">
                                <strong>–û—Ä—É–∂–∏–µ:</strong>
                                <ul>${character.equipment.weapons.map(weapon => `<li>${weapon}</li>`).join('')}</ul>
                            </div>
                        ` : ''}
                        ${character.equipment.armor && character.equipment.armor.length > 0 ? `
                            <div class="equipment-category">
                                <strong>–ë—Ä–æ–Ω—è:</strong>
                                <ul>${character.equipment.armor.map(armor => `<li>${armor}</li>`).join('')}</ul>
                            </div>
                        ` : ''}
                        ${character.equipment.items && character.equipment.items.length > 0 ? `
                            <div class="equipment-category">
                                <strong>–ü—Ä–µ–¥–º–µ—Ç—ã:</strong>
                                <ul>${character.equipment.items.map(item => `<li>${item}</li>`).join('')}</ul>
                            </div>
                        ` : ''}
                        ${character.equipment.money ? `
                            <div class="equipment-category">
                                <strong>–î–µ–Ω—å–≥–∏:</strong> ${character.equipment.money}
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
                
                ${character.spells ? `
                    <div class="character-spells">
                        <h4>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è</h4>
                        ${character.spells.cantrips && character.spells.cantrips.length > 0 ? `
                            <div class="spell-category">
                                <strong>–ó–∞–≥–æ–≤–æ—Ä—ã:</strong>
                                <ul>${character.spells.cantrips.map(spell => `<li>${spell}</li>`).join('')}</ul>
                            </div>
                        ` : ''}
                        ${character.spells.level_1 && character.spells.level_1.length > 0 ? `
                            <div class="spell-category">
                                <strong>1-–π —É—Ä–æ–≤–µ–Ω—å:</strong>
                                <ul>${character.spells.level_1.map(spell => `<li>${spell}</li>`).join('')}</ul>
                            </div>
                        ` : ''}
                        ${character.spells.spellbook ? `
                            <div class="spell-info">
                                <strong>–ö–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:</strong> ${character.spells.spellbook}
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
                
                ${character.potions && character.potions.length > 0 ? `
                    <div class="character-potions">
                        <h4>–ó–µ–ª—å—è</h4>
                        <ul>${character.potions.map(potion => `<li>${potion.name} - ${potion.effect}</li>`).join('')}</ul>
                    </div>
                ` : ''}
                
                ${character.personality ? `
                    <div class="character-personality">
                        <h4>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</h4>
                        ${character.personality.–ò–¥–µ–∞–ª ? `
                            <div class="personality-trait">
                                <strong>–ò–¥–µ–∞–ª:</strong> ${character.personality.–ò–¥–µ–∞–ª.name} - ${character.personality.–ò–¥–µ–∞–ª.description}
                            </div>
                        ` : ''}
                        ${character.personality.–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å ? `
                            <div class="personality-trait">
                                <strong>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å:</strong> ${character.personality.–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å.name} - ${character.personality.–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å.description}
                            </div>
                        ` : ''}
                        ${character.personality.–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ ? `
                            <div class="personality-trait">
                                <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫:</strong> ${character.personality.–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫.name} - ${character.personality.–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫.description}
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
            </div>
        </div>
    `;
    
    return html;
}

function saveNewCharacterToNotes(character) {
    const noteContent = `
        <div class="character-note">
            <div class="character-note-title">${character.name}</div>
            <div class="character-note-info">
                <div><strong>–†–∞—Å–∞:</strong> ${character.race}</div>
                <div><strong>–ö–ª–∞—Å—Å:</strong> ${character.class}</div>
                <div><strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${character.level}</div>
                <div><strong>–ü–æ–ª:</strong> ${character.gender}</div>
                <div><strong>–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</strong> ${character.alignment}</div>
                <div><strong>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</strong> ${character.background.name || character.background}</div>
                <div><strong>–•–∏—Ç—ã:</strong> ${character.hit_points}</div>
                <div><strong>–ö–î:</strong> ${character.armor_class}</div>
                <div><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${character.speed} —Ñ—É—Ç–æ–≤</div>
                <div><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></div>
                <div style="margin-left: 20px;">
                    <div>–°–ò–õ: ${character.abilities.str} (${character.modifiers.str >= 0 ? '+' : ''}${character.modifiers.str})</div>
                    <div>–õ–û–í: ${character.abilities.dex} (${character.modifiers.dex >= 0 ? '+' : ''}${character.modifiers.dex})</div>
                    <div>–¢–ï–õ: ${character.abilities.con} (${character.modifiers.con >= 0 ? '+' : ''}${character.modifiers.con})</div>
                    <div>–ò–ù–¢: ${character.abilities.int} (${character.modifiers.int >= 0 ? '+' : ''}${character.modifiers.int})</div>
                    <div>–ú–î–†: ${character.abilities.wis} (${character.modifiers.wis >= 0 ? '+' : ''}${character.modifiers.wis})</div>
                    <div>–•–ê–†: ${character.abilities.cha} (${character.modifiers.cha >= 0 ? '+' : ''}${character.modifiers.cha})</div>
                </div>
                ${character.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${character.description}</div>` : ''}
                ${character.background_story ? `<div><strong>–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</strong> ${character.background_story}</div>` : ''}
            </div>
        </div>
    `;
    
    fetch('api/save-note.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(character.name)
    })
    .then(r => r.json())
    .then(data => {
        if (data.success) {
            console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ ' + character.name + ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞–º–µ—Ç–∫–∏!');
        } else {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data.message);
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    });
}

function regenerateCharacter() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    closeModal();
    setTimeout(() => {
        openCharacterModal();
    }, 100);
}

// --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ ---
function openEnemyModal() {
    showModal(`
        <div class="enemy-generator">
            <div class="generator-header">
                <h2>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</h2>
                <p class="generator-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã</p>
            </div>
            
            <form id="enemyForm" class="enemy-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="enemy-threat">–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã</label>
                        <select id="enemy-threat" name="threat_level" required>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã</option>
                            <option value="easy">–õ–µ–≥–∫–∏–π (CR 0-3)</option>
                            <option value="medium">–°—Ä–µ–¥–Ω–∏–π (CR 1-7)</option>
                            <option value="hard">–°–ª–æ–∂–Ω—ã–π (CR 5-12)</option>
                            <option value="deadly">–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π (CR 10-20)</option>
                            <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemy-count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</label>
                        <input type="number" id="enemy-count" name="count" min="1" max="10" value="1" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemy-type">–¢–∏–ø –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</label>
                        <select id="enemy-type" name="enemy_type">
                            <option value="">–õ—é–±–æ–π —Ç–∏–ø</option>
                            <option value="humanoid">–ì—É–º–∞–Ω–æ–∏–¥—ã</option>
                            <option value="beast">–ó–≤–µ—Ä–∏</option>
                            <option value="undead">–ù–µ–∂–∏—Ç—å</option>
                            <option value="giant">–í–µ–ª–∏–∫–∞–Ω—ã</option>
                            <option value="dragon">–î—Ä–∞–∫–æ–Ω—ã</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemy-environment">–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è</label>
                        <select id="enemy-environment" name="environment">
                            <option value="">–õ—é–±–∞—è —Å—Ä–µ–¥–∞</option>
                            <option value="arctic">–ê—Ä–∫—Ç–∏–∫–∞</option>
                            <option value="coastal">–ü–æ–±–µ—Ä–µ–∂—å–µ</option>
                            <option value="desert">–ü—É—Å—Ç—ã–Ω—è</option>
                            <option value="forest">–õ–µ—Å</option>
                            <option value="grassland">–†–∞–≤–Ω–∏–Ω—ã</option>
                            <option value="hill">–•–æ–ª–º—ã</option>
                            <option value="mountain">–ì–æ—Ä—ã</option>
                            <option value="swamp">–ë–æ–ª–æ—Ç–∞</option>
                            <option value="underdark">–ü–æ–¥–∑–µ–º–µ–ª—å–µ</option>
                            <option value="urban">–ì–æ—Ä–æ–¥</option>
                        </select>
                    </div>
                    

                </div>
                

                
                <button type="submit" class="generate-btn">
                    <span class="btn-icon"><span class="svg-icon icon-enemy" data-icon="enemy"></span></span>
                    <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</span>
                </button>
            </form>
            
            <div id="enemyResult" class="result-container"></div>
        </div>
    `);
    
    document.getElementById('modal-save').style.display = 'none';
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ —Å—Ä–µ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    function updateAvailableOptions() {
        const threatLevel = document.getElementById('enemy-threat').value;
        const typeSelect = document.getElementById('enemy-type');
        const environmentSelect = document.getElementById('enemy-environment');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        typeSelect.value = '';
        environmentSelect.value = '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const availableTypes = {
            'easy': ['humanoid', 'beast', 'undead'],
            'medium': ['humanoid', 'beast', 'undead', 'giant'],
            'hard': ['humanoid', 'beast', 'undead', 'giant', 'dragon'],
            'deadly': ['humanoid', 'undead', 'giant', 'dragon']
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const availableEnvironments = {
            'easy': ['arctic', 'coastal', 'desert', 'forest', 'grassland', 'hill', 'urban'],
            'medium': ['arctic', 'coastal', 'desert', 'forest', 'grassland', 'hill', 'mountain', 'swamp', 'urban'],
            'hard': ['arctic', 'coastal', 'desert', 'forest', 'grassland', 'hill', 'mountain', 'swamp', 'underdark', 'urban'],
            'deadly': ['mountain', 'swamp', 'underdark', 'urban']
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã
        Array.from(typeSelect.options).forEach(option => {
            if (option.value === '') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–õ—é–±–æ–π —Ç–∏–ø"
            
            if (threatLevel && availableTypes[threatLevel]) {
                option.disabled = !availableTypes[threatLevel].includes(option.value);
                if (option.disabled) {
                    option.style.display = 'none';
                } else {
                    option.style.display = 'block';
                }
            } else {
                option.disabled = false;
                option.style.display = 'block';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã
        Array.from(environmentSelect.options).forEach(option => {
            if (option.value === '') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–õ—é–±–∞—è —Å—Ä–µ–¥–∞"
            
            if (threatLevel && availableEnvironments[threatLevel]) {
                option.disabled = !availableEnvironments[threatLevel].includes(option.value);
                if (option.disabled) {
                    option.style.display = 'none';
                } else {
                    option.style.display = 'block';
                }
            } else {
                option.disabled = false;
                option.style.display = 'block';
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('enemy-threat').addEventListener('change', updateAvailableOptions);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
    updateAvailableOptions();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('enemyForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const submitBtn = this.querySelector('button[type="submit"]');
        const resultDiv = document.getElementById('enemyResult');
        
        submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-loading" data-icon="loading"></span></span><span class="btn-text">–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...</div>';
        

        
        fetch('api/generate-enemies.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('API Response:', data);
            if (data.success && data.enemies) {
                let resultHtml = formatEnemiesFromApi(data.enemies);
                
                // –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∑–∞–º–µ—Ç–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                
                resultDiv.innerHTML = resultHtml;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                setTimeout(() => {
                    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 100);
            } else {
                let errorMsg = data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                if (data.message) {
                    errorMsg = data.message;
                }
                resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞: ' + errorMsg + '</div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
            
            if (error.message.includes('HTTP')) {
                errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`;
            } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
                errorMessage = 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            } else if (error.message.includes('Failed to fetch')) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.';
            }
            
            resultDiv.innerHTML = '<div class="error">' + errorMessage + '</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-enemy" data-icon="enemy"></span></span><span class="btn-text">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</span>';
            submitBtn.disabled = false;
        });
    });
}
function openNpcStepLevel(cls) {
    npcClass = cls;
    showModal(`
        <b class="mini-menu-title">–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å NPC (1-20):</b>
        <div class="npc-level-wrap">
            <input type=number id=npc-level value=1 min=1 max=20 style='width:60px'>
        </div>
        <div class="npc-advanced-settings" style="margin-top: 15px;">
            <button class='fast-btn' onclick='toggleAdvancedSettings()' style='background: var(--accent-info);'>‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
        </div>
        <div id="advanced-settings-panel" style="display: none; margin-top: 15px; padding: 15px; background: var(--bg-tertiary); border-radius: 8px; border: 1px solid var(--border-tertiary);">
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: var(--text-tertiary); font-weight: bold;">–ü–æ–ª:</label>
                <div class="advanced-options">
                    <label style="margin-right: 15px;"><input type="radio" name="gender" value="–º—É–∂—Å–∫–æ–π" checked> –ú—É–∂—Å–∫–æ–π</label>
                    <label style="margin-right: 15px;"><input type="radio" name="gender" value="–∂–µ–Ω—Å–∫–∏–π"> –ñ–µ–Ω—Å–∫–∏–π</label>
                    <label><input type="radio" name="gender" value="—Ä–∞–Ω–¥–æ–º"> –†–∞–Ω–¥–æ–º</label>
                </div>
            </div>
            <div>
                <label style="display: block; margin-bottom: 5px; color: var(--text-tertiary); font-weight: bold;">–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</label>
                <div class="advanced-options">
                    <label style="margin-right: 15px;"><input type="radio" name="alignment" value="–¥–æ–±—Ä—ã–π" checked> –î–æ–±—Ä—ã–π</label>
                    <label style="margin-right: 15px;"><input type="radio" name="alignment" value="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"> –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</label>
                    <label style="margin-right: 15px;"><input type="radio" name="alignment" value="–∑–ª–æ–π"> –ó–ª–æ–π</label>
                    <label><input type="radio" name="alignment" value="—Ä–∞–Ω–¥–æ–º"> –†–∞–Ω–¥–æ–º</label>
                </div>
            </div>
            <div>
                <label style="display: block; margin-bottom: 5px; color: var(--text-tertiary); font-weight: bold;">–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</label>
                <select id="npc-background" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid var(--border-tertiary); background: var(--bg-primary); color: var(--text-primary);">
                    <option value="soldier">–°–æ–ª–¥–∞—Ç</option>
                    <option value="criminal">–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫</option>
                    <option value="sage">–ú—É–¥—Ä–µ—Ü</option>
                    <option value="noble">–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π</option>
                    <option value="merchant">–¢–æ—Ä–≥–æ–≤–µ—Ü</option>
                    <option value="artisan">–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫</option>
                    <option value="farmer">–§–µ—Ä–º–µ—Ä</option>
                    <option value="hermit">–û—Ç—à–µ–ª—å–Ω–∏–∫</option>
                    <option value="entertainer">–ê—Ä—Ç–∏—Å—Ç</option>
                    <option value="acolyte">–ü–æ—Å–ª—É—à–Ω–∏–∫</option>
                    <option value="outlander">–ß—É–∂–µ–∑–µ–º–µ—Ü</option>
                    <option value="urchin">–ë—Ä–æ–¥—è–≥–∞</option>
                </select>
            </div>
        </div>
        <div style="margin-top: 15px;">
            <button class='fast-btn' onclick='generateNpcWithLevel()'>–°–æ–∑–¥–∞—Ç—å NPC</button>
        </div>
    `);
    document.getElementById('modal-save').style.display = 'none';
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —É—Ä–æ–≤–Ω—è
    setTimeout(() => document.getElementById('npc-level').focus(), 100);
}

// --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
function toggleAdvancedSettings() {
    const panel = document.getElementById('advanced-settings-panel');
    const button = document.querySelector('.npc-advanced-settings .fast-btn');
    
    if (panel.style.display === 'none') {
        panel.style.display = 'block';
        button.innerHTML = '‚öôÔ∏è –°–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        button.style.background = 'var(--accent-warning)';
    } else {
        panel.style.display = 'none';
        button.innerHTML = '‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        button.style.background = 'var(--accent-info)';
    }
}
// --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ ---
window.uniqueTraders = {
  data: {
    traits: [
      '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π',
      '–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∏ —Ä–∞—Å—á–µ—Ç–ª–∏–≤—ã–π',
      '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π',
      '–ì–æ—Ä–¥—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π',
      '–ú—É–¥—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π'
    ],
    motivation: [
      '–ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π –∏ –º—É–¥—Ä–æ—Å—Ç–∏',
      '–ó–∞—â–∏—Ç–∞ –±–ª–∏–∑–∫–∏—Ö –∏ —Å–ª–∞–±—ã—Ö',
      '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏ –∏ –≤–ª–∏—è–Ω–∏—è',
      '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      '–°–ª—É–∂–µ–Ω–∏–µ –≤—ã—Å—à–µ–π —Ü–µ–ª–∏'
    ],
    occupations: [
      { name_ru: '–¢–æ—Ä–≥–æ–≤–µ—Ü' },
      { name_ru: '–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫' },
      { name_ru: '–°—Ç—Ä–∞–∂–Ω–∏–∫' },
      { name_ru: '–£—á–µ–Ω—ã–π' },
      { name_ru: '–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç' }
    ]
  }
};

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ D&D ---
window.dndMechanics = {
  classes: {
    fighter: { casting_category: 'none', saving_throws: ['str', 'con'] },
    wizard: { casting_category: 'full', spellcasting_ability: 'int', saving_throws: ['int', 'wis'] },
    cleric: { casting_category: 'full', spellcasting_ability: 'wis', saving_throws: ['wis', 'cha'] },
    rogue: { casting_category: 'none', saving_throws: ['dex', 'int'] },
    barbarian: { casting_category: 'none', saving_throws: ['str', 'con'] },
    paladin: { casting_category: 'half', spellcasting_ability: 'cha', saving_throws: ['wis', 'cha'] },
    ranger: { casting_category: 'half', spellcasting_ability: 'wis', saving_throws: ['str', 'dex'] },
    bard: { casting_category: 'full', spellcasting_ability: 'cha', saving_throws: ['dex', 'cha'] },
    druid: { casting_category: 'full', spellcasting_ability: 'wis', saving_throws: ['int', 'wis'] },
    monk: { casting_category: 'none', saving_throws: ['str', 'dex'] },
    warlock: { casting_category: 'pact', spellcasting_ability: 'cha', saving_throws: ['wis', 'cha'] },
    sorcerer: { casting_category: 'full', spellcasting_ability: 'cha', saving_throws: ['con', 'cha'] },
    artificer: { casting_category: 'half', spellcasting_ability: 'int', saving_throws: ['con', 'int'] }
  },
  races: {
    human: { speed: { walk: 30 } },
    elf: { speed: { walk: 30 } },
    dwarf: { speed: { walk: 25 } },
    halfling: { speed: { walk: 25 } },
    gnome: { speed: { walk: 25 } },
    half_elf: { speed: { walk: 30 } },
    half_orc: { speed: { walk: 30 } },
    tiefling: { speed: { walk: 30 } },
    dragonborn: { speed: { walk: 30 } },
    goblin: { speed: { walk: 30 } },
    orc: { speed: { walk: 30 } },
    kobold: { speed: { walk: 30 } },
    lizardfolk: { speed: { walk: 30 } },
    hobbit: { speed: { walk: 25 } }
  },
  enums: {
    saving_throws: ['str', 'dex', 'con', 'int', 'wis', 'cha']
  },
  rules: {
    slot_tables: {
      full: {
        1: { 1: 2 },
        2: { 1: 3, 2: 2 },
        3: { 1: 4, 2: 2 },
        4: { 1: 4, 2: 3 },
        5: { 1: 4, 2: 3, 3: 2 }
      },
      half: {
        1: { 1: 0 },
        2: { 1: 2 },
        3: { 1: 3 },
        4: { 1: 3, 2: 1 },
        5: { 1: 4, 2: 2 }
      },
      pact: {
        1: { 1: 1 },
        2: { 1: 2 },
        3: { 1: 2, 2: 1 },
        4: { 1: 2, 2: 1 },
        5: { 1: 2, 2: 1, 3: 1 }
      }
    }
  }
};
console.log('D&D Mechanics loaded successfully');

// --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ NPC ---
function generateTechnicalParams(race, npcClass, level) {
    console.log('generateTechnicalParams called with:', { race, npcClass, level });
    console.log('window.dndMechanics:', window.dndMechanics);
    
    if (!window.dndMechanics) {
        console.error('D&D Mechanics not loaded');
        return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ë–∞–∑–æ–≤—ã–µ (–¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)";
    }
    
    const mechanics = window.dndMechanics;
    
    // –ú–∞–ø–ø–∏–Ω–≥–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ API
    const classKey = npcClass.toLowerCase();
    const raceKey = race.toLowerCase();
    
    console.log('Processing with keys:', { classKey, raceKey });
    console.log('Available classes:', mechanics.classes ? Object.keys(mechanics.classes) : 'undefined');
    console.log('Available races:', mechanics.races ? Object.keys(mechanics.races) : 'undefined');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (10-18)
    const abilities = {
        str: Math.floor(Math.random() * 9) + 10,
        dex: Math.floor(Math.random() * 9) + 10,
        con: Math.floor(Math.random() * 9) + 10,
        int: Math.floor(Math.random() * 9) + 10,
        wis: Math.floor(Math.random() * 9) + 10,
        cha: Math.floor(Math.random() * 9) + 10
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –ø–æ —É—Ä–æ–≤–Ω—é
    let proficiencyBonus = 2;
    if (level >= 5) proficiencyBonus = 3;
    if (level >= 9) proficiencyBonus = 4;
    if (level >= 13) proficiencyBonus = 5;
    if (level >= 17) proficiencyBonus = 6;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞
    const classData = mechanics.classes[classKey] || mechanics.classes.fighter || {};
    const castingCategory = classData.casting_category || 'none';
    const spellcastingAbility = classData.spellcasting_ability || null;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const mods = {};
    for (let ability in abilities) {
        mods[ability] = Math.floor((abilities[ability] - 10) / 2);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–î
    let ac = 10 + mods.dex; // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞
    if (castingCategory !== 'none') {
        ac = 13 + mods.dex; // Mage Armor –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É
    const initiativeMod = mods.dex;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    const raceData = mechanics.races[raceKey] || mechanics.races.human || { speed: { walk: 30 } };
    const speed = raceData.speed ? raceData.speed.walk : 30;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∞—Å–±—Ä–æ—Å–∫–∏
    const savingThrows = classData.saving_throws || ['str', 'con'];
    const savingThrowMods = {};
    
    for (let ability of mechanics.enums.saving_throws) {
        const isProficient = savingThrows.includes(ability);
        savingThrowMods[ability] = mods[ability] + (isProficient ? proficiencyBonus : 0);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
    let spellAttackBonus = 0;
    let spellSaveDC = 0;
    let spellSlots = {};
    
    if (castingCategory !== 'none' && spellcastingAbility) {
        spellAttackBonus = proficiencyBonus + mods[spellcastingAbility];
        spellSaveDC = 8 + proficiencyBonus + mods[spellcastingAbility];
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        if (mechanics.rules && mechanics.rules.slot_tables) {
            const slotTable = mechanics.rules.slot_tables[castingCategory];
            if (slotTable && slotTable[level]) {
                spellSlots = slotTable[level];
            }
        }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let extraAttacks = 0;
    if (classData.martial && classData.martial.extra_attacks) {
        extraAttacks = classData.martial.extra_attacks[level] || 0;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let result = `\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`;
    result += `–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞: ${ac}\n`;
    result += `–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ${initiativeMod >= 0 ? '+' : ''}${initiativeMod}\n`;
    result += `–°–∫–æ—Ä–æ—Å—Ç—å: ${speed} —Ñ—É—Ç–æ–≤\n`;
    result += `–£—Ä–æ–≤–µ–Ω—å: ${level}\n`;
    result += `–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: +${proficiencyBonus}\n`;
    
    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    result += `\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`;
    result += `–°–ò–õ ${abilities.str} (${mods.str >= 0 ? '+' : ''}${mods.str})\n`;
    result += `–õ–û–í ${abilities.dex} (${mods.dex >= 0 ? '+' : ''}${mods.dex})\n`;
    result += `–¢–ï–õ ${abilities.con} (${mods.con >= 0 ? '+' : ''}${mods.con})\n`;
    result += `–ò–ù–¢ ${abilities.int} (${mods.int >= 0 ? '+' : ''}${mods.int})\n`;
    result += `–ú–î–† ${abilities.wis} (${mods.wis >= 0 ? '+' : ''}${mods.wis})\n`;
    result += `–•–ê–† ${abilities.cha} (${mods.cha >= 0 ? '+' : ''}${mods.cha})\n`;
    
    // –°–ø–∞—Å–±—Ä–æ—Å–∫–∏
    result += `\n–°–ø–∞—Å–±—Ä–æ—Å–∫–∏:\n`;
    for (let ability of mechanics.enums.saving_throws) {
        const mod = savingThrowMods[ability];
        const proficient = savingThrows.includes(ability) ? ' (–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ)' : '';
        result += `${ability.toUpperCase()} ${mod >= 0 ? '+' : ''}${mod}${proficient}\n`;
    }
    
    // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    if (castingCategory !== 'none') {
        result += `\n–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:\n`;
        result += `–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏: +${spellAttackBonus}\n`;
        result += `–°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤: ${spellSaveDC}\n`;
        if (Object.keys(spellSlots).length > 0) {
            result += `–°–ª–æ—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π: `;
            const slotList = [];
            for (let spellLevel in spellSlots) {
                slotList.push(`${spellLevel} —É—Ä–æ–≤–µ–Ω—å: ${spellSlots[spellLevel]}`);
            }
            result += slotList.join(', ') + '\n';
        }
    }
    
    // –ë–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (extraAttacks > 0) {
        result += `\n–ë–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`;
        result += `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏: ${extraAttacks}\n`;
    }
    
    // –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
    if (classData.martial && classData.martial.special_features) {
        result += `\n–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n`;
        for (let feature of classData.martial.special_features) {
            result += `- ${feature}\n`;
        }
    }
    
    console.log('Technical params result:', result);
    return result;
}

function fetchNpcFromAI(race, npcClass, background, level, advancedSettings = {}) {
    console.log('fetchNpcFromAI called with:', { race, npcClass, background, level, advancedSettings });
    showModal('üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC...<br><small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥</small>');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let progressDots = 0;
    const progressInterval = setInterval(() => {
        progressDots = (progressDots + 1) % 4;
        const dots = '.'.repeat(progressDots);
        document.getElementById('modal-content').innerHTML = `üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC${dots}<br><small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥</small>`;
    }, 500);
    
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ JSON
    const json = window.uniqueTraders;
    console.log('Using embedded traders data:', json);
    console.log('JSON loaded successfully:', json);
          // 1. –ò–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let name = '';
        // –ò–º–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        name = '–ò–º—è –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ AI';
        // 2. –ß–µ—Ä—Ç—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        let trait = '';
        if (json.data && json.data.traits && Array.isArray(json.data.traits) && json.data.traits.length > 0) {
          trait = json.data.traits[Math.floor(Math.random() * json.data.traits.length)];
        }
        let motivation = '';
        if (json.data && json.data.motivation && Array.isArray(json.data.motivation) && json.data.motivation.length > 0) {
          motivation = json.data.motivation[Math.floor(Math.random() * json.data.motivation.length)];
        }
        let occ = '';
        if (json.data && json.data.occupations && Array.isArray(json.data.occupations) && json.data.occupations.length > 0) {
          occ = json.data.occupations[Math.floor(Math.random() * json.data.occupations.length)].name_ru;
        }
        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let contextBlock = '';
        if (name) contextBlock += `\n–ò–º—è: ${name} (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∏–º—è –¥–ª—è NPC)`;
        if (trait) contextBlock += `\n–ß–µ—Ä—Ç–∞: ${trait}`;
        if (motivation) contextBlock += `\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${motivation}`;
        if (occ) contextBlock += `\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${occ}`;
        contextBlock += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏–¥—É–º–∞–π —Ü–µ–ª—å–Ω–æ–≥–æ NPC.';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        console.log('About to generate technical params for:', { race, npcClass, level });
        const technicalParams = generateTechnicalParams(race, npcClass, level);
        console.log('Technical params generated:', technicalParams);
        
        const systemInstruction = '–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ NPC –¥–ª—è D&D. –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è\n[—Ç–æ–ª—å–∫–æ –∏–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–¢–æ—Ä–∏–Ω –ö–∞–º–µ–Ω—â–∏–∫"]\n\n–û–ø–∏—Å–∞–Ω–∏–µ\n[3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø—Ä–æ—à–ª–æ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Ü–µ–ª—è—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω–∏]\n\n–í–Ω–µ—à–Ω–æ—Å—Ç—å\n[2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤–Ω–µ—à–Ω–µ–º –≤–∏–¥–µ, –æ–¥–µ–∂–¥–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö]\n\n–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n[1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–≤–µ–¥–µ–Ω–∏–∏, –ø—Ä–∏–≤—ã—á–∫–∞—Ö]\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n[–ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´, –ù–ï –ò–ó–ú–ï–ù–Ø–ô –ò–•]\n\n–í–ê–ñ–ù–û: –ò–º—è —É–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û –≤ –±–ª–æ–∫–µ "–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è". –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –≤ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–∞—Ö. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏ —á–µ—Ä—Ç–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç
        let advancedPrompt = `–°–æ–∑–¥–∞–π NPC –¥–ª—è DnD. –†–∞—Å–∞: ${race}. –ö–ª–∞—Å—Å: ${npcClass}. –£—Ä–æ–≤–µ–Ω—å: ${level}. –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`;
        
        if (advancedSettings.gender) {
            advancedPrompt += ` –ü–æ–ª: ${advancedSettings.gender}.`;
        }
        if (advancedSettings.alignment) {
            advancedPrompt += ` –ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ: ${advancedSettings.alignment}.`;
        }
        
        console.log('Advanced settings:', advancedSettings);
        console.log('Advanced prompt:', advancedPrompt);
        console.log('Context block:', contextBlock);
        console.log('Technical params length:', technicalParams.length);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC
        const formData = new FormData();
        formData.append('race', race);
        formData.append('class', npcClass);
        formData.append('level', level);
        formData.append('alignment', advancedSettings.alignment || 'neutral');
        formData.append('background', background || 'soldier');
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('FormData debug:', {
            race: race,
            class: npcClass,
            level: level,
            alignment: advancedSettings.alignment || 'neutral',
            background: background || 'soldier',
            backgroundParam: background
        });
        
        fetch('api/generate-characters.php', {
            method: 'POST',
            body: formData
        })
        .then(r => r.json())
        .then(data => {
            clearInterval(progressInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
            console.log('API Response:', data); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            console.log('NPC data:', data.npc); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NPC
            console.log('Background value:', data.npc?.background); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ background
            
            if (data && data.success && data.npc) {
                const npc = data.npc;
                let html = `
                    <div class="npc-header">
                        <h3>${npc.name}</h3>
                        <div class="npc-subtitle">${npc.race} - ${npc.class} (—É—Ä–æ–≤–µ–Ω—å ${npc.level})</div>
                    </div>
                    
                    <div class="npc-section">
                        <h4>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                        <div class="info-grid">
                            <div class="info-item">
                                <strong>–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</strong> ${npc.alignment}
                            </div>
                            <div class="info-item">
                                <strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${npc.background}
                            </div>
                        </div>
                    </div>
                    
                    ${npc.description ? `
                        <div class="npc-section">
                            <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                            <p>${npc.description}</p>
                        </div>
                    ` : ''}
                    
                    ${npc.technical_params && npc.technical_params.length > 0 ? `
                        <div class="npc-section">
                            <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                            <div class="technical-params">
                                ${npc.technical_params.map(param => `<div class="param-item">${param}</div>`).join('')}
                            </div>
                        </div>
                    ` : ''}
                `;
                
                document.getElementById('modal-content').innerHTML = html;
                document.getElementById('modal-save').style.display = '';
                document.getElementById('modal-save').onclick = function() { saveNoteAndUpdate(document.getElementById('modal-content').innerHTML); closeModal(); };
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                let oldRegenerateBtn = document.querySelector('.modal-regenerate');
                if (oldRegenerateBtn) {
                    oldRegenerateBtn.remove();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                let regenerateBtn = document.createElement('button');
                regenerateBtn.className = 'modal-regenerate';
                regenerateBtn.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é';
                regenerateBtn.onclick = regenerateNpc;
                document.getElementById('modal').appendChild(regenerateBtn);
            } else {
                let errorMsg = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                if (data && data.error) {
                    errorMsg = data.error;
                }
                document.getElementById('modal-content').innerHTML = '<div class="result-segment error">‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + errorMsg + '<br><small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</small></div>';
                document.getElementById('modal-save').style.display = 'none';
            }
        })
        .catch((e) => {
            clearInterval(progressInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            console.error('AI Response Error:', e);
            document.getElementById('modal-content').innerHTML = '<div class="result-segment error">‚ùå –û—à–∏–±–∫–∞ AI<br><small>–û—à–∏–±–∫–∞: ' + e.message + '</small><br><small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑</small></div>';
            document.getElementById('modal-save').style.display = 'none';
        });
}



function generateNpcWithLevel() {
    npcLevel = document.getElementById('npc-level').value;
    
    console.log('generateNpcWithLevel called with level:', npcLevel);
    console.log('Current npcRace:', npcRace);
    console.log('Current npcClass:', npcClass);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    let advancedSettings = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª
    const genderRadio = document.querySelector('input[name="gender"]:checked');
    console.log('Gender radio found:', genderRadio);
    if (genderRadio) {
        console.log('Gender radio value:', genderRadio.value);
        if (genderRadio.value !== '—Ä–∞–Ω–¥–æ–º') {
            advancedSettings.gender = genderRadio.value;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ
    const alignmentRadio = document.querySelector('input[name="alignment"]:checked');
    console.log('Alignment radio found:', alignmentRadio);
    if (alignmentRadio) {
        console.log('Alignment radio value:', alignmentRadio.value);
        if (alignmentRadio.value !== '—Ä–∞–Ω–¥–æ–º') {
            advancedSettings.alignment = alignmentRadio.value;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    const backgroundSelect = document.getElementById('npc-background');
    console.log('Background select found:', backgroundSelect);
    let background = 'soldier'; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (backgroundSelect) {
        background = backgroundSelect.value;
        console.log('Background value:', background);
    } else {
        console.log('Background select NOT found!');
    }
    
    console.log('Final background value:', background);
    
    console.log('Collected advanced settings:', advancedSettings);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    lastGeneratedParams = {
        race: npcRace,
        class: npcClass,
        level: npcLevel,
        background: background,
        advancedSettings: advancedSettings
    };
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    fetchNpcFromAI(npcRace, npcClass, background, npcLevel, advancedSettings);
}

function regenerateNpc() {
    if (lastGeneratedParams.race && lastGeneratedParams.class && lastGeneratedParams.level) {
        const advancedSettings = lastGeneratedParams.advancedSettings || {};
        const background = lastGeneratedParams.background || 'soldier';
        fetchNpcFromAI(lastGeneratedParams.race, lastGeneratedParams.class, background, lastGeneratedParams.level, advancedSettings);
    } else {
        alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
}

// --- –ó–µ–ª—å—è ---
function openPotionModalSimple() {
    showModal(`
        <div class="potion-generator">
            <div class="generator-header">
                <h2>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–µ–ª–∏–π</h2>
                <p class="generator-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–µ–ª—å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏</p>
            </div>
            
            <form id="potionForm" class="potion-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="potion-count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–ª–∏–π</label>
                        <input type="number" id="potion-count" name="count" min="1" max="10" value="1" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="potion-rarity">–†–µ–¥–∫–æ—Å—Ç—å</label>
                        <select id="potion-rarity" name="rarity">
                            <option value="">–õ—é–±–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å</option>
                            <option value="uncommon">–ù–µ–æ–±—ã—á–Ω–æ–µ</option>
                            <option value="rare">–†–µ–¥–∫–æ–µ</option>
                            <option value="very_rare">–û—á–µ–Ω—å —Ä–µ–¥–∫–æ–µ</option>
                            <option value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ</option>
                        </select>
                    </div>
                </div>
                
                <button type="submit" class="generate-btn">
                    <span class="btn-icon"><span class="svg-icon icon-potion" data-icon="potion"></span></span>
                    <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å—è</span>
                </button>
            </form>
            
            <div id="potionResult" class="result-container"></div>
        </div>
    `);
    
    document.getElementById('modal-save').style.display = 'none';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('potionForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const submitBtn = this.querySelector('button[type="submit"]');
        const resultDiv = document.getElementById('potionResult');
        
        submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-loading" data-icon="loading"></span></span><span class="btn-text">–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–°–æ–∑–¥–∞–Ω–∏–µ –∑–µ–ª–∏–π...</div>';
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        const requestData = {
            rarity: formData.get('rarity') || null,
            count: parseInt(formData.get('count'))
        };
        
        fetch('api/generate-potions.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Potion API Response:', data);
            if (data.success && data.potions) {
                let resultHtml = formatPotionsFromApi(data.potions);
                resultDiv.innerHTML = resultHtml;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                setTimeout(() => {
                    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 100);
            } else {
                const errorMessage = data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–µ–ª–∏–π';
                resultDiv.innerHTML = '<div class="error">' + errorMessage + '</div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
            
            if (error.message.includes('HTTP')) {
                errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`;
            } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
                errorMessage = 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            } else if (error.message.includes('Failed to fetch')) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.';
            }
            
            resultDiv.innerHTML = '<div class="error">' + errorMessage + '</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-potion" data-icon="potion"></span></span><span class="btn-text">–°–æ–∑–¥–∞—Ç—å –∑–µ–ª—å—è</span>';
            submitBtn.disabled = false;
        });
    });
}

// --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π ---
function openSpellModal() {
    showModal(`
        <div class="spell-generator">
            <div class="generator-header">
                <h2>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π</h2>
                <p class="generator-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è D&D 5e –ø–æ —É—Ä–æ–≤–Ω—é –∏ –∫–ª–∞—Å—Å—É</p>
            </div>
            
            <form id="spellForm" class="spell-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="spell-level">–£—Ä–æ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</label>
                        <select id="spell-level" name="level" required>
                            <option value="0">–ó–∞–≥–æ–≤–æ—Ä—ã (0 —É—Ä–æ–≤–µ–Ω—å)</option>
                            <option value="1">1 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="2">2 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="3">3 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="4">4 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="5">5 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="6">6 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="7">7 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="8">8 —É—Ä–æ–≤–µ–Ω—å</option>
                            <option value="9">9 —É—Ä–æ–≤–µ–Ω—å</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="spell-class">–ö–ª–∞—Å—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <select id="spell-class" name="class">
                            <option value="">–õ—é–±–æ–π –∫–ª–∞—Å—Å</option>
                            <option value="bard">–ë–∞—Ä–¥</option>
                            <option value="cleric">–ñ—Ä–µ—Ü</option>
                            <option value="druid">–î—Ä—É–∏–¥</option>
                            <option value="paladin">–ü–∞–ª–∞–¥–∏–Ω</option>
                            <option value="ranger">–°–ª–µ–¥–æ–ø—ã—Ç</option>
                            <option value="sorcerer">–ß–∞—Ä–æ–¥–µ–π</option>
                            <option value="warlock">–ö–æ–ª–¥—É–Ω</option>
                            <option value="wizard">–í–æ–ª—à–µ–±–Ω–∏–∫</option>
                            <option value="artificer">–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="spell-count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π</label>
                        <input type="number" id="spell-count" name="count" min="1" max="5" value="1" required>
                    </div>
                </div>
                
                <button type="submit" class="generate-btn">
                    <span class="btn-icon"><span class="svg-icon icon-spell" data-icon="spell"></span></span>
                    <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</span>
                </button>
            </form>
            
            <div id="spellResult" class="result-container"></div>
        </div>
    `);
    
    document.getElementById('modal-save').style.display = 'none';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('spellForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const submitBtn = this.querySelector('button[type="submit"]');
        const resultDiv = document.getElementById('spellResult');
        
        submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-loading" data-icon="loading"></span></span><span class="btn-text">–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π...</div>';
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        const requestData = {
            level: parseInt(formData.get('level')),
            class: formData.get('class') || null,
            count: parseInt(formData.get('count'))
        };
        
        fetch('api/generate-spells.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Spell API Response:', data);
            if (data.success && data.spells) {
                let resultHtml = formatSpellsFromApi(data.spells);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–∏
                data.spells.forEach(spell => {
                    saveSpellAsNote(spell);
                });
                
                resultDiv.innerHTML = resultHtml;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                setTimeout(() => {
                    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 100);
            } else {
                const errorMessage = data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π';
                resultDiv.innerHTML = '<div class="error">' + errorMessage + '</div>';
            }
        })
        .catch(error => {
            console.error('Spell generation error:', error);
            const errorMessage = error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π';
            resultDiv.innerHTML = '<div class="error">' + errorMessage + '</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="btn-icon"><span class="svg-icon icon-spell" data-icon="spell"></span></span><span class="btn-text">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</span>';
            submitBtn.disabled = false;
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏–∑ API
function formatSpellsFromApi(spells) {
    let html = '<div class="spells-grid">';
    
    spells.forEach((spell, index) => {
        const levelText = spell.level === 0 ? '–ó–∞–≥–æ–≤–æ—Ä' : `${spell.level} —É—Ä–æ–≤–µ–Ω—å`;
        const schoolText = spell.school_ru || spell.school || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞';
        const classesText = spell.classes ? spell.classes.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã';
        
        html += `
            <div class="spell-card">
                <div class="spell-header">
                    <h3 class="spell-name">${spell.name}</h3>
                    <div class="spell-level">${levelText}</div>
                </div>
                <div class="spell-details">
                    <div class="spell-info">
                        <span class="spell-school">${schoolText}</span>
                        <span class="spell-classes">${classesText}</span>
                    </div>
                    <div class="spell-description">
                        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${spell.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</p>
                        ${spell.casting_time ? `<p><strong>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è:</strong> ${spell.casting_time}</p>` : ''}
                        ${spell.range ? `<p><strong>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</strong> ${spell.range}</p>` : ''}
                        ${spell.duration ? `<p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${spell.duration.text || spell.duration}</p>` : ''}
                        ${spell.components ? `<p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong> ${formatSpellComponents(spell.components)}</p>` : ''}
                        ${spell.higher_level ? `<p><strong>–ù–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö:</strong> ${spell.higher_level}</p>` : ''}
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    return html;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
function formatSpellComponents(components) {
    let parts = [];
    if (components.verbal) parts.push('–í');
    if (components.somatic) parts.push('–°');
    if (components.material) parts.push('–ú');
    return parts.join(', ') + (components.material_desc ? ` (${components.material_desc})` : '');
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–∏
function saveSpellAsNote(spell) {
    const levelText = spell.level === 0 ? '–ó–∞–≥–æ–≤–æ—Ä' : `${spell.level} —É—Ä–æ–≤–µ–Ω—å`;
    const schoolText = spell.school_ru || spell.school || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞';
    const classesText = spell.classes ? spell.classes.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã';
    
    const noteContent = `
        <div class="spell-note">
            <div class="spell-note-header">
                <h3>${spell.name}</h3>
                <span class="spell-level-badge">${levelText}</span>
            </div>
            <div class="spell-note-details">
                <p><strong>–®–∫–æ–ª–∞:</strong> ${schoolText}</p>
                <p><strong>–ö–ª–∞—Å—Å—ã:</strong> ${classesText}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${spell.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</p>
                ${spell.casting_time ? `<p><strong>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è:</strong> ${spell.casting_time}</p>` : ''}
                ${spell.range ? `<p><strong>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</strong> ${spell.range}</p>` : ''}
                ${spell.duration ? `<p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${spell.duration.text || spell.duration}</p>` : ''}
                ${spell.components ? `<p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong> ${formatSpellComponents(spell.components)}</p>` : ''}
                ${spell.higher_level ? `<p><strong>–ù–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö:</strong> ${spell.higher_level}</p>` : ''}
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–º–µ—Ç–∫–∏
    if (typeof addNote === 'function') {
        addNote(noteContent);
    } else {
        // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
        if (typeof $_SESSION !== 'undefined' && $_SESSION.notes) {
            $_SESSION.notes.push(noteContent);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–µ–ª–∏–π –∏–∑ API
function formatPotionsFromApi(potions) {
    let html = '<div class="potions-grid">';
    
    potions.forEach((potion, index) => {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–µ–ª—å—è
        const displayName = potion.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–µ–ª—å–µ';
        const displayRarity = potion.rarity_localized || potion.rarity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å';
        const displayType = potion.type_localized || potion.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
        const displayEffect = potion.effect || '–≠—Ñ—Ñ–µ–∫—Ç –Ω–µ –æ–ø–∏—Å–∞–Ω';
        const displayDuration = potion.duration || '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        let rarityColor = '#666666';
        switch (potion.rarity) {
            case 'common': rarityColor = '#4CAF50'; break;
            case 'uncommon': rarityColor = '#2196F3'; break;
            case 'rare': rarityColor = '#9C27B0'; break;
            case 'very_rare': rarityColor = '#FF9800'; break;
            case 'legendary': rarityColor = '#F44336'; break;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
        let typeIcon = 'üß™';
        switch (potion.type) {
            case 'potion': typeIcon = 'üß™'; break;
            case 'oil': typeIcon = 'üß™'; break; // –ú–∞—Å–ª–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –∑–µ–ª—å—è
            case 'ointment': typeIcon = 'üß¥'; break;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        let costText = '';
        if (potion.cost) {
            const costValue = potion.cost.value;
            const costApprox = potion.cost.approx ? '~' : '';
            costText = `${costApprox}${costValue} –∑–º`;
        }
        
        html += `
            <div class="potion-card" style="border-left: 4px solid ${rarityColor}">
                <div class="potion-header">
                    <span class="potion-icon">${typeIcon}</span>
                    <h3 class="potion-name">${displayName}</h3>
                    <span class="potion-rarity" style="color: ${rarityColor}">${displayRarity}</span>
                </div>
                <div class="potion-body">
                    <p class="potion-effect"><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> ${displayEffect}</p>
                    ${displayDuration !== '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π' ? `<p class="potion-duration"><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${displayDuration}</p>` : ''}
                    <div class="potion-details">
                        <span class="potion-type">${typeIcon} ${displayType}</span>
                        ${costText ? `<span class="potion-cost">üí∞ ${costText}</span>` : ''}
                    </div>
                    <div class="potion-actions">
                        <button class="btn btn-sm btn-primary potion-save-btn" onclick="savePotionAsNote('${potion.id}', '${potion.name.replace(/'/g, "\\'")}', '${potion.rarity}', '${potion.type}', '${potion.effect.replace(/'/g, "\\'")}', '${potion.duration || '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π'}', '${JSON.stringify(potion.cost || {}).replace(/"/g, '&quot;')}')">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏
                        </button>
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    return html;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–µ–ª—å—è –≤ –∑–∞–º–µ—Ç–∫–∏
function savePotionAsNote(id, name, rarity, type, effect, duration, costJson) {
    console.log('savePotionAsNote called with:', {id, name, rarity, type, effect, duration, costJson});
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    const saveBtn = event.target;
    const originalText = saveBtn.innerHTML;
    const originalDisabled = saveBtn.disabled;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    saveBtn.innerHTML = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    saveBtn.disabled = true;
    saveBtn.style.opacity = '0.7';
    
    const displayName = name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–µ–ª—å–µ';
    const displayRarity = rarity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å';
    const displayType = type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
    const displayEffect = effect || '–≠—Ñ—Ñ–µ–∫—Ç –Ω–µ –æ–ø–∏—Å–∞–Ω';
    const displayDuration = duration || '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let costText = '';
    if (costJson && costJson !== '{}') {
        try {
            const cost = JSON.parse(costJson.replace(/&quot;/g, '"'));
            if (cost.value) {
                const costValue = cost.value;
                const costApprox = cost.approx ? '~' : '';
                costText = `${costApprox}${costValue} –∑–º`;
            }
        } catch (e) {
            console.error('Error parsing cost:', e);
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
    let typeIcon = 'üß™';
    switch (type) {
        case 'potion': typeIcon = 'üß™'; break;
        case 'oil': typeIcon = 'üß™'; break; // –ú–∞—Å–ª–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –∑–µ–ª—å—è
        case 'ointment': typeIcon = 'üß¥'; break;
    }
    
    const potionNote = `
        <div class="potion-note-header" style="background: var(--bg-tertiary); padding: var(--space-3); border-radius: var(--radius-md); margin-bottom: var(--space-3); border-left: 4px solid var(--accent-primary);">
            <h3 style="margin: 0; color: var(--text-primary);">${typeIcon} ${displayName}</h3>
            <div style="display: flex; gap: var(--space-2); margin-top: var(--space-2); flex-wrap: wrap;">
                <span style="background: var(--accent-primary); color: white; padding: var(--space-1) var(--space-2); border-radius: var(--radius-sm); font-size: var(--text-sm);">${displayRarity}</span>
                <span style="background: var(--bg-quaternary); color: var(--text-primary); padding: var(--space-1) var(--space-2); border-radius: var(--radius-sm); font-size: var(--text-sm);">${displayType}</span>
                ${costText ? `<span style="background: var(--bg-quaternary); color: var(--text-primary); padding: var(--space-1) var(--space-2); border-radius: var(--radius-sm); font-size: var(--text-sm);">üí∞ ${costText}</span>` : ''}
            </div>
        </div>
        <div style="margin-bottom: var(--space-3);">
            <strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> ${displayEffect}
        </div>
        ${displayDuration !== '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π' ? `<div style="margin-bottom: var(--space-3);"><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${displayDuration}</div>` : ''}
    `;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ AJAX
    console.log('Sending potion note to server:', potionNote);
    console.log('Current URL:', window.location.href);
    console.log('Current pathname:', window.location.pathname);
    const saveUrl = 'api/generate-potions.php';
    console.log('Fetching from:', saveUrl);
    
    fetch(saveUrl, {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=save_note&content=' + encodeURIComponent(potionNote)
    })
    .then(response => {
        console.log('Server response status:', response.status);
        return response.text();
    })
    .then(result => {
        console.log('Server response:', result);
        if (result === 'OK') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            showNotification('–ó–µ–ª—å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–∏!', 'success');
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            updateNotesWithAnimation();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            saveBtn.innerHTML = '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
            saveBtn.style.opacity = '1';
            saveBtn.style.background = 'var(--success-color, #28a745)';
            
            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setTimeout(() => {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = originalDisabled;
                saveBtn.style.opacity = '';
                saveBtn.style.background = '';
            }, 2000);
        } else {
            console.error('Server returned error:', result);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–µ–ª—å—è: ' + result, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            saveBtn.innerHTML = originalText;
            saveBtn.disabled = originalDisabled;
            saveBtn.style.opacity = '';
        }
    })
    .catch(error => {
        console.error('Error saving potion:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–µ–ª—å—è: ' + error.message, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        saveBtn.innerHTML = originalText;
        saveBtn.disabled = originalDisabled;
        saveBtn.style.opacity = '';
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: var(--space-4);
        border-radius: var(--radius-md);
        color: white;
        font-weight: 600;
        z-index: 9999;
        max-width: 300px;
        box-shadow: var(--shadow-lg);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'success') {
        notification.style.background = 'var(--accent-success)';
    } else if (type === 'error') {
        notification.style.background = 'var(--accent-danger)';
    } else {
        notification.style.background = 'var(--accent-info)';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// --- –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ ---
let initiativeList = [];
let currentInitiativeIndex = 0;
let currentRound = 1;

function openInitiativeModal() {
    showModal('<div class="initiative-container">' +
            '<div class="initiative-header">' +
                '<h3><span class="svg-icon icon-initiative" data-icon="initiative"></span> –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</h3>' +
                '<div class="initiative-stats">' +
                    '<span class="stat-item">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <strong id="initiative-count">0</strong></span>' +
                    '<span class="stat-item">–†–∞—É–Ω–¥: <strong id="initiative-round">1</strong></span>' +
                '</div>' +
            '</div>' +
            '<div class="initiative-current-turn" id="initiative-current-turn"></div>' +
            '<div class="initiative-list" id="initiative-list"></div>' +
            '<div class="initiative-controls">' +
                '<div class="control-group">' +
                    '<button class="initiative-btn player-btn" onclick="addInitiativeEntry(\'player\')">&#128100; –ò–≥—Ä–æ–∫</button>' +
                    '<button class="initiative-btn enemy-btn" onclick="addInitiativeEntry(\'enemy\')">&#128127; –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫</button>' +
                    '<button class="initiative-btn other-btn" onclick="addInitiativeEntry(\'other\')">&#9889; –ï—â—ë</button>' +
                '</div>' +
                '<div class="control-group">' +
                    '<button class="initiative-btn round-btn" onclick="nextRound()">üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>' +
                    '<button class="initiative-btn clear-btn" onclick="clearInitiative()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>' +
                '</div>' +
            '</div>' +
        '</div>');
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveInitiativeNote(); closeModal(); };
        updateInitiativeDisplay();
}

function addInitiativeEntry(type) {
    let title = type === 'player' ? '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞' : 
                type === 'enemy' ? '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' : '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    let diceButton = type === 'enemy' || type === 'other' ? 
        '<button class="dice-btn" onclick="rollInitiativeDice()">üé≤ d20</button>' : '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∑–∞–º–µ—Ç–æ–∫
    let notesButton = '<button class="notes-btn" onclick="addFromNotes(\'' + type + '\')">üìù –ò–∑ –∑–∞–º–µ—Ç–æ–∫</button>';
    
    showModal('<div class="initiative-entry">' +
        '<div class="entry-title">' + title + '</div>' +
        '<input type="text" id="initiative-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)" maxlength="30" class="initiative-input">' +
        '<input type="number" id="initiative-value" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã" class="initiative-input">' +
        diceButton +
        notesButton +
        '<div class="entry-buttons">' +
            '<button class="save-btn" onclick="saveInitiativeEntry(\'' + type + '\')">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>' +
            '<button class="cancel-btn" onclick="openInitiativeModal()">–û—Ç–º–µ–Ω–∞</button>' +
        '</div>' +
    '</div>');
    document.getElementById('modal-save').style.display = 'none';
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
    setTimeout(() => document.getElementById('initiative-name').focus(), 100);
}

function rollInitiativeDice() {
    let result = Math.floor(Math.random() * 20) + 1;
    document.getElementById('initiative-value').value = result;
}

function saveInitiativeEntry(type) {
    let name = document.getElementById('initiative-name').value.trim();
    let value = parseInt(document.getElementById('initiative-value').value);
    
    if (!name || isNaN(value)) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (!/^[–∞-—è—ë0-9\s]+$/i.test(name)) {
        alert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã!');
        return;
    }
    
    let entry = {
        id: Date.now(),
        name: name,
        value: value,
        type: type
    };
    
    initiativeList.push(entry);
    sortInitiativeList();
    openInitiativeModal();
}

function sortInitiativeList() {
    initiativeList.sort((a, b) => {
        if (b.value !== a.value) {
            return b.value - a.value; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
        }
        return a.id - b.id; // –ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö - –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    });
}

function updateInitiativeDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞—É–Ω–¥
    document.getElementById('initiative-count').textContent = initiativeList.length;
    document.getElementById('initiative-round').textContent = currentRound;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if (initiativeList.length > 0) {
        let current = initiativeList[currentInitiativeIndex];
        let typeIcon = current.type === 'player' ? '&#128100;' :
current.type === 'enemy' ? '&#128127;' : '&#9889;';
        
        document.getElementById('initiative-current-turn').innerHTML = 
            '<div class="current-turn-display">' +
                '<div class="current-turn-icon">' + typeIcon + '</div>' +
                '<div class="current-turn-info">' +
                    '<div class="current-turn-name">' + current.name + '</div>' +
                    '<div class="current-turn-value">–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ' + current.value + '</div>' +
                '</div>' +
                '<div class="current-turn-actions">' +
                    '<button class="turn-btn prev-btn" onclick="prevInitiative()">‚óÄ</button>' +
                    '<button class="turn-btn next-btn" onclick="nextInitiative()">‚ñ∂</button>' +
                '</div>' +
            '</div>';
    } else {
        document.getElementById('initiative-current-turn').innerHTML = 
            '<div class="no-initiative">–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è</div>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    let listHtml = '';
    initiativeList.forEach((entry, index) => {
        let isActive = index === currentInitiativeIndex;
        let typeClass = entry.type === 'player' ? 'player-entry' : 
                       entry.type === 'enemy' ? 'enemy-entry' : 'other-entry';
        let activeClass = isActive ? ' active' : '';
        let typeIcon = entry.type === 'player' ? '&#128100;' :
entry.type === 'enemy' ? '&#128127;' : '&#9889;';
        
        listHtml += '<div class="initiative-item ' + typeClass + activeClass + '" onclick="setActiveInitiative(' + index + ')">' +
            '<div class="initiative-item-content">' +
                '<div class="initiative-icon">' + typeIcon + '</div>' +
                '<div class="initiative-info">' +
                    '<div class="initiative-name">' + entry.name + '</div>' +
                    '<div class="initiative-value">' + entry.value + '</div>' +
                '</div>' +
            '</div>' +
            '<div class="initiative-actions">' +
                '<button class="edit-btn" onclick="event.stopPropagation(); editInitiativeEntry(' + entry.id + ')">‚úèÔ∏è</button>' +
                '<button class="delete-btn" onclick="event.stopPropagation(); deleteInitiativeEntry(' + entry.id + ')">üóëÔ∏è</button>' +
            '</div>' +
        '</div>';
    });
    
    document.getElementById('initiative-list').innerHTML = listHtml;
}

function setActiveInitiative(index) {
    currentInitiativeIndex = index;
    updateInitiativeDisplay();
}

function prevInitiative() {
    if (initiativeList.length > 0) {
        currentInitiativeIndex = (currentInitiativeIndex - 1 + initiativeList.length) % initiativeList.length;
        updateInitiativeDisplay();
    }
}



function clearInitiative() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã?')) {
        initiativeList = [];
        currentInitiativeIndex = 0;
        currentRound = 1;
        updateInitiativeDisplay();
    }
}

function nextRound() {
    currentRound++;
    currentInitiativeIndex = 0;
    updateInitiativeDisplay();
}

function nextInitiative() {
    if (initiativeList.length > 0) {
        currentInitiativeIndex = (currentInitiativeIndex + 1) % initiativeList.length;
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥
        if (currentInitiativeIndex === 0) {
            currentRound++;
        }
        updateInitiativeDisplay();
    }
}

function prevInitiative() {
    if (initiativeList.length > 0) {
        currentInitiativeIndex = (currentInitiativeIndex - 1 + initiativeList.length) % initiativeList.length;
        // –ï—Å–ª–∏ –ø–æ—à–ª–∏ –Ω–∞–∑–∞–¥ –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞—É–Ω–¥
        if (currentInitiativeIndex === initiativeList.length - 1 && currentRound > 1) {
            currentRound--;
        }
        updateInitiativeDisplay();
    }
}

function editInitiativeEntry(id) {
    let entry = initiativeList.find(e => e.id === id);
    if (!entry) return;
    
    let title = entry.type === 'player' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞' : 
                entry.type === 'enemy' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    
    showModal('<div class="initiative-entry">' +
        '<div class="entry-title">' + title + '</div>' +
        '<input type="text" id="initiative-name" value="' + entry.name + '" maxlength="30" class="initiative-input">' +
        '<input type="number" id="initiative-value" value="' + entry.value + '" class="initiative-input">' +
        '<div class="entry-buttons">' +
            '<button class="save-btn" onclick="updateInitiativeEntry(' + entry.id + ')">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>' +
            '<button class="cancel-btn" onclick="openInitiativeModal()">–û—Ç–º–µ–Ω–∞</button>' +
        '</div>' +
    '</div>');
    document.getElementById('modal-save').style.display = 'none';
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
    setTimeout(() => document.getElementById('initiative-name').focus(), 100);
}

function updateInitiativeEntry(id) {
    let name = document.getElementById('initiative-name').value.trim();
    let value = parseInt(document.getElementById('initiative-value').value);
    
    if (!name || isNaN(value)) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    if (!/^[–∞-—è—ë0-9\s]+$/i.test(name)) {
        alert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã!');
        return;
    }
    
    let entry = initiativeList.find(e => e.id === id);
    if (entry) {
        entry.name = name;
        entry.value = value;
        sortInitiativeList();
        openInitiativeModal();
    }
}

function deleteInitiativeEntry(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?')) {
        initiativeList = initiativeList.filter(e => e.id !== id);
        if (currentInitiativeIndex >= initiativeList.length) {
            currentInitiativeIndex = Math.max(0, initiativeList.length - 1);
        }
        updateInitiativeDisplay();
    }
}

function saveInitiativeNote() {
    if (initiativeList.length === 0) {
        alert('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        return;
    }
    
    let noteContent = '<div class="initiative-note">' +
        '<div class="initiative-note-title">–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</div>';
    
    initiativeList.forEach((entry, index) => {
        let typeClass = entry.type === 'player' ? 'player-entry' : 
                       entry.type === 'enemy' ? 'enemy-entry' : 'other-entry';
        let isActive = index === currentInitiativeIndex ? ' active' : '';
        
        noteContent += '<div class="initiative-item ' + typeClass + isActive + '">' +
            '<div class="initiative-name">' + entry.name + '</div>' +
            '<div class="initiative-value">' + entry.value + '</div>' +
        '</div>';
    });
    
    noteContent += '</div>';
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent)
    })
    .then(r => r.text())
    .then(() => {
        alert('–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∑–∞–º–µ—Ç–∫–∏!');
        closeModal();
    });
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ NPC –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º ---
function formatNpcBlocks(txt, forcedName = '') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Ä–∞–±–æ—á–µ–π API —Å–∏—Å—Ç–µ–º—ã
    if (typeof txt === 'object' && txt.name && txt.race && txt.class) {
        return formatNpcFromWorkingApi(txt);
    }
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    txt = txt.replace(/[\#\*`>\[\]]+/g, '');
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    const blockTitles = [
        '–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í–Ω–µ—à–Ω–æ—Å—Ç—å', '–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
    ];
    
    let blocks = [];
    let regex = /(–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è|–û–ø–∏—Å–∞–Ω–∏–µ|–í–Ω–µ—à–Ω–æ—Å—Ç—å|–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)\s*[:\- ]/gi;
    let matches = [...txt.matchAll(regex)];
    
    if (matches.length > 0) {
        for (let i = 0; i < matches.length; i++) {
            let start = matches[i].index + matches[i][0].length;
            let end = (i + 1 < matches.length) ? matches[i + 1].index : txt.length;
            let title = matches[i][1];
            let content = txt.slice(start, end).replace(/^\s+|\s+$/g, '');
            if (content && content.length > 5) {
                blocks.push({ title, content });
            }
        }
    }
    let name = '', desc = '', appear = '', trait = '', techBlock = '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤
    for (let block of blocks) {
        if (block.title === '–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è') name = block.content;
        if (block.title === '–û–ø–∏—Å–∞–Ω–∏–µ') desc = block.content;
        if (block.title === '–í–Ω–µ—à–Ω–æ—Å—Ç—å') appear = block.content;
        if (block.title === '–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞') trait = block.content;
        if (block.title === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã') techBlock = block.content;
    }
    
    // –ï—Å–ª–∏ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (!name || !desc || !appear || !trait) {
        let lines = txt.split(/\n/).map(s => s.trim()).filter(Boolean);
        
            // –ò—â–µ–º –∏–º—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if (!name && lines.length > 0) {
        let firstLine = lines[0];
        if (firstLine.length < 50 && !firstLine.includes(':')) {
            name = firstLine;
        }
    }
    
    // –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (—á–∞—Å—Ç–æ AI –ø–æ–º–µ—â–∞–µ—Ç –∏–º—è —Ç—É–¥–∞)
    if (!name && desc) {
        let nameMatch = desc.match(/^([–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)*)(?:\s*[,\-]\s*[–∞-—è—ë\s]+)?/);
        if (nameMatch && nameMatch[1]) {
            name = nameMatch[1];
            // –£–±–∏—Ä–∞–µ–º –∏–º—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            desc = desc.replace(nameMatch[0], '').trim();
            desc = desc.replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
    }
        
        // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏)
        if (!desc && lines.length > 1) {
            for (let i = 1; i < Math.min(5, lines.length); i++) {
                let line = lines[i];
                if (line.length > 20 && line.length < 200 && 
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    desc = line;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å (–æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞)
        if (!appear) {
            for (let line of lines) {
                if (line.length > 15 && line.length < 150 &&
                    /–≤—ã—Å–æ–∫–∏–π|–Ω–∏–∑–∫–∏–π|—Å—Ç—Ä–æ–π–Ω—ã–π|–ø–æ–ª–Ω—ã–π|–≤–æ–ª–æ—Å—ã|–≥–ª–∞–∑–∞|–ª–∏—Ü–æ|–æ–¥–µ–∂–¥–∞|–¥–ª–∏–Ω–Ω—ã–µ|–∫–æ—Ä–æ—Ç–∫–∏–µ|—Å–≤–µ—Ç–ª—ã–µ|—Ç–µ–º–Ω—ã–µ|–∫—Ä–µ–ø–∫–∏–π|–º—É–∂—á–∏–Ω–∞|–ø–ª–µ—á–∏|—Ä—É–∫–∏|—à—Ä–∞–º—ã|—Ñ–∞—Ä—Ç—É–∫|—Ö–≤–æ—Å—Ç|—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–µ|–∑–∞–ø–ª–µ—Ç—ë–Ω–Ω—ã–µ|–∫–æ—Å—ã|—è—Ä–∫–æ-–≥–æ–ª—É–±—ã–µ|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—Å—Ç—Ä–æ–π–Ω–∞—è|–∂–µ–Ω—â–∏–Ω–∞|—Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏|—Ç—ë–º–Ω—ã–º–∏|–ø—É—á–æ–∫|—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º|–ø–ª–∞—Ç—å–µ|—Ñ–æ—Ä–º–∞—Ä–∏—è|–≥–ª–∞–∑–∞|—Å–ª–µ–¥—è—Ç|–¥–≤–∏–∂–µ–Ω–∏—è|—Ç–æ—á–Ω—ã|—ç–∫–æ–Ω–æ–º–Ω—ã|–º—É—Å–∫—É–ª–∏—Å—Ç—ã–º|—Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ–º|–ø–æ–∫—Ä—ã—Ç—ã–º|—Å—Ç–∞—Ä—ã–º–∏|—à—Ä–∞–º–∞–º–∏|–¥–æ—Å–ø–µ—Ö–æ–≤|–±—Ä–æ–Ω–∏|–∑–µ–ª—ë–Ω—ã–µ|–º–æ—Ä—Å–∫–æ–π|–≤–æ–ª–Ω—ã|—Ö–æ–ª–æ–¥–Ω—ã–º–∏|–æ—Å—Ç—Ä—ã–º–∏|—á–µ—Ä—Ç–∞–º–∏|—É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–º–∏|—ç–ª—å—Ñ–∏–π—Å–∫–æ–π|–∫—Ä–æ–≤–∏|–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π|—Å–∏–ª–æ–π/i.test(line.toLowerCase()) &&
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    appear = line;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        if (!trait) {
            for (let line of lines) {
                if (line.length > 10 && line.length < 100 &&
                    /—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|—Ö–∏—Ç—Ä—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π|–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π|—Ü–∏–Ω–∏—á–Ω—ã–π|–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π|–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–Ω–∞–∏–≤–Ω—ã–π|–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π|–º—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π|—Å–ø–æ–∫–æ–π–Ω—ã–π|–≤—Å–ø—ã–ª—å—á–∏–≤—ã–π|–¥–æ–±—Ä—ã–π|–∑–ª–æ–π|–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/i.test(line.toLowerCase()) &&
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    trait = line;
                    break;
                }
            }
        }
    }
    
    // –ï—Å–ª–∏ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è
    if (!name && forcedName) name = forcedName;
    
    // –û—á–∏—â–∞–µ–º –±–ª–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (name) name = name.replace(/[\[\]()]/g, '').trim();
    if (desc) desc = desc.replace(/[\[\]()]/g, '').trim();
    if (appear) appear = appear.replace(/[\[\]()]/g, '').trim();
    if (trait) trait = trait.replace(/[\[\]()]/g, '').trim();
    if (techBlock) techBlock = techBlock.replace(/[\[\]()]/g, '').trim();
    
    // –£–±–∏—Ä–∞–µ–º –∏–º—è –∏–∑ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
    if (name) {
        let cleanName = name.split(/\s+/)[0].replace(/[^\w–∞-—è—ë]/gi, '').trim();
        const nameRegex = new RegExp(cleanName + '\\s*', 'gi');
        
        if (trait && trait.includes(cleanName)) {
            trait = trait.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
        if (desc && desc.includes(cleanName)) {
            desc = desc.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
        if (appear && appear.includes(cleanName)) {
            appear = appear.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–º—è
    if (trait && trait.includes('–ò–º—è:')) {
        trait = trait.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    if (desc && desc.includes('–ò–º—è:')) {
        desc = desc.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    if (appear && appear.includes('–ò–º—è:')) {
        appear = appear.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    
    // –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (desc && /—á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–≥—Ä—É–±–æ–≤–∞—Ç—ã–º|—é–º–æ—Ä|—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|–¥–∏–∫–∞—è|–Ω–µ–æ–±—É–∑–¥–∞–Ω–Ω–∞—è|–Ω–∞—Ç—É—Ä–∞|–±—Ä–∞–ª–∞ –≤–µ—Ä—Ö|–¥—É—Ö–æ–≤–Ω–æ–µ|–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ|–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏|–ø–æ–∫–∏–Ω—É–ª–∞|—Ö—Ä–∞–º|–Ω–∞–π—Ç–∏ –ø—É—Ç—å|—Å–æ—á–µ—Ç–∞—è|—è—Ä–æ—Å—Ç—å|–≤–∞—Ä–≤–∞—Ä–∞|–≥–ª—É–±–æ–∫—É—é —Å–≤—è–∑—å|–ø—Ä–∏—Ä–æ–¥–æ–π|–¥–∏–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è|–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞|–∑–∞—â–∏—Ç—É|—Å–≤—è—â–µ–Ω–Ω—ã—Ö|–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ|–±–∞–ª–∞–Ω—Å–∞|–ø–ª–µ–º–µ–Ω–µ–º|–ª–µ—Å–æ–º/i.test(desc.toLowerCase())) {
        if (!trait || trait === '-') {
            trait = desc;
            desc = '';
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            trait = trait + '. ' + desc;
            desc = '';
        }
    }
    if (!name && forcedName) name = forcedName;
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let summaryLines = [];
    let techParams = { weapon: '', damage: '', hp: '' };
    
    // –ò—â–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–ª–æ–∫–µ
    if (techBlock) {
        let lines = techBlock.split(/\n|\r/).map(s => s.trim()).filter(Boolean);
        for (let line of lines) {
            if (/–æ—Ä—É–∂–∏–µ\s*:/i.test(line)) techParams.weapon = line;
            if (/—É—Ä–æ–Ω\s*:/i.test(line)) techParams.damage = line;
            if (/—Ö–∏—Ç—ã\s*:/i.test(line)) techParams.hp = line;
        }
        
        // –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if (techBlock.length > 50) {
            techParams.fullBlock = techBlock;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ö–î, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥.)
        if (techBlock.includes('–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞:') || techBlock.includes('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:') || techBlock.includes('–°–ø–∞—Å–±—Ä–æ—Å–∫–∏:')) {
            techParams.fullBlock = techBlock;
        }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–ª–æ–∫–æ–≤
    if (!name) {
        return `<div class='npc-block-modern'><div class='npc-modern-header'>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</div><div class='npc-modern-block'>AI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –µ—â—ë —Ä–∞–∑.</div></div>`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞
    if (!techBlock || techBlock.length < 10) {
        let weapon, damage, hp;
        
        // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ—Ä—É–∂–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
        switch(npcClass.toLowerCase()) {
            case '–≤–æ–∏–Ω':
            case '–≤–∞—Ä–≤–∞—Ä':
            case '–ø–∞–ª–∞–¥–∏–Ω':
                weapon = '–ú–µ—á';
                damage = '1d8 —Ä—É–±—è—â–∏–π';
                hp = '15';
                break;
            case '–º–∞–≥':
            case '–≤–æ–ª—à–µ–±–Ω–∏–∫':
                weapon = '–ü–æ—Å–æ—Ö';
                damage = '1d6 –¥—Ä–æ–±—è—â–∏–π';
                hp = '8';
                break;
            case '–ª—É—á–Ω–∏–∫':
            case '—Å–ª–µ–¥–æ–ø—ã—Ç':
                weapon = '–õ—É–∫';
                damage = '1d8 –∫–æ–ª—é—â–∏–π';
                hp = '12';
                break;
            case '–∂—Ä–µ—Ü':
            case '–¥—Ä—É–∏–¥':
                weapon = '–ë—É–ª–∞–≤–∞';
                damage = '1d6 –¥—Ä–æ–±—è—â–∏–π';
                hp = '10';
                break;
            case '–ø–ª—É—Ç':
            case '–±–∞—Ä–¥':
                weapon = '–ö–∏–Ω–∂–∞–ª';
                damage = '1d4 –∫–æ–ª—é—â–∏–π';
                hp = '8';
                break;
            default:
                weapon = '–ö—É–ª–∞–∫–∏';
                damage = '1d4 –¥—Ä–æ–±—è—â–∏–π';
                hp = '10';
        }
        
        techBlock = `–û—Ä—É–∂–∏–µ: ${weapon}\n–£—Ä–æ–Ω: ${damage}\n–•–∏—Ç—ã: ${hp}`;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (techParams.weapon) summaryLines.push(techParams.weapon);
    if (techParams.damage) summaryLines.push(techParams.damage);
    if (techParams.hp) summaryLines.push(techParams.hp);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const foundParams = [techParams.weapon, techParams.damage, techParams.hp].filter(p => p).length;
    if (foundParams < 2) {
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        if (!techParams.weapon) techParams.weapon = '–û—Ä—É–∂–∏–µ: –ö—É–ª–∞–∫–∏';
        if (!techParams.damage) techParams.damage = '–£—Ä–æ–Ω: 1d4 –¥—Ä–æ–±—è—â–∏–π';
        if (!techParams.hp) techParams.hp = '–•–∏—Ç—ã: 10';
        summaryLines = [techParams.weapon, techParams.damage, techParams.hp];
    }
    
    function firstSentence(str) {
        if (!str || str === '-') return '';
        let m = str.match(/^[^.?!]+[.?!]?/);
        return m ? m[0].trim() : str.trim();
    }
    
    let out = '';
    out += `<div class='npc-block-modern'>`;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
    let cleanName = name;
    if (name.includes(',')) {
        cleanName = name.split(',')[0].trim();
    } else if (name.includes('-')) {
        cleanName = name.split('-')[0].trim();
    }
    cleanName = cleanName.split(/\s+/)[0].replace(/[^\w–∞-—è—ë]/gi, '').trim();
    out += `<div class='npc-modern-header'>${cleanName || 'NPC'}</div>`;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ)
    if (techParams.fullBlock) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –±–ª–æ–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        let techContent = techParams.fullBlock.replace(/\n/g, '<br>');
        out += `<div class='npc-col-block'>
            <div class='npc-collapsible-header collapsed' onclick='toggleTechnicalParams(this)'>
                <div><span style='font-size:1.2em;'>&#9876;&#65039;</span> <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b></div>
                <span class='toggle-icon'>‚ñº</span>
            </div>
            <div class='npc-collapsible-content collapsed'>
                <div class='npc-content' style='font-family: monospace; font-size: 0.9em; white-space: pre-line; margin-top: 8px;'>${techContent}</div>
            </div>
        </div>`;
    } else if (summaryLines.length) {
        let listHtml = '<ul class="npc-modern-list">' + summaryLines.map(s => `<li>${s}</li>`).join('') + '</ul>';
        out += `<div class='npc-col-block'>
            <div class='npc-collapsible-header collapsed' onclick='toggleTechnicalParams(this)'>
                <div><span style='font-size:1.2em;'>&#9876;&#65039;</span> <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b></div>
                <span class='toggle-icon'>‚ñº</span>
            </div>
            <div class='npc-collapsible-content collapsed'>
                <div style='margin-top: 8px;'>${listHtml}</div>
            </div>
        </div>`;
    }
    

    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (desc && desc.length > 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b><div class='npc-content'>${firstSentence(desc)}</div></div>`;
    } else if (!desc || desc.length <= 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b><div class='npc-content'>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div></div>`;
    }
    
    // –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    if (trait && trait.length > 5) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b><div class='npc-content'>${firstSentence(trait)}</div></div>`;
    } else if (!trait || trait.length <= 5) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b><div class='npc-content'>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</div></div>`;
    }
    
    // –í–Ω–µ—à–Ω–æ—Å—Ç—å
    if (appear && appear.length > 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>&#128100;</span> <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å</b><div class='npc-content'>${firstSentence(appear)}</div></div>`;
    } else if (!appear || appear.length <= 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>&#128100;</span> <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å</b><div class='npc-content'>–í–Ω–µ—à–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div></div>`;
    }
    out += `</div>`;
    setTimeout(() => {
      document.querySelectorAll('.npc-desc-toggle-btn').forEach(btn => {
        btn.onclick = function() {
          let block = this.nextElementSibling;
          block.style.display = block.style.display === 'block' ? 'none' : 'block';
        };
      });
    }, 100);
    return out;
}

// --- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π ---
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    out += '<div class="character-header">';
    out += '<h3>' + safeText(character.name || '–ë–µ–∑ –∏–º–µ–Ω–∏') + '</h3>';
    out += '<div class="character-subtitle">' + safeText(character.race || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞—Å–∞') + ' - ' + safeText(character.class || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å') + ' (—É—Ä–æ–≤–µ–Ω—å ' + (character.level || '?') + ')</div>';
    out += '</div>';
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    out += '<div class="character-section">';
    out += '<div class="section-title" onclick="toggleSection(this)">üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è <span class="toggle-icon">‚ñº</span></div>';
    out += '<div class="section-content">';
    out += '<div class="info-grid">';
    out += '<div class="info-item"><strong>–ü–æ–ª:</strong> ' + safeText(character.gender || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
    out += '<div class="info-item"><strong>–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</strong> ' + safeText(character.alignment || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') + '</div>';
    out += '<div class="info-item"><strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ' + safeText(character.occupation || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') + '</div>';
    out += '</div>';
    out += '</div></div>';
    
    // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    out += '<div class="character-section">';
    out += '<div class="section-title collapsed" onclick="toggleSection(this)">&#9876;&#65039; –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ <span class="toggle-icon">‚ñ∂</span></div>';
    out += '<div class="section-content collapsed">';
    out += '<div class="info-grid">';
    out += '<div class="info-item"><strong>–•–∏—Ç—ã:</strong> ' + (character.hit_points || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã') + '</div>';
    out += '<div class="info-item"><strong>–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞:</strong> ' + (character.armor_class || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
    out += '<div class="info-item"><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ' + (character.speed || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') + ' —Ñ—É—Ç–æ–≤</div>';
    out += '<div class="info-item"><strong>–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:</strong> ' + (character.initiative || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') + '</div>';
    out += '<div class="info-item"><strong>–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:</strong> +' + (character.proficiency_bonus || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
    out += '<div class="info-item"><strong>–û—Ä—É–∂–∏–µ:</strong> ' + (character.main_weapon || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') + '</div>';
    out += '<div class="info-item"><strong>–ü–æ–ø–∞–¥–∞–Ω–∏–µ:</strong> ' + (character.attack_bonus || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') + '</div>';
    out += '<div class="info-item"><strong>–£—Ä–æ–Ω:</strong> ' + (character.damage || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
    out += '</div>';
    out += '</div></div>';
    
    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (character.abilities && typeof character.abilities === 'object') {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        out += '<div class="abilities-grid">';
        out += '<div class="ability-item">–°–ò–õ: ' + (character.abilities.str || '?') + '</div>';
        out += '<div class="ability-item">–õ–û–í: ' + (character.abilities.dex || '?') + '</div>';
        out += '<div class="ability-item">–¢–ï–õ: ' + (character.abilities.con || '?') + '</div>';
        out += '<div class="ability-item">–ò–ù–¢: ' + (character.abilities.int || '?') + '</div>';
        out += '<div class="ability-item">–ú–î–†: ' + (character.abilities.wis || '?') + '</div>';
        out += '<div class="ability-item">–•–ê–†: ' + (character.abilities.cha || '?') + '</div>';
        out += '</div>';
        out += '</div></div>';
    }
    
    // –ë—Ä–æ—Å–∫–∏ —Å–ø–∞—Å–µ–Ω–∏—è
    if (character.saving_throws && Array.isArray(character.saving_throws) && character.saving_throws.length > 0) {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üõ°Ô∏è –ë—Ä–æ—Å–∫–∏ —Å–ø–∞—Å–µ–Ω–∏—è <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content saving-throws-content collapsed">';
        out += '<div class="info-grid">';
        character.saving_throws.forEach(throw_item => {
            if (throw_item && typeof throw_item === 'object') {
                out += '<div class="info-item"><strong>' + safeText(throw_item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + ':</strong> ' + (throw_item.modifier >= 0 ? '+' : '') + (throw_item.modifier || '0') + '</div>';
            }
        });
        out += '</div>';
        out += '</div></div>';
    }
    
    // –í–ª–∞–¥–µ–Ω–∏—è
    if (character.proficiencies && Array.isArray(character.proficiencies) && character.proficiencies.length > 0) {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">&#9876;&#65039; –í–ª–∞–¥–µ–Ω–∏—è <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        out += '<div class="proficiencies-list">';
        character.proficiencies.forEach(prof => {
            if (prof && typeof prof === 'string') {
                out += '<span class="proficiency-tag">' + safeText(prof) + '</span>';
            }
        });
        out += '</div>';
        out += '</div></div>';
    }
    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (character.description && typeof character.description === 'string') {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üìù –û–ø–∏—Å–∞–Ω–∏–µ <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        out += '<p>' + safeText(character.description) + '</p>';
        out += '</div></div>';
    }
    
    // –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
    if (character.background && typeof character.background === 'string') {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üìñ –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        out += '<p>' + safeText(character.background) + '</p>';
        out += '</div></div>';
    }
    
    // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    if (character.spells && (Array.isArray(character.spells) || typeof character.spells === 'object')) {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üîÆ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π (–æ–±—ä–µ–∫—Ç)
        if (typeof character.spells === 'object' && !Array.isArray(character.spells)) {
            if (character.spells.spellcasting_ability) {
                out += '<div class="spell-info"><strong>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:</strong> ' + safeText(character.spells.spellcasting_ability) + '</div>';
            }
            
            if (character.spells.spell_slots) {
                out += '<div class="spell-info"><strong>–°–ª–æ—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:</strong> ' + safeText(JSON.stringify(character.spells.spell_slots)) + '</div>';
            }
            
            if (character.spells.known_spells && character.spells.known_spells.length > 0) {
                out += '<div class="spell-category"><strong>–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</strong></div>';
                out += '<div class="spell-list">';
                character.spells.known_spells.forEach(spell => {
                    out += '<div class="spell-item">';
                    out += '<span class="spell-name">' + safeText(spell.name) + '</span>';
                    out += '<span class="spell-level">' + safeText(spell.level) + ' —É—Ä–æ–≤–µ–Ω—å</span>';
                    out += '</div>';
                });
                out += '</div>';
            }
            
            if (character.spells.spells_by_level) {
                out += '<div class="spell-category"><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º:</strong></div>';
                for (let level in character.spells.spells_by_level) {
                    if (character.spells.spells_by_level[level].length > 0) {
                        out += '<div class="spell-level-category"><strong>' + level + ' —É—Ä–æ–≤–µ–Ω—å:</strong></div>';
                        out += '<div class="spell-list">';
                        character.spells.spells_by_level[level].forEach(spell => {
                            out += '<div class="spell-item">';
                            out += '<span class="spell-name">' + safeText(spell) + '</span>';
                            out += '</div>';
                        });
                        out += '</div>';
                    }
                }
            }
        } else {
            // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–º–∞—Å—Å–∏–≤)
            out += '<div class="spell-list">';
            character.spells.forEach(spell => {
                if (typeof spell === 'object' && spell && spell.name) {
                    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    out += '<div class="spell-item">';
                    out += '<div class="spell-header" onclick="toggleSpellDetails(this)">';
                    out += '<span class="spell-name">' + safeText(spell.name) + '</span>';
                    out += '<span class="spell-level">' + (spell.level || '?') + ' —É—Ä–æ–≤–µ–Ω—å</span>';
                    out += '<span class="spell-school">' + safeText(spell.school || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + '</span>';
                    out += '<span class="spell-toggle">‚ñº</span>';
                    out += '</div>';
                    out += '<div class="spell-details" style="display: none;">';
                    out += '<div class="spell-info">';
                    out += '<div><strong>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è:</strong> ' + safeText(spell.casting_time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ') + '</div>';
                    out += '<div><strong>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</strong> ' + safeText(spell.range || '–ù–µ —É–∫–∞–∑–∞–Ω–∞') + '</div>';
                    out += '<div><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong> ' + safeText(spell.components || '–ù–µ —É–∫–∞–∑–∞–Ω—ã') + '</div>';
                    out += '<div><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ' + safeText(spell.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–∞') + '</div>';
                    if (spell.damage) {
                        out += '<div><strong>–£—Ä–æ–Ω:</strong> ' + safeText(spell.damage) + '</div>';
                    }
                    out += '</div>';
                    if (spell.description) {
                        out += '<div class="spell-description">' + safeText(spell.description) + '</div>';
                    }
                    out += '</div>';
                    out += '</div>';
                } else if (typeof spell === 'string' && spell) {
                    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞)
                    out += '<div class="spell-item">';
                    out += '<div class="spell-name">' + safeText(spell) + '</div>';
                    out += '</div>';
                }
            });
            out += '</div>';
        }
        
        out += '</div></div>';
    }
    
    // –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    if (character.equipment && (Array.isArray(character.equipment) || typeof character.equipment === 'object')) {
        out += '<div class="character-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">üéí –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è (–æ–±—ä–µ–∫—Ç)
        if (typeof character.equipment === 'object' && !Array.isArray(character.equipment)) {
            if (character.equipment.weapons && character.equipment.weapons.length > 0) {
                out += '<div class="equipment-category"><strong>‚öîÔ∏è –û—Ä—É–∂–∏–µ:</strong><ul>';
                character.equipment.weapons.forEach(weapon => {
                    out += '<li>' + safeText(weapon) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.armor && character.equipment.armor.length > 0) {
                out += '<div class="equipment-category"><strong>üõ°Ô∏è –ë—Ä–æ–Ω—è:</strong><ul>';
                character.equipment.armor.forEach(armor => {
                    out += '<li>' + safeText(armor) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.shields && character.equipment.shields.length > 0) {
                out += '<div class="equipment-category"><strong>üõ°Ô∏è –©–∏—Ç—ã:</strong><ul>';
                character.equipment.shields.forEach(shield => {
                    out += '<li>' + safeText(shield) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.tools && character.equipment.tools.length > 0) {
                out += '<div class="equipment-category"><strong>üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong><ul>';
                character.equipment.tools.forEach(tool => {
                    out += '<li>' + safeText(tool) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.items && character.equipment.items.length > 0) {
                out += '<div class="equipment-category"><strong>üéí –ë–∞–∑–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:</strong><ul>';
                character.equipment.items.forEach(item => {
                    out += '<li>' + safeText(item) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.background_items && character.equipment.background_items.length > 0) {
                out += '<div class="equipment-category"><strong>üìú –û—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è:</strong><ul>';
                character.equipment.background_items.forEach(item => {
                    out += '<li>' + safeText(item) + '</li>';
                });
                out += '</ul></div>';
            }
            
            if (character.equipment.money) {
                out += '<div class="equipment-category"><strong>üí∞ –î–µ–Ω—å–≥–∏:</strong> ' + safeText(character.equipment.money) + '</div>';
            }
        } else {
            // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–º–∞—Å—Å–∏–≤)
            out += '<ul class="equipment-list">';
            character.equipment.forEach(item => {
                if (item && typeof item === 'string') {
                    out += '<li>' + safeText(item) + '</li>';
                }
            });
            out += '</ul>';
        }
        
        out += '</div></div>';
    }
    
    out += '</div>';
    return out;
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
const equipmentStyles = `
    <style>
        .equipment-category {
            margin: 15px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border-left: 4px solid #ff6b35;
        }
        
        .equipment-category ul {
            list-style: none;
            padding: 0;
            margin: 8px 0 0 0;
        }
        
        .equipment-category li {
            padding: 3px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .equipment-category strong {
            color: #ff6b35;
            display: block;
            margin-bottom: 8px;
        }
        
        .spell-info {
            margin: 10px 0;
            padding: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 6px;
            border-left: 3px solid #4CAF50;
        }
        
        .spell-category {
            margin: 15px 0 10px 0;
            padding: 8px;
            background: rgba(76, 175, 80, 0.1);
            border-radius: 6px;
            border-left: 4px solid #4CAF50;
        }
        
        .spell-level-category {
            margin: 10px 0 5px 0;
            padding: 5px;
            background: rgba(76, 175, 80, 0.05);
            border-radius: 4px;
            border-left: 3px solid #4CAF50;
        }
        
        .spell-list {
            margin: 10px 0;
        }
        
        .spell-item {
            padding: 8px;
            margin: 5px 0;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 4px;
            border-left: 2px solid #4CAF50;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .spell-name {
            font-weight: bold;
            color: #4CAF50;
        }
        
        .spell-level {
            color: #ff6b35;
            font-size: 0.9em;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */
        .character-generator {
            background: var(--modal-bg, rgba(255, 255, 255, 0.05));
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid var(--modal-border, rgba(255, 255, 255, 0.1));
            box-shadow: var(--modal-shadow, 0 4px 15px rgba(0, 0, 0, 0.1));
        }
        
        
        .character-form-container {
            margin-top: 20px;
        }
        
        .character-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .form-group {
            flex: 1;
            min-width: 200px;
        }
        
        .form-group.full-width {
            flex: 1 1 100%;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-color, #e0e0e0);
            font-size: 14px;
        }
        
        .form-group select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--input-border, rgba(255, 255, 255, 0.2));
            border-radius: 8px;
            background: var(--input-bg, rgba(255, 255, 255, 0.1));
            color: var(--text-color, #ffffff);
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .form-group select:focus {
            outline: none;
            border-color: var(--accent-color, #ff6b35);
            box-shadow: 0 0 0 3px var(--accent-shadow, rgba(255, 107, 53, 0.2));
        }
        
        .form-actions {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        .character-progress {
            text-align: center;
            padding: 20px;
        }
        
        .progress-container {
            margin-bottom: 20px;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b35, #f7931e);
            border-radius: 4px;
            transition: width 0.3s ease;
            width: 0%;
        }
        
        .progress-text {
            color: var(--text-color, #e0e0e0);
            font-size: 14px;
        }
        
        .character-result {
            margin-top: 20px;
        }
        
        .character-card {
            background: var(--card-bg, rgba(255, 255, 255, 0.05));
            border: 1px solid var(--card-border, rgba(255, 255, 255, 0.1));
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .character-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--accent-color, #ff6b35);
        }
        
        .character-header h3 {
            margin: 0 0 10px 0;
            color: var(--text-color, #ffffff);
            font-size: 24px;
        }
        
        .character-subtitle {
            color: var(--text-color, #e0e0e0);
            opacity: 0.8;
            font-size: 16px;
        }
        
        .character-stats {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .stat-row {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .stat-item {
            flex: 1;
            min-width: 150px;
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 6px;
            border-left: 3px solid var(--accent-color, #ff6b35);
        }
        
        .abilities-section {
            background: rgba(255, 255, 255, 0.03);
            padding: 15px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .abilities-section h4 {
            margin: 0 0 15px 0;
            color: var(--accent-color, #ff6b35);
            font-size: 18px;
        }
        
        .abilities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
        }
        
        .ability-item {
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 6px;
            text-align: center;
            font-weight: 600;
        }
        
        .character-description,
        .character-background,
        .character-equipment,
        .character-spells {
            background: rgba(255, 255, 255, 0.03);
            padding: 15px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: 15px;
        }
        
        .character-description h4,
        .character-background h4,
        .character-equipment h4,
        .character-spells h4 {
            margin: 0 0 10px 0;
            color: var(--accent-color, #ff6b35);
            font-size: 16px;
        }
        
        .equipment-category {
            margin: 10px 0;
        }
        
        .equipment-category strong {
            color: var(--accent-color, #ff6b35);
            display: block;
            margin-bottom: 5px;
        }
        
        .equipment-category ul {
            margin: 5px 0 0 20px;
            padding: 0;
        }
        
        .equipment-category li {
            margin: 3px 0;
        }
        
        .character-actions {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        .character-note {
            background: var(--note-bg, rgba(255, 255, 255, 0.05));
            border: 1px solid var(--note-border, rgba(255, 255, 255, 0.1));
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }
        
        .character-note-title {
            font-size: 18px;
            font-weight: bold;
            color: var(--accent-color, #ff6b35);
            margin-bottom: 10px;
            text-align: center;
        }
        
        .character-note-info {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .character-note-info div {
            padding: 4px 0;
        }
        
        .character-note-info strong {
            color: var(--text-color, #ffffff);
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π */
        .spell-generator {
            background: var(--spell-generator-bg, rgba(255, 255, 255, 0.05));
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid var(--spell-generator-border, rgba(255, 255, 255, 0.1));
            box-shadow: var(--spell-generator-shadow, 0 4px 15px rgba(0, 0, 0, 0.1));
        }
        
        .spell-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .spells-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .spell-card {
            background: var(--spell-card-bg, rgba(255, 255, 255, 0.1));
            border: 1px solid var(--spell-card-border, rgba(255, 255, 255, 0.2));
            border-radius: 8px;
            padding: 16px;
            transition: all 0.3s ease;
        }
        
        .spell-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px var(--spell-card-shadow, rgba(0, 0, 0, 0.2));
        }
        
        .spell-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--spell-card-border, rgba(255, 255, 255, 0.2));
        }
        
        .spell-name {
            margin: 0;
            color: var(--spell-name-color, #ffffff);
            font-size: 18px;
            font-weight: 600;
        }
        
        .spell-level {
            background: var(--spell-level-bg, #ff6b35);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .spell-info {
            display: flex;
            gap: 12px;
            margin-bottom: 12px;
            flex-wrap: wrap;
        }
        
        .spell-school, .spell-classes {
            background: var(--spell-info-bg, rgba(255, 255, 255, 0.1));
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            color: var(--spell-info-color, #e0e0e0);
        }
        
        .spell-description {
            color: var(--spell-description-color, #e0e0e0);
            font-size: 14px;
            line-height: 1.5;
        }
        
        .spell-description p {
            margin: 8px 0;
        }
        
        .spell-description strong {
            color: var(--spell-strong-color, #ffffff);
        }
        
        /* –¢–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π */
        .theme-dark .spell-generator {
            --spell-generator-bg: rgba(30, 30, 30, 0.8);
            --spell-generator-border: rgba(255, 255, 255, 0.15);
            --spell-generator-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            --spell-card-bg: rgba(40, 40, 40, 0.8);
            --spell-card-border: rgba(255, 255, 255, 0.2);
            --spell-card-shadow: rgba(0, 0, 0, 0.4);
            --spell-name-color: #e0e0e0;
            --spell-level-bg: #ff6b35;
            --spell-info-bg: rgba(255, 255, 255, 0.1);
            --spell-info-color: #e0e0e0;
            --spell-description-color: #e0e0e0;
            --spell-strong-color: #ffffff;
        }
        
        .theme-light .spell-generator {
            --spell-generator-bg: rgba(255, 255, 255, 0.9);
            --spell-generator-border: rgba(0, 0, 0, 0.1);
            --spell-generator-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            --spell-card-bg: rgba(248, 248, 248, 0.9);
            --spell-card-border: rgba(0, 0, 0, 0.1);
            --spell-card-shadow: rgba(0, 0, 0, 0.1);
            --spell-name-color: #333333;
            --spell-level-bg: #2196F3;
            --spell-info-bg: rgba(0, 0, 0, 0.05);
            --spell-info-color: #666666;
            --spell-description-color: #333333;
            --spell-strong-color: #000000;
        }
        
        .theme-mystic .spell-generator {
            --spell-generator-bg: rgba(75, 0, 130, 0.8);
            --spell-generator-border: rgba(138, 43, 226, 0.3);
            --spell-generator-shadow: 0 4px 15px rgba(75, 0, 130, 0.3);
            --spell-card-bg: rgba(75, 0, 130, 0.9);
            --spell-card-border: rgba(138, 43, 226, 0.4);
            --spell-card-shadow: rgba(75, 0, 130, 0.4);
            --spell-name-color: #e6d7ff;
            --spell-level-bg: #9c27b0;
            --spell-info-bg: rgba(138, 43, 226, 0.2);
            --spell-info-color: #e6d7ff;
            --spell-description-color: #e6d7ff;
            --spell-strong-color: #ffffff;
        }
        
        .theme-orange .spell-generator {
            --spell-generator-bg: rgba(255, 152, 0, 0.1);
            --spell-generator-border: rgba(255, 152, 0, 0.3);
            --spell-generator-shadow: 0 4px 15px rgba(255, 152, 0, 0.2);
            --spell-card-bg: rgba(255, 152, 0, 0.1);
            --spell-card-border: rgba(255, 152, 0, 0.3);
            --spell-card-shadow: rgba(255, 152, 0, 0.2);
            --spell-name-color: #fff3e0;
            --spell-level-bg: #ff9800;
            --spell-info-bg: rgba(255, 152, 0, 0.2);
            --spell-info-color: #fff3e0;
            --spell-description-color: #fff3e0;
            --spell-strong-color: #ffffff;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–µ–ª–∏–π */
        .potion-generator {
            background: var(--potion-generator-bg, rgba(255, 255, 255, 0.05));
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid var(--potion-generator-border, rgba(255, 255, 255, 0.1));
            box-shadow: var(--potion-generator-shadow, 0 4px 15px rgba(0, 0, 0, 0.1));
        }
        
        .potion-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .potions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .potion-card {
            background: var(--potion-card-bg, rgba(255, 255, 255, 0.1));
            border: 1px solid var(--potion-card-border, rgba(255, 255, 255, 0.2));
            border-radius: 8px;
            padding: 16px;
            transition: all 0.3s ease;
        }
        
        .potion-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px var(--potion-card-shadow, rgba(0, 0, 0, 0.2));
        }
        
        .potion-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--potion-card-border, rgba(255, 255, 255, 0.2));
        }
        
        .potion-name {
            margin: 0;
            color: var(--potion-name-color, #ffffff);
            font-size: 18px;
            font-weight: 600;
        }
        
        .potion-rarity {
            background: var(--potion-rarity-bg, #ff6b35);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .potion-body {
            color: var(--potion-body-color, #e0e0e0);
            font-size: 14px;
            line-height: 1.5;
        }
        
        .potion-effect {
            font-size: 16px !important;
            font-weight: 500;
            margin: 12px 0 !important;
            color: var(--potion-effect-color, #ffffff) !important;
        }
        
        .potion-duration {
            margin: 8px 0;
        }
        
        .potion-details {
            display: flex;
            gap: 12px;
            margin-top: 12px;
            flex-wrap: wrap;
        }
        
        .potion-type {
            background: var(--potion-info-bg, rgba(255, 255, 255, 0.1));
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            color: var(--potion-info-color, #e0e0e0);
        }
        
.potion-cost {
    background: var(--potion-cost-bg, rgba(255, 215, 0, 0.2));
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    color: var(--potion-cost-color, #ffd700);
    font-weight: 600;
}

.potion-actions {
    margin-top: 12px;
    padding-top: 12px;
    border-top: 1px solid var(--border-color, #ddd);
}

.potion-actions .btn {
    font-size: 12px;
    padding: 6px 12px;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∑–µ–ª–∏–π */
.note-item.potion-note {
    border-left: 3px solid var(--accent-primary, #007bff);
    background: linear-gradient(90deg, rgba(0, 123, 255, 0.05) 0%, transparent 100%);
}

.note-item.potion-note:hover {
    background: linear-gradient(90deg, rgba(0, 123, 255, 0.1) 0%, transparent 100%);
}

.note-item.potion-note::before {
    content: "üß™";
    margin-right: 8px;
    opacity: 0.7;
}
        
        /* –¢–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–µ–ª–∏–π */
        .theme-dark .potion-generator {
            --potion-generator-bg: rgba(30, 30, 30, 0.8);
            --potion-generator-border: rgba(255, 255, 255, 0.15);
            --potion-generator-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            --potion-card-bg: rgba(40, 40, 40, 0.8);
            --potion-card-border: rgba(255, 255, 255, 0.2);
            --potion-card-shadow: rgba(0, 0, 0, 0.4);
            --potion-name-color: #e0e0e0;
            --potion-rarity-bg: #ff6b35;
            --potion-info-bg: rgba(255, 255, 255, 0.1);
            --potion-info-color: #e0e0e0;
            --potion-body-color: #e0e0e0;
            --potion-effect-color: #ffffff;
            --potion-cost-bg: rgba(255, 215, 0, 0.2);
            --potion-cost-color: #ffd700;
        }
        
        .theme-light .potion-generator {
            --potion-generator-bg: rgba(255, 255, 255, 0.9);
            --potion-generator-border: rgba(0, 0, 0, 0.1);
            --potion-generator-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            --potion-card-bg: rgba(248, 248, 248, 0.9);
            --potion-card-border: rgba(0, 0, 0, 0.1);
            --potion-card-shadow: rgba(0, 0, 0, 0.1);
            --potion-name-color: #333333;
            --potion-rarity-bg: #2196F3;
            --potion-info-bg: rgba(0, 0, 0, 0.05);
            --potion-info-color: #666666;
            --potion-body-color: #333333;
            --potion-effect-color: #000000;
            --potion-cost-bg: rgba(255, 215, 0, 0.3);
            --potion-cost-color: #b8860b;
        }
        
        .theme-mystic .potion-generator {
            --potion-generator-bg: rgba(75, 0, 130, 0.8);
            --potion-generator-border: rgba(138, 43, 226, 0.3);
            --potion-generator-shadow: 0 4px 15px rgba(75, 0, 130, 0.3);
            --potion-card-bg: rgba(75, 0, 130, 0.9);
            --potion-card-border: rgba(138, 43, 226, 0.4);
            --potion-card-shadow: rgba(75, 0, 130, 0.4);
            --potion-name-color: #e6d7ff;
            --potion-rarity-bg: #9c27b0;
            --potion-info-bg: rgba(138, 43, 226, 0.2);
            --potion-info-color: #e6d7ff;
            --potion-body-color: #e6d7ff;
            --potion-effect-color: #ffffff;
            --potion-cost-bg: rgba(255, 215, 0, 0.3);
            --potion-cost-color: #ffd700;
        }
        
        .theme-orange .potion-generator {
            --potion-generator-bg: rgba(255, 152, 0, 0.1);
            --potion-generator-border: rgba(255, 152, 0, 0.3);
            --potion-generator-shadow: 0 4px 15px rgba(255, 152, 0, 0.2);
            --potion-card-bg: rgba(255, 152, 0, 0.1);
            --potion-card-border: rgba(255, 152, 0, 0.3);
            --potion-card-shadow: rgba(255, 152, 0, 0.2);
            --potion-name-color: #fff3e0;
            --potion-rarity-bg: #ff9800;
            --potion-info-bg: rgba(255, 152, 0, 0.2);
            --potion-info-color: #fff3e0;
            --potion-body-color: #fff3e0;
            --potion-effect-color: #ffffff;
            --potion-cost-bg: rgba(255, 215, 0, 0.3);
            --potion-cost-color: #ffd700;
        }
        
        .character-form-new {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
            align-items: end;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        .form-row .form-group.full-width {
            flex: 1;
        }
        
        
        .select-wrapper {
            position: relative;
        }
        
        .subrace-tooltip {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid #ff6b35;
            border-radius: 8px;
            padding: 12px;
            margin-top: 5px;
            z-index: 1000;
            display: none;
            color: #ffffff;
            font-size: 12px;
        }
        
        .subrace-tooltip.show {
            display: block;
        }
        
        .subrace-tooltip h4 {
            margin: 0 0 8px 0;
            color: #ff6b35;
            font-size: 14px;
        }
        
        .subrace-tooltip ul {
            margin: 0;
            padding-left: 16px;
        }
        
        .subrace-tooltip li {
            margin: 4px 0;
        }
        
        
        .generate-btn:active {
            transform: translateY(0);
        }
        
        /* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */
        .result-actions {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        
        .result-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .result-btn.regenerate {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
        }
        
        .result-btn.new {
            background: linear-gradient(135deg, #2196F3, #1976D2);
            color: white;
        }
        
        .result-btn.save {
            background: linear-gradient(135deg, #9C27B0, #7B1FA2);
            color: white;
        }
        
        .result-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 15px;
            }
            
            .result-actions {
                flex-direction: column;
                align-items: center;
            }
            
            .result-btn {
                width: 200px;
                justify-content: center;
            }
        }
    </style>
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head –¥–æ–∫—É–º–µ–Ω—Ç–∞
if (!document.getElementById('equipment-styles')) {
    const styleElement = document.createElement('div');
    styleElement.id = 'equipment-styles';
    styleElement.innerHTML = equipmentStyles;
    document.head.appendChild(styleElement);
}

// --- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π ---
function translateActionName(actionName) {
    const translations = {
        'Bite': '–£–∫—É—Å',
        'Claw': '–ö–æ–≥–æ—Ç—å',
        'Tail': '–•–≤–æ—Å—Ç',
        'Gore': '–†–æ–≥',
        'Slam': '–£–¥–∞—Ä',
        'Tentacle': '–©—É–ø–∞–ª—å—Ü–µ',
        'Sting': '–ñ–∞–ª–æ',
        'Spit': '–ü–ª–µ–≤–æ–∫',
        'Breath': '–î—ã—Ö–∞–Ω–∏–µ',
        'Wing': '–ö—Ä—ã–ª–æ',
        'Hoof': '–ö–æ–ø—ã—Ç–æ',
        'Punch': '–ö—É–ª–∞–∫',
        'Kick': '–ü–∏–Ω–æ–∫',
        'Headbutt': '–£–¥–∞—Ä –≥–æ–ª–æ–≤–æ–π',
        'Charge': '–†—ã–≤–æ–∫',
        'Trample': '–¢–æ–ø—Ç–∞–Ω–∏–µ',
        'Swallow': '–ü—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–Ω–∏–µ',
        'Constrict': '–°–∂–∞—Ç–∏–µ',
        'Grapple': '–ó–∞—Ö–≤–∞—Ç',
        'Shove': '–¢–æ–ª—á–æ–∫',
        'Dash': '–†—ã–≤–æ–∫',
        'Disengage': '–û—Ç—Ö–æ–¥',
        'Dodge': '–£–∫–ª–æ–Ω–µ–Ω–∏–µ',
        'Help': '–ü–æ–º–æ—â—å',
        'Hide': '–°–∫—Ä—ã—Ç–∏–µ',
        'Ready': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
        'Search': '–ü–æ–∏—Å–∫',
        'Use an Object': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞',
        'Teleport': '–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è',
        'Invisibility': '–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å',
        'Polymorph': '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ',
        'Charm': '–û—á–∞—Ä–æ–≤–∞–Ω–∏–µ',
        'Fear': '–°—Ç—Ä–∞—Ö',
        'Sleep': '–°–æ–Ω',
        'Confusion': '–°–º—è—Ç–µ–Ω–∏–µ',
        'Paralysis': '–ü–∞—Ä–∞–ª–∏—á',
        'Poison': '–Ø–¥',
        'Disease': '–ë–æ–ª–µ–∑–Ω—å',
        'Curse': '–ü—Ä–æ–∫–ª—è—Ç–∏–µ',
        'Blessing': '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ',
        'Healing': '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
        'Regeneration': '–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
        'Summon': '–ü—Ä–∏–∑—ã–≤',
        'Banish': '–ò–∑–≥–Ω–∞–Ω–∏–µ',
        'Plane Shift': '–°–¥–≤–∏–≥ –ø–ª–∞–Ω–∞',
        'Time Stop': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
        'Wish': '–ñ–µ–ª–∞–Ω–∏–µ',
        'Meteor Swarm': '–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å',
        'Power Word Kill': '–°–ª–æ–≤–æ —Å–∏–ª—ã: —Å–º–µ—Ä—Ç—å',
        'Power Word Stun': '–°–ª–æ–≤–æ —Å–∏–ª—ã: –æ–≥–ª—É—à–µ–Ω–∏–µ',
        'Power Word Heal': '–°–ª–æ–≤–æ —Å–∏–ª—ã: –∏—Å—Ü–µ–ª–µ–Ω–∏–µ'
    };
    
    return translations[actionName] || actionName;
}

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –æ—Ç API —Å–∏—Å—Ç–µ–º—ã ---
function formatEnemiesFromApi(enemies) {
    console.log('formatEnemiesFromApi called with:', enemies);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ enemies —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!enemies || !Array.isArray(enemies)) {
        console.error('Invalid enemies data:', enemies);
        return '<div class="error">–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</div>';
    }
    
    let out = '<div class="enemies-container">';
    enemies.forEach((enemy, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ enemy —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        if (!enemy || typeof enemy !== 'object') {
            out += '<div class="error">–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ #' + (index + 1) + '</div>';
            return;
        }
        
        out += '<div class="enemy-block">';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        out += '<div class="enemy-header">';
        out += '<h3>' + (enemy.name || '–ë–µ–∑ –∏–º–µ–Ω–∏') + '</h3>';
        out += '<div class="enemy-cr">CR ' + (enemy.challenge_rating || enemy.cr || '?') + '</div>';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
        if (enemy.is_group && enemy.count > 1) {
            out += '<div class="enemy-group-info">–ì—Ä—É–ø–ø–∞ –∏–∑ ' + enemy.count + ' —Å—É—â–µ—Å—Ç–≤</div>';
        }
        out += '</div>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ —É–≥—Ä–æ–∑—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (enemy.threat_level_display) {
            out += '<div class="enemy-threat-level">' + enemy.threat_level_display + '</div>';
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        out += '<div class="enemy-section">';
        out += '<div class="section-title" onclick="toggleSection(this)">üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è <span class="toggle-icon">‚ñº</span></div>';
        out += '<div class="section-content">';
        out += '<div class="info-grid">';
        out += '<div class="info-item"><strong>–¢–∏–ø:</strong> ' + (enemy.type || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Å—Ä–µ–¥—É
        let displayEnvironment = enemy.environment || '–õ—é–±–∞—è —Å—Ä–µ–¥–∞';
        if (displayEnvironment === '–õ—é–±–∞—è —Å—Ä–µ–¥–∞') {
            // –ï—Å–ª–∏ —É –º–æ–Ω—Å—Ç—Ä–∞ –Ω–µ—Ç environment, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ä–µ–¥—É
            const selectedEnvironment = document.getElementById('enemy-environment')?.value;
            if (selectedEnvironment) {
                const environmentNames = {
                    'forest': '–õ–µ—Å',
                    'mountain': '–ì–æ—Ä—ã', 
                    'desert': '–ü—É—Å—Ç—ã–Ω—è',
                    'swamp': '–ë–æ–ª–æ—Ç–∞',
                    'underdark': '–ü–æ–¥–∑–µ–º–µ–ª—å–µ',
                    'urban': '–ì–æ—Ä–æ–¥',
                    'coastal': '–ü–æ–±–µ—Ä–µ–∂—å–µ'
                };
                displayEnvironment = environmentNames[selectedEnvironment] || selectedEnvironment;
            }
        }
        out += '<div class="info-item"><strong>–°—Ä–µ–¥–∞:</strong> ' + displayEnvironment + '</div>';
        out += '</div>';
        out += '</div></div>';
        
        // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        out += '<div class="enemy-section">';
        out += '<div class="section-title collapsed" onclick="toggleSection(this)">&#9876;&#65039; –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ <span class="toggle-icon">‚ñ∂</span></div>';
        out += '<div class="section-content collapsed">';
        out += '<div class="info-grid">';
        out += '<div class="info-item"><strong>–•–∏—Ç—ã:</strong> ' + (enemy.hit_points || enemy.hp || enemy.hit_points || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã') + '</div>';
        out += '<div class="info-item"><strong>–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞:</strong> ' + (enemy.armor_class || enemy.ac || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') + '</div>';
        out += '<div class="info-item"><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ' + (enemy.speed || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') + '</div>';
        if (enemy.cr_numeric !== undefined) {
            out += '<div class="info-item"><strong>CR —á–∏—Å–ª–æ–≤–æ–π:</strong> ' + enemy.cr_numeric + '</div>';
        }
        out += '</div>';
        out += '</div></div>';
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if (enemy.abilities && typeof enemy.abilities === 'object') {
            out += '<div class="enemy-section">';
            out += '<div class="section-title collapsed" onclick="toggleSection(this)">üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ <span class="toggle-icon">‚ñ∂</span></div>';
            out += '<div class="section-content collapsed">';
            out += '<div class="abilities-grid">';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if (enemy.abilities.–°–ò–õ) {
                out += '<div class="ability-item"><strong>–°–ò–õ:</strong> ' + enemy.abilities.–°–ò–õ.value + ' (' + (enemy.abilities.–°–ò–õ.modifier >= 0 ? '+' : '') + enemy.abilities.–°–ò–õ.modifier + ')</div>';
            } else if (enemy.abilities.str || enemy.abilities.strength) {
                const strValue = enemy.abilities.str || enemy.abilities.strength;
                const strMod = Math.floor((strValue - 10) / 2);
                out += '<div class="ability-item"><strong>–°–ò–õ:</strong> ' + strValue + ' (' + (strMod >= 0 ? '+' : '') + strMod + ')</div>';
            }
            
            if (enemy.abilities.–õ–û–í) {
                out += '<div class="ability-item"><strong>–õ–û–í:</strong> ' + enemy.abilities.–õ–û–í.value + ' (' + (enemy.abilities.–õ–û–í.modifier >= 0 ? '+' : '') + enemy.abilities.–õ–û–í.modifier + ')</div>';
            } else if (enemy.abilities.dex || enemy.abilities.dexterity) {
                const dexValue = enemy.abilities.dex || enemy.abilities.dexterity;
                const dexMod = Math.floor((dexValue - 10) / 2);
                out += '<div class="ability-item"><strong>–õ–û–í:</strong> ' + dexValue + ' (' + (dexMod >= 0 ? '+' : '') + dexMod + ')</div>';
            }
            
            if (enemy.abilities.–¢–ï–õ) {
                out += '<div class="ability-item"><strong>–¢–ï–õ:</strong> ' + enemy.abilities.–¢–ï–õ.value + ' (' + (enemy.abilities.–¢–ï–õ.modifier >= 0 ? '+' : '') + enemy.abilities.–¢–ï–õ.modifier + ')</div>';
            } else if (enemy.abilities.con || enemy.abilities.constitution) {
                const conValue = enemy.abilities.con || enemy.abilities.constitution;
                const conMod = Math.floor((conValue - 10) / 2);
                out += '<div class="ability-item"><strong>–¢–ï–õ:</strong> ' + conValue + ' (' + (conMod >= 0 ? '+' : '') + conMod + ')</div>';
            }
            
            if (enemy.abilities.–ò–ù–¢) {
                out += '<div class="ability-item"><strong>–ò–ù–¢:</strong> ' + enemy.abilities.–ò–ù–¢.value + ' (' + (enemy.abilities.–ò–ù–¢.modifier >= 0 ? '+' : '') + enemy.abilities.–ò–ù–¢.modifier + ')</div>';
            } else if (enemy.abilities.int || enemy.abilities.intelligence) {
                const intValue = enemy.abilities.int || enemy.abilities.intelligence;
                const intMod = Math.floor((intValue - 10) / 2);
                out += '<div class="ability-item"><strong>–ò–ù–¢:</strong> ' + intValue + ' (' + (intMod >= 0 ? '+' : '') + intMod + ')</div>';
            }
            
            if (enemy.abilities.–ú–î–†) {
                out += '<div class="ability-item"><strong>–ú–î–†:</strong> ' + enemy.abilities.–ú–î–†.value + ' (' + (enemy.abilities.–ú–î–†.modifier >= 0 ? '+' : '') + enemy.abilities.–ú–î–†.modifier + ')</div>';
            } else if (enemy.abilities.wis || enemy.abilities.wisdom) {
                const wisValue = enemy.abilities.wis || enemy.abilities.wisdom;
                const wisMod = Math.floor((wisValue - 10) / 2);
                out += '<div class="ability-item"><strong>–ú–î–†:</strong> ' + wisValue + ' (' + (wisMod >= 0 ? '+' : '') + wisMod + ')</div>';
            }
            
            if (enemy.abilities.–•–ê–†) {
                out += '<div class="ability-item"><strong>–•–ê–†:</strong> ' + enemy.abilities.–•–ê–†.value + ' (' + (enemy.abilities.–•–ê–†.modifier >= 0 ? '+' : '') + enemy.abilities.–•–ê–†.modifier + ')</div>';
            } else if (enemy.abilities.cha || enemy.abilities.charisma) {
                const chaValue = enemy.abilities.cha || enemy.abilities.charisma;
                const chaMod = Math.floor((chaValue - 10) / 2);
                out += '<div class="ability-item"><strong>–•–ê–†:</strong> ' + chaValue + ' (' + (chaMod >= 0 ? '+' : '') + chaMod + ')</div>';
            }
            
            out += '</div>';
            out += '</div></div>';
        }
        
        // –î–µ–π—Å—Ç–≤–∏—è
        if (enemy.actions && Array.isArray(enemy.actions) && enemy.actions.length > 0) {
            out += '<div class="enemy-section">';
            out += '<div class="section-title collapsed" onclick="toggleSection(this)">&#9876;&#65039; –î–µ–π—Å—Ç–≤–∏—è <span class="toggle-icon">‚ñ∂</span></div>';
            out += '<div class="section-content collapsed">';
            out += '<ul class="actions-list">';
            enemy.actions.forEach(action => {
                if (action && typeof action === 'object') {
                    const actionName = translateActionName(action.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
                    out += '<li><strong>' + actionName + '</strong>';
                    if (action.description) {
                        out += ': ' + action.description;
                    }
                    out += '</li>';
                } else if (typeof action === 'string') {
                    const actionName = translateActionName(action);
                    out += '<li>' + actionName + '</li>';
                }
            });
            out += '</ul>';
            out += '</div></div>';
        }
        
        // –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if (enemy.special_abilities && Array.isArray(enemy.special_abilities) && enemy.special_abilities.length > 0) {
            out += '<div class="enemy-section">';
            out += '<div class="section-title collapsed" onclick="toggleSection(this)">üåü –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ <span class="toggle-icon">‚ñ∂</span></div>';
            out += '<div class="section-content collapsed">';
            out += '<ul class="abilities-list">';
            enemy.special_abilities.forEach(ability => {
                if (ability && typeof ability === 'object') {
                    const abilityName = translateActionName(ability.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å');
                    out += '<li><strong>' + abilityName + '</strong>';
                    if (ability.description) {
                        out += ': ' + ability.description;
                    }
                    out += '</li>';
                } else if (typeof ability === 'string') {
                    const abilityName = translateActionName(ability);
                    out += '<li>' + abilityName + '</li>';
                }
            });
            out += '</ul>';
            out += '</div></div>';
        }
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (enemy.description && typeof enemy.description === 'string') {
            out += '<div class="enemy-section">';
            out += '<div class="section-title collapsed" onclick="toggleSection(this)">üìù –û–ø–∏—Å–∞–Ω–∏–µ <span class="toggle-icon">‚ñ∂</span></div>';
            out += '<div class="section-content collapsed">';
            out += '<p>' + enemy.description + '</p>';
            out += '</div></div>';
        }
        
        // –¢–∞–∫—Ç–∏–∫–∞
        if (enemy.tactics && typeof enemy.tactics === 'string') {
            out += '<div class="enemy-section">';
            out += '<div class="section-title collapsed" onclick="toggleSection(this)">üéØ –¢–∞–∫—Ç–∏–∫–∞ <span class="toggle-icon">‚ñ∂</span></div>';
            out += '<div class="section-content collapsed">';
            out += '<p>' + enemy.tactics + '</p>';
            out += '</div></div>';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–∏
        // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –±—É–¥–µ—Ç –æ–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É
        
        out += '</div>';
        
        if (index < enemies.length - 1) {
            out += '<hr class="enemy-separator">';
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∏
    out += `
        <div class="save-enemies-section">
            <button class="save-enemies-btn" onclick="saveAllEnemiesToNotes(${JSON.stringify(enemies)})">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –≤ –∑–∞–º–µ—Ç–∫–∏
            </button>
        </div>
    `;
    
    out += '</div>';
    return out;
}

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ ---
function formatResultSegments(txt, isNpc) {
    if (isNpc) {
        return formatNpcBlocks(txt);
    } else {
        // –î–ª—è –±—Ä–æ—Å–∫–æ–≤: –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        const lines = txt.split(/<br>|\n/).map(l => l.trim()).filter(Boolean);
        let out = '<div class="dice-result-container">';
        
        lines.forEach((line, index) => {
            let className = 'dice-result-line';
            if (line.includes('üé≤')) {
                className += ' dice-header';
            } else if (line.includes('üìä')) {
                className += ' dice-results';
            } else if (line.includes('üíé')) {
                className += ' dice-sum';
            } else if (line.includes('üí¨')) {
                className += ' dice-comment';
            }
            
            out += `<div class="${className}">${line}</div>`;
        });
        
        out += '</div>';
        return out;
    }
}
// --- Modal & Notes ---
function showModal(content) {
    document.getElementById('modal-content').innerHTML = content;
    document.getElementById('modal-bg').classList.add('active');
}
function closeModal() {
    document.getElementById('modal-bg').classList.remove('active');
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    let regenerateBtn = document.querySelector('.modal-regenerate');
    if (regenerateBtn) {
        regenerateBtn.remove();
    }
}
document.getElementById('modal-close').onclick = closeModal;
document.getElementById('modal-bg').onclick = function(e) { if (e.target === this) closeModal(); };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Å—Ç–µ–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
function saveDiceResultAsNote(content, comment) {
    // –ï—Å–ª–∏ comment –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π"
    if (!comment || comment.trim() === '') {
        comment = '–ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    var noteWithComment = '<div class="dice-result-header">' + comment + '</div>' + content;
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(noteWithComment)
    }).then(() => {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        updateNotesInstantly();
    });
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
function saveNoteAndUpdate(content) {
    // –ï—Å–ª–∏ content –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (!content) {
        content = document.getElementById('modal-content').innerHTML;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è NPC –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    var headerElement = document.querySelector('.npc-modern-header');
    var npcName = headerElement ? headerElement.textContent.trim() : 'NPC';
    
    // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ "NPC", –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    if (!npcName || npcName === 'NPC') {
        // –ò—â–µ–º –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        var plainText = content.replace(/<[^>]+>/g, '\n');
        var lines = plainText.split(/\n/).map(l => l.trim()).filter(Boolean);
        
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line && line.length > 2 && line.length < 30 && 
                !/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)/i.test(line) &&
                !line.includes(':') && !line.includes('‚Äî')) {
                npcName = line;
                break;
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
    if (npcName && npcName !== 'NPC') {
        var words = npcName.split(/\s+/);
        if (words.length > 1) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–º—è
            npcName = words[0];
        }
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        npcName = npcName.replace(/[^\w–∞-—è—ë]/gi, '').trim();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    var noteWithName = '<div class="npc-name-header">' + npcName + '</div>' + content;
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(noteWithName)
    }).then(() => {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        updateNotesInstantly();
    });
}

function saveNote(content) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    var content = document.getElementById('modal-content').innerHTML;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è NPC –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    var headerElement = document.querySelector('.npc-modern-header');
    var npcName = headerElement ? headerElement.textContent.trim() : 'NPC';
    
    // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ "NPC", –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    if (!npcName || npcName === 'NPC') {
        // –ò—â–µ–º –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        var plainText = content.replace(/<[^>]+>/g, '\n');
        var lines = plainText.split(/\n/).map(l => l.trim()).filter(Boolean);
        
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line && line.length > 2 && line.length < 30 && 
                !/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)/i.test(line) &&
                !line.includes(':') && !line.includes('‚Äî')) {
                npcName = line;
                break;
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
    if (npcName && npcName !== 'NPC') {
        var words = npcName.split(/\s+/);
        if (words.length > 1) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–º—è
            npcName = words[0];
        }
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        npcName = npcName.replace(/[^\w–∞-—è—ë]/gi, '').trim();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    var noteWithName = '<div class="npc-name-header">' + npcName + '</div>' + content;
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(noteWithName)
    }).then(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        updateNotesDisplay();
    });
}
function removeNote(idx) {
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'remove_note=' + encodeURIComponent(idx)
    }).then(() => {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        updateNotesInstantly();
    });
}
function expandNote(idx) {
    if (window.allNotes && window.allNotes[idx]) {
        var content = window.allNotes[idx];
        if (content && content.trim()) {
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–Ω–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ –∑–∞–º–µ—Ç–∫–∏
            var cleanContent = content;
            var nameHeaderMatch = content.match(/<div class="npc-name-header">([^<]+)<\/div>/i);
            if (nameHeaderMatch) {
                // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–Ω–∏ –∏–∑ –Ω–∞—á–∞–ª–∞
                cleanContent = content.replace(/<div class="npc-name-header">[^<]+<\/div>/i, '');
                // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
                cleanContent = cleanContent.replace(/^\s+/, '');
            }
            
            document.getElementById('modal-content').innerHTML = cleanContent;
            document.getElementById('modal-bg').classList.add('active');
            document.getElementById('modal-save').style.display = 'none';
        }
    }
}
// –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ JS
window.allNotes = <?php echo json_encode($_SESSION['notes'], JSON_UNESCAPED_UNICODE); ?>;

// === –ó–í–£–ö–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê ===
class SoundManager {
    constructor() {
        this.sounds = {};
        this.backgroundMusic = null;
        this.isMusicEnabled = true;
        this.isSoundEnabled = true;
        this.currentTheme = 'medium';
        this.init();
    }
    
    init() {
        console.log('SoundManager init started');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
        this.loadSettings();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        this.detectTheme();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏
        this.loadSounds();
        
        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('SoundManager initialized, waiting for user interaction');
    }
    
    detectTheme() {
        if (document.body) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-theme –∞—Ç—Ä–∏–±—É—Ç
            const dataTheme = document.documentElement.getAttribute('data-theme');
            if (dataTheme) {
                this.currentTheme = dataTheme === 'medium' ? 'orange' : dataTheme;
            } else {
                // Fallback - –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
                const savedTheme = localStorage.getItem('theme') || 'medium';
                this.currentTheme = savedTheme === 'medium' ? 'orange' : savedTheme;
            }
        } else {
            // Fallback - –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const savedTheme = localStorage.getItem('theme') || 'medium';
            this.currentTheme = savedTheme === 'medium' ? 'orange' : savedTheme;
        }
        console.log('Detected theme:', this.currentTheme);
    }
    
    loadSounds() {
        try {
            console.log('Loading sounds...');
            
            // –ó–≤—É–∫ –∫–ª–∏–∫–∞
            this.sounds.click = new Audio('sound/click.mp3');
            this.sounds.click.volume = 0.6;
            console.log('Click sound loaded');
            
            // –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º (—Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞)
            const timestamp = Date.now();
            this.sounds.bgDark = new Audio(`sound/bg music dark.mp3?v=${timestamp}`);
            this.sounds.bgMystic = new Audio(`sound/bg music mystic.mp3?v=${timestamp}`);
            this.sounds.bgOrange = new Audio(`sound/bg music orange.mp3?v=${timestamp}`);
            this.sounds.bgIce = new Audio(`sound/bg music ice.mp3?v=${timestamp}`);
            console.log('Background music files loaded');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
            Object.values(this.sounds).forEach(sound => {
                if (sound !== this.sounds.click) {
                    sound.loop = true;
                    sound.volume = 0.2;
                    sound.preload = 'auto';
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.sounds.bgDark.addEventListener('canplaythrough', () => {
                console.log('Dark theme music ready to play');
            });
            this.sounds.bgMystic.addEventListener('canplaythrough', () => {
                console.log('Mystic theme music ready to play');
            });
            this.sounds.bgOrange.addEventListener('canplaythrough', () => {
                console.log('Orange theme music ready to play');
            });
            this.sounds.bgIce.addEventListener('canplaythrough', () => {
                console.log('Ice theme music ready to play');
            });
            
            console.log('All sounds loaded successfully');
        } catch (error) {
            console.log('Error loading sounds:', error);
            this.isSoundEnabled = false;
            this.isMusicEnabled = false;
        }
    }
    
    loadSettings() {
        this.isMusicEnabled = localStorage.getItem('musicEnabled') !== 'false';
        this.isSoundEnabled = localStorage.getItem('soundEnabled') !== 'false';
    }
    
    saveSettings() {
        localStorage.setItem('musicEnabled', this.isMusicEnabled);
        localStorage.setItem('soundEnabled', this.isSoundEnabled);
    }
    
    playClick() {
        if (this.isSoundEnabled && this.sounds.click) {
            try {
                this.sounds.click.currentTime = 0;
                this.sounds.click.play().catch(e => console.log('Click sound failed:', e));
            } catch (error) {
                console.log('Error playing click sound:', error);
            }
        }
    }
    
    startBackgroundMusic() {
        if (!this.isMusicEnabled) return;
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        Object.values(this.sounds).forEach(sound => {
            if (sound !== this.sounds.click) {
                sound.pause();
                sound.currentTime = 0;
            }
        });
        
        let musicFile = null;
        switch (this.currentTheme) {
            case 'dark':
                musicFile = this.sounds.bgDark;
                break;
            case 'mystic':
                musicFile = this.sounds.bgMystic;
                break;
            case 'orange':
                musicFile = this.sounds.bgOrange;
                break;
            case 'ice':
                musicFile = this.sounds.bgIce;
                break;
            default:
                return; // –¢–µ–º–∞ –±–µ–∑ –º—É–∑—ã–∫–∏
        }
        
        if (musicFile) {
            this.backgroundMusic = musicFile;
            console.log('Starting background music for theme:', this.currentTheme);
            this.backgroundMusic.play().then(() => {
                console.log('Background music started successfully');
            }).catch(e => {
                console.log('Background music failed:', e);
                // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    this.backgroundMusic.play().catch(e2 => console.log('Retry failed:', e2));
                }, 2000);
            });
        } else {
            console.log('No music file found for theme:', this.currentTheme);
        }
    }
    
    stopBackgroundMusic() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        if (this.backgroundMusic) {
            this.backgroundMusic.pause();
            this.backgroundMusic.currentTime = 0;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï —Ñ–æ–Ω–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        Object.values(this.sounds).forEach(sound => {
            if (sound !== this.sounds.click) {
                sound.pause();
                sound.currentTime = 0;
            }
        });
        
        console.log('All background music stopped');
    }
    
    changeTheme(newTheme) {
        this.currentTheme = newTheme;
        this.stopBackgroundMusic();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
        this.reloadAudioFiles();
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
        setTimeout(() => {
            this.startBackgroundMusic();
        }, 500);
    }
    
    reloadAudioFiles() {
        try {
            const timestamp = Date.now();
            console.log('Reloading audio files to bypass cache...');
            
            // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
            Object.values(this.sounds).forEach(sound => {
                if (sound !== this.sounds.click) {
                    sound.pause();
                    sound.currentTime = 0;
                }
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
            this.sounds.bgDark = new Audio(`sound/bg music dark.mp3?v=${timestamp}`);
            this.sounds.bgMystic = new Audio(`sound/bg music mystic.mp3?v=${timestamp}`);
            this.sounds.bgOrange = new Audio(`sound/bg music orange.mp3?v=${timestamp}`);
            this.sounds.bgIce = new Audio(`sound/bg music ice.mp3?v=${timestamp}`);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
            Object.values(this.sounds).forEach(sound => {
                if (sound !== this.sounds.click) {
                    sound.loop = true;
                    sound.volume = 0.2;
                    sound.preload = 'auto';
                }
            });
            
            console.log('Audio files reloaded successfully');
        } catch (error) {
            console.log('Error reloading audio files:', error);
        }
    }
    
    toggleMusic() {
        this.isMusicEnabled = !this.isMusicEnabled;
        this.saveSettings();
        
        if (this.isMusicEnabled) {
            this.startBackgroundMusic();
        } else {
            this.stopBackgroundMusic();
        }
    }
    
    toggleSound() {
        this.isSoundEnabled = !this.isSoundEnabled;
        this.saveSettings();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞ –∫–ª–∏–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
function addClickSound() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –∫–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
    document.addEventListener('click', function(e) {
        if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
            console.log('Button clicked, playing sound...');
            if (window.soundManager) {
                window.soundManager.playClick();
            } else {
                console.log('SoundManager not available');
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –∫ —Å—Å—ã–ª–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç —Å–µ–±—è –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
    document.addEventListener('click', function(e) {
        if (e.target.tagName === 'A' && e.target.classList.contains('btn')) {
            console.log('Link button clicked, playing sound...');
            if (window.soundManager) {
                window.soundManager.playClick();
            } else {
                console.log('SoundManager not available');
            }
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing SoundManager...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–≤—É–∫–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    window.soundManager = new SoundManager();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    window.soundManager.detectTheme();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ä–∞–Ω–∂–µ–≤–æ–π —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (window.soundManager.currentTheme === 'orange') {
        setTimeout(() => {
            window.soundManager.startBackgroundMusic();
        }, 500);
    }
    
    addClickSound();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function enableMusicOnInteraction() {
        console.log('User interaction detected, enabling music...');
        if (window.soundManager && window.soundManager.isMusicEnabled) {
            window.soundManager.startBackgroundMusic();
        }
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        document.removeEventListener('click', enableMusicOnInteraction);
        document.removeEventListener('keydown', enableMusicOnInteraction);
        document.removeEventListener('touchstart', enableMusicOnInteraction);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏
    document.addEventListener('click', enableMusicOnInteraction);
    document.addEventListener('keydown', enableMusicOnInteraction);
    document.addEventListener('touchstart', enableMusicOnInteraction);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function updateNotesDisplay() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateNotesInstantly();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function updateNotesWithAnimation() {
    console.log('updateNotesWithAnimation called');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    const notesBlock = document.getElementById('notes-block');
    if (!notesBlock) {
        console.log('notes-block not found');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    const originalContent = notesBlock.innerHTML;
    notesBlock.innerHTML = `
        <div class="notes-loading" style="
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            color: var(--text-secondary, #666);
        ">
            <div class="loading-spinner" style="
                width: 20px;
                height: 20px;
                border: 2px solid var(--border-color, #ddd);
                border-top: 2px solid var(--accent-primary, #007bff);
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin-right: 10px;
            "></div>
            –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫...
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (!document.getElementById('loading-spinner-css')) {
        const style = document.createElement('style');
        style.id = 'loading-spinner-css';
        style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            .note-item-animate {
                animation: fadeInUp 0.5s ease-out;
            }
        `;
        document.head.appendChild(style);
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=update_notes'
    })
    .then(response => response.text())
    .then(html => {
        // –ü–ª–∞–≤–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        notesBlock.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫
        const noteItems = notesBlock.querySelectorAll('.note-item');
        noteItems.forEach((item, index) => {
            item.classList.add('note-item-animate');
            item.style.animationDelay = `${index * 0.1}s`;
        });
        
        console.log('Notes updated with animation');
    })
    .catch(error => {
        console.error('Error updating notes:', error);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        notesBlock.innerHTML = originalContent;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏
function editNoteTitle(noteIndex, currentTitle) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const modalContent = `
        <div class="edit-note-modal">
            <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</h3>
            <div class="edit-note-form">
                <label for="edit-note-input">–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</label>
                <input type="text" id="edit-note-input" value="${currentTitle}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" maxlength="50">
                <div class="edit-note-buttons">
                    <button class="edit-note-save" onclick="saveNoteTitle(${noteIndex})">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button class="edit-note-cancel" onclick="closeEditModal()">‚ùå –û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>
    `;
    
    showModal(modalContent);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        const input = document.getElementById('edit-note-input');
        if (input) {
            input.focus();
            input.select();
        }
    }, 100);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('edit-note-input').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            saveNoteTitle(noteIndex);
        } else if (e.key === 'Escape') {
            closeEditModal();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
function saveNoteTitle(noteIndex) {
    const newTitle = document.getElementById('edit-note-input').value.trim();
    
    if (newTitle === '') {
        alert('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=edit_note_title&note_index=' + noteIndex + '&new_title=' + encodeURIComponent(newTitle)
    })
    .then(r => r.text())
    .then(response => {
        if (response === 'success') {
            closeEditModal();
            updateNotesInstantly();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function closeEditModal() {
    closeModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
function updateNotesInstantly() {
    console.log('updateNotesInstantly called');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    const notesBlock = document.getElementById('notes-block');
    if (!notesBlock) {
        console.log('notes-block not found');
        return;
    }
    
    console.log('Fetching updated notes...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=update_notes'
    })
    .then(r => {
        console.log('Response status:', r.status);
        return r.text();
    })
    .then(html => {
        console.log('Received HTML:', html);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏
        const oldNotes = notesBlock.querySelectorAll('.note-item');
        console.log('Removing', oldNotes.length, 'old notes');
        oldNotes.forEach(item => item.remove());
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        const newNoteItems = tempDiv.querySelectorAll('.note-item');
        console.log('Found', newNoteItems.length, 'new notes');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
        newNoteItems.forEach((item) => {
            const clonedItem = item.cloneNode(true);
            notesBlock.appendChild(clonedItem);
        });
        
        console.log('Notes updated successfully');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        fetch('', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: 'fast_action=get_notes_data'
        })
        .then(r => r.json())
        .then(data => {
            window.allNotes = data;
            console.log('Notes data updated in memory');
        });
    })
    .catch(error => {
        console.error('Error updating notes:', error);
    });
}

// Debug: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
if (window.allNotes) {
    window.allNotes.forEach((n, i) => {
        let plain = n.replace(/<[^>]+>/g, '\n');
        let lines = plain.split(/\n/).map(l => l.trim()).filter(Boolean);
        
        // –ò—â–µ–º –∏–º—è NPC –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
        let nameMatch = n.match(/<div class="npc-name-header">([^<]+)<\/div>/i);
        let headerMatch = n.match(/<div class="npc-modern-header">([^<]+)<\/div>/i);
        let nameLine = lines.find(l => /^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/i.test(l));
        
        let preview = '';
        if (nameMatch) {
            preview = nameMatch[1].trim();
        } else if (headerMatch) {
            preview = headerMatch[1].trim();
        } else if (nameLine) {
            let match = nameLine.match(/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:\s*(.+)$/i);
            preview = match ? match[2].trim() : nameLine;
        } else {
            // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
            for (let line of lines) {
                if (line && !/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è)/i.test(line)) {
                    preview = line;
                    break;
                }
            }
            if (!preview && lines.length) {
                preview = lines[0];
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        preview = preview.replace(/^–æ–ø–∏—Å–∞–Ω–∏–µ\s+/i, '').replace(/^\s*‚Äî\s*/, '').replace(/^npc\s+/i, '');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è
        if (nameMatch || headerMatch) {
            let words = preview.split(/\s+/);
            if (words.length > 1) {
                preview = words[0];
            }
        }
        
        console.log('–ó–∞–º–µ—Ç–∫–∞', i, '–ø—Ä–µ–≤—å—é:', preview || '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    });
}
// --- –ß–∞—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
document.querySelector('form').onsubmit = function(e) {
    e.preventDefault();
    var msg = this.message.value.trim();
    if (!msg) return false;
    fetch('ai.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'prompt=' + encodeURIComponent(msg) + '&type=chat'
    })
    .then(r => r.json())
    .then(data => {
        if (data && data.result) {
            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            location.reload();
        } else {
            alert(data.error || '–û—à–∏–±–∫–∞ AI');
        }
    });
    return false;
};

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('welcome') === '1') {
            showWelcomeMessage();
        }

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        document.addEventListener('keydown', function(e) {
            // Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é AI —á–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π —Ñ–æ—Ä–º—ã
                if (typeof sendAIMessage === 'function') {
                    sendAIMessage();
                } else {
                    document.getElementById('chatForm').submit();
                }
            }
            
            // F1 –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π
            if (e.key === 'F1') {
                e.preventDefault();
                openDiceStep1();
            }
            
            // F2 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            if (e.key === 'F2') {
                e.preventDefault();
                openCharacterModal();
            }
            
            // F4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
            if (e.key === 'F4') {
                e.preventDefault();
                openEnemyModal();
            }
            
            // F3 –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
            if (e.key === 'F3') {
                e.preventDefault();
                openInitiativeModal();
            }
            
            // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            if (e.key === 'Escape') {
                const modal = document.getElementById('modal-bg');
                if (modal && modal.classList.contains('active')) {
                    closeModal();
                }
            }
        });
        
        // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–µ–∫—Ü–∏–π ---
        function toggleSection(headerElement) {
            const contentElement = headerElement.nextElementSibling;
            const isCollapsed = headerElement.classList.contains('collapsed');
            
            if (isCollapsed) {
                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                headerElement.classList.remove('collapsed');
                contentElement.classList.remove('collapsed');
            } else {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                headerElement.classList.add('collapsed');
                contentElement.classList.add('collapsed');
            }
        }
        
        // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
        function toggleTechnicalParams(headerElement) {
            toggleSection(headerElement);
        }
        

        // --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∏ ---
        function saveEnemyToNotes(enemyData) {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            const noteContent = `
                <div class="enemy-note">
                    <div class="enemy-note-title">${enemyData.name}</div>
                    <div class="enemy-note-info">
                        <div><strong>–¢–∏–ø:</strong> ${enemyData.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>

                        <div><strong>CR:</strong> ${enemyData.challenge_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                        <div><strong>–•–∏—Ç—ã:</strong> ${enemyData.hit_points || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                        <div><strong>–ö–î:</strong> ${enemyData.armor_class || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                                <div><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${enemyData.speed || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                        ${enemyData.environment ? `<div><strong>–°—Ä–µ–¥–∞:</strong> ${enemyData.environment}</div>` : ''}
                        <div><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></div>
                        <div style="margin-left: 20px;">
                            <div>–°–ò–õ: ${enemyData.abilities?.str || '0'}</div>
                            <div>–õ–û–í: ${enemyData.abilities?.dex || '0'}</div>
                            <div>–¢–ï–õ: ${enemyData.abilities?.con || '0'}</div>
                            <div>–ò–ù–¢: ${enemyData.abilities?.int || '0'}</div>
                            <div>–ú–î–†: ${enemyData.abilities?.wis || '0'}</div>
                            <div>–•–ê–†: ${enemyData.abilities?.cha || '0'}</div>
                        </div>
                        ${enemyData.actions && enemyData.actions.length > 0 ? `<div><strong>–î–µ–π—Å—Ç–≤–∏—è:</strong> ${enemyData.actions.map(action => typeof action === 'string' ? action : (action.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')).join(', ')}</div>` : ''}
                        ${enemyData.special_abilities && enemyData.special_abilities.length > 0 ? `<div><strong>–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong> ${enemyData.special_abilities.map(ability => typeof ability === 'string' ? ability : (ability.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å')).join(', ')}</div>` : ''}
                        ${enemyData.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${enemyData.description}</div>` : ''}
                        ${enemyData.tactics ? `<div><strong>–¢–∞–∫—Ç–∏–∫–∞:</strong> ${enemyData.tactics}</div>` : ''}
                    </div>
                </div>
            `;
            
            fetch('', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(enemyData.name)
            })
            .then(r => r.text())
            .then(() => {
                alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ' + enemyData.name + ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞–º–µ—Ç–∫–∏!');
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
            });
        }

        // --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∏ ---
        function saveEnemyGroupToNotes(groupData) {
            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
            const promises = [];
            
            groupData.group_info.individual_enemies.forEach((enemy, index) => {
                const noteContent = `
                    <div class="enemy-note">
                        <div class="enemy-note-title">${enemy.name}</div>
                        <div class="enemy-note-info">
                            <div><strong>–¢–∏–ø:</strong> ${enemy.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div><strong>CR:</strong> ${enemy.challenge_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div><strong>–•–∏—Ç—ã:</strong> ${enemy.hit_points || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                            <div><strong>–ö–î:</strong> ${enemy.armor_class || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${enemy.speed || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                            ${enemy.environment ? `<div><strong>–°—Ä–µ–¥–∞:</strong> ${enemy.environment}</div>` : ''}
                            <div><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></div>
                            <div style="margin-left: 20px;">
                                <div>–°–ò–õ: ${enemy.abilities?.str || '0'}</div>
                                <div>–õ–û–í: ${enemy.abilities?.dex || '0'}</div>
                                <div>–¢–ï–õ: ${enemy.abilities?.con || '0'}</div>
                                <div>–ò–ù–¢: ${enemy.abilities?.int || '0'}</div>
                                <div>–ú–î–†: ${enemy.abilities?.wis || '0'}</div>
                                <div>–•–ê–†: ${enemy.abilities?.cha || '0'}</div>
                            </div>
                            ${enemy.actions && enemy.actions.length > 0 ? `<div><strong>–î–µ–π—Å—Ç–≤–∏—è:</strong> ${enemy.actions.map(action => typeof action === 'string' ? action : (action.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')).join(', ')}</div>` : ''}
                            ${enemy.special_abilities && enemy.special_abilities.length > 0 ? `<div><strong>–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong> ${enemy.special_abilities.map(ability => typeof ability === 'string' ? ability : (ability.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å')).join(', ')}</div>` : ''}
                            ${enemy.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${enemy.description}</div>` : ''}
                            ${enemy.tactics ? `<div><strong>–¢–∞–∫—Ç–∏–∫–∞:</strong> ${enemy.tactics}</div>` : ''}
                        </div>
                    </div>
                `;
                
                const promise = fetch('', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(enemy.name)
                }).then(r => r.text());
                
                promises.push(promise);
            });
            
            // –ñ–¥–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
            Promise.all(promises)
                .then(() => {
                    alert(`–ì—Ä—É–ø–ø–∞ –∏–∑ ${groupData.count} –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ "${groupData.base_name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∑–∞–º–µ—Ç–∫–∏!`);
                })
                .catch(error => {
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: ' + error.message);
                });
        }

        // --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∏ ---
        function saveAllEnemiesToNotes(enemies) {
            const promises = [];
            
            enemies.forEach(enemy => {
                if (enemy.is_group && enemy.count > 1) {
                    // –î–ª—è –≥—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
                    enemy.group_info.individual_enemies.forEach(individualEnemy => {
                        const noteContent = `
                            <div class="enemy-note">
                                <div class="enemy-note-title">${individualEnemy.name}</div>
                                <div class="enemy-note-info">
                                    <div><strong>–¢–∏–ø:</strong> ${individualEnemy.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                    <div><strong>CR:</strong> ${individualEnemy.challenge_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                    <div><strong>–•–∏—Ç—ã:</strong> ${individualEnemy.hit_points || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                                    <div><strong>–ö–î:</strong> ${individualEnemy.armor_class || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                    <div><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${individualEnemy.speed || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                                    ${individualEnemy.environment ? `<div><strong>–°—Ä–µ–¥–∞:</strong> ${individualEnemy.environment}</div>` : ''}
                                    <div><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></div>
                                    <div style="margin-left: 20px;">
                                        <div>–°–ò–õ: ${individualEnemy.abilities?.str || '0'}</div>
                                        <div>–õ–û–í: ${individualEnemy.abilities?.dex || '0'}</div>
                                        <div>–¢–ï–õ: ${individualEnemy.abilities?.con || '0'}</div>
                                        <div>–ò–ù–¢: ${individualEnemy.abilities?.int || '0'}</div>
                                        <div>–ú–î–†: ${individualEnemy.abilities?.wis || '0'}</div>
                                        <div>–•–ê–†: ${individualEnemy.abilities?.cha || '0'}</div>
                                    </div>
                                    ${individualEnemy.actions && individualEnemy.actions.length > 0 ? `<div><strong>–î–µ–π—Å—Ç–≤–∏—è:</strong> ${individualEnemy.actions.map(action => typeof action === 'string' ? action : (action.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')).join(', ')}</div>` : ''}
                                    ${individualEnemy.special_abilities && individualEnemy.special_abilities.length > 0 ? `<div><strong>–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong> ${individualEnemy.special_abilities.map(ability => typeof ability === 'string' ? ability : (ability.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å')).join(', ')}</div>` : ''}
                                    ${individualEnemy.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${individualEnemy.description}</div>` : ''}
                                    ${individualEnemy.tactics ? `<div><strong>–¢–∞–∫—Ç–∏–∫–∞:</strong> ${individualEnemy.tactics}</div>` : ''}
                                </div>
                            </div>
                        `;
                        
                        const promise = fetch('', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                            body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(individualEnemy.name)
                        }).then(r => r.text());
                        
                        promises.push(promise);
                    });
                } else {
                    // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                    const noteContent = `
                        <div class="enemy-note">
                            <div class="enemy-note-title">${enemy.name}</div>
                            <div class="enemy-note-info">
                                <div><strong>–¢–∏–ø:</strong> ${enemy.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                <div><strong>CR:</strong> ${enemy.challenge_rating || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                <div><strong>–•–∏—Ç—ã:</strong> ${enemy.hit_points || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                                <div><strong>–ö–î:</strong> ${enemy.armor_class || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                <div><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${enemy.speed || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                                ${enemy.environment ? `<div><strong>–°—Ä–µ–¥–∞:</strong> ${enemy.environment}</div>` : ''}
                                <div><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></div>
                                <div style="margin-left: 20px;">
                                    <div>–°–ò–õ: ${enemy.abilities?.str || '0'}</div>
                                    <div>–õ–û–í: ${enemy.abilities?.dex || '0'}</div>
                                    <div>–¢–ï–õ: ${enemy.abilities?.con || '0'}</div>
                                    <div>–ò–ù–¢: ${enemy.abilities?.int || '0'}</div>
                                    <div>–ú–î–†: ${enemy.abilities?.wis || '0'}</div>
                                    <div>–•–ê–†: ${enemy.abilities?.cha || '0'}</div>
                                </div>
                                ${enemy.actions && enemy.actions.length > 0 ? `<div><strong>–î–µ–π—Å—Ç–≤–∏—è:</strong> ${enemy.actions.map(action => typeof action === 'string' ? action : (action.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')).join(', ')}</div>` : ''}
                                ${enemy.special_abilities && enemy.special_abilities.length > 0 ? `<div><strong>–û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong> ${enemy.special_abilities.map(ability => typeof ability === 'string' ? ability : (ability.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å')).join(', ')}</div>` : ''}
                                ${enemy.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${enemy.description}</div>` : ''}
                                ${enemy.tactics ? `<div><strong>–¢–∞–∫—Ç–∏–∫–∞:</strong> ${enemy.tactics}</div>` : ''}
                            </div>
                        </div>
                    `;
                    
                    const promise = fetch('', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                        body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(enemy.name)
                    }).then(r => r.text());
                    
                    promises.push(promise);
                }
            });
            
            // –ñ–¥–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
            Promise.all(promises)
                .then(() => {
                    alert(`–í—Å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ (${enemies.length} –≥—Ä—É–ø–ø) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞–º–µ—Ç–∫–∏!`);
                })
                .catch(error => {
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
                });
        }

// --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∑–∞–º–µ—Ç–æ–∫ ---
function addFromNotes(type) {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    const notes = <?php echo json_encode($_SESSION['notes'] ?? []); ?>;
    const characterNotes = [];
    const enemyNotes = [];
    
    notes.forEach((note, index) => {
        if (note.includes('character-note-title')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            const nameMatch = note.match(/<div class="character-note-title">([^<]+)<\/div>/);
            const raceMatch = note.match(/–†–∞—Å–∞:\s*([^<]+)/);
            const classMatch = note.match(/–ö–ª–∞—Å—Å:\s*([^<]+)/);
            const levelMatch = note.match(/–£—Ä–æ–≤–µ–Ω—å:\s*(\d+)/);
            const initiativeMatch = note.match(/–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:\s*([^<]+)/);
            
            if (nameMatch) {
                characterNotes.push({
                    index: index,
                    name: nameMatch[1].trim(),
                    race: raceMatch ? raceMatch[1].trim() : '',
                    class: classMatch ? classMatch[1].trim() : '',
                    level: levelMatch ? levelMatch[1] : '',
                    initiative: initiativeMatch ? initiativeMatch[1].trim() : '0'
                });
            }
        } else if (note.includes('enemy-note-title')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            const nameMatch = note.match(/<div class="enemy-note-title">([^<]+)<\/div>/);
            const typeMatch = note.match(/–¢–∏–ø:\s*([^<]+)/);
            const crMatch = note.match(/CR:\s*([^<]+)/);
            const initiativeMatch = note.match(/–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:\s*([^<]+)/);
            
            if (nameMatch) {
                enemyNotes.push({
                    index: index,
                    name: nameMatch[1].trim(),
                    type: typeMatch ? typeMatch[1].trim() : '',
                    cr: crMatch ? crMatch[1].trim() : '',
                    initiative: initiativeMatch ? initiativeMatch[1].trim() : '0'
                });
            }
        }
    });
    
    const notesToShow = type === 'player' ? characterNotes : enemyNotes;
    
    if (notesToShow.length === 0) {
        alert('–í –∑–∞–º–µ—Ç–∫–∞—Ö –Ω–µ—Ç ' + (type === 'player' ? '–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π' : '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤') + ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        return;
    }
    
    let notesHtml = '<div class="notes-selection">';
    notesHtml += '<div class="notes-title">–í—ã–±–µ—Ä–∏—Ç–µ ' + (type === 'player' ? '–ø–µ—Ä—Å–æ–Ω–∞–∂–∞' : '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞') + ' –∏–∑ –∑–∞–º–µ—Ç–æ–∫:</div>';
    notesHtml += '<div class="notes-list">';
    
    notesToShow.forEach(note => {
        const displayName = type === 'player' ? 
            `${note.name} (${note.race} ${note.class} ${note.level} —É—Ä.)` :
            `${note.name} (${note.type} CR ${note.cr})`;
        
        notesHtml += `
            <div class="note-item" onclick="selectFromNotes('${note.name.replace(/'/g, "\\'")}', '${note.initiative}', '${type}')">
                <div class="note-name">${displayName}</div>
                <div class="note-initiative">–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ${note.initiative}</div>
            </div>
        `;
    });
    
    notesHtml += '</div>';
    notesHtml += '<div class="notes-buttons">';
    notesHtml += '<button class="cancel-btn" onclick="openInitiativeModal()">–û—Ç–º–µ–Ω–∞</button>';
    notesHtml += '</div>';
    notesHtml += '</div>';
    
    showModal(notesHtml);
    document.getElementById('modal-save').style.display = 'none';
}

// --- –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ ---
function selectFromNotes(name, initiative, type) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
    const nameField = document.getElementById('initiative-name');
    const valueField = document.getElementById('initiative-value');
    
    if (nameField && valueField) {
        nameField.value = name;
        valueField.value = initiative;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
        addInitiativeEntry(type);
    } else {
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º
        addInitiativeEntry(type);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
        setTimeout(() => {
            const nameField = document.getElementById('initiative-name');
            const valueField = document.getElementById('initiative-value');
            if (nameField && valueField) {
                nameField.value = name;
                valueField.value = initiative;
            }
        }, 100);
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è ---
function toggleSpellDetails(header) {
    const details = header.nextElementSibling;
    const toggle = header.querySelector('.spell-toggle');
    
    if (details.style.display === 'none') {
        details.style.display = 'block';
        toggle.textContent = '‚ñ≤';
    } else {
        details.style.display = 'none';
        toggle.textContent = '‚ñº';
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—Ä–æ—Å–∫–æ–≤ —Å–ø–∞—Å–µ–Ω–∏—è ---
function toggleSavingThrows(header) {
    const content = header.nextElementSibling;
    const toggle = header.querySelector('.toggle-icon');
    
    if (content.style.display === 'none') {
        content.style.display = 'block';
        toggle.textContent = '‚ñ≤';
    } else {
        content.style.display = 'none';
        toggle.textContent = '‚ñº';
    }
}

// --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∏ ---
function saveAllEnemiesToNotes(enemies) {
    if (!enemies || enemies.length === 0) {
        alert('–ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    let savedCount = 0;
    const totalCount = enemies.length;
    
    enemies.forEach((enemy, index) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é saveEnemyToNotes –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        saveEnemyToNotes(enemy);
        savedCount++;
        
        if (savedCount === totalCount) {
            setTimeout(() => {
                alert(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∏!`);
            }, 100);
        }
    });
}
</script>

<script>
// –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG –∏–∫–æ–Ω–æ–∫
(function() {
    'use strict';
    
    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ SVG –∏–∫–æ–Ω–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ icons
    const icons = {
        dice: `<svg viewBox="0 0 512 512" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M248 20.3L72 132.6l176-3.8V20.3zm16 0v108.5l175.7 3.8L264 20.3zm43.1 49.97c2.8.06 5.8.75 9.2 2.08 2.3.91 4.1 1.91 5.6 3.07 1.5 1.15 2.8 2.5 3.7 3.79 1.5 2.06 2.2 4.04 2.6 6.25 2.4-1.77 5.2-2.98 8.2-3.84 3.4-.73 7.2-.35 11.1 1.23 4.6 1.82 8.1 4.19 10.3 7.11 2.2 2.93 3.5 5.97 4 9.13.3 1.71.3 3.41.1 5.01-.1 1.7-.6 3.3-1.2 4.7-.5 1.5-1.2 3-2.3 4.3-1 1.3-2.1 2.6-3.5 3.6-2.5 2-5.5 3.3-9.1 3.9-3.6.6-7.7 0-12.3-1.8-4-1.6-7-3.8-9-6.7-1.6-2.6-2.9-5.5-3.4-8.4-2 1.5-4.2 2.5-6.9 2.9-3 .6-6.5 0-10.7-1.6-2.4-1-4.5-2.1-6.2-3.3-1.8-1.3-3.2-2.61-4.3-4.08-2.1-2.58-3.2-5.37-3.5-8.35-.2-2.9.2-5.65 1.1-8.15.5-1.29 1.3-2.57 2.1-3.92 1-1.1 2-2.21 3.1-3.26 2.4-1.77 5.2-2.97 8.5-3.53.9-.12 1.8-.17 2.8-.14zM208 75.56c4.8.05 10.9 3.57 9 10.04-4 6.9-10.3 12.17-18 14.8-7.4 2.5-15 4.4-22 1.9-3-2.3-13-9.4-15-3.4-1.2 15.3 1 13-11 17.8V92.3c10-3.9 21-4.5 31 1.3 8 4.2 19 1.5 24-5.8 1-6.5-8-4.5-12-3.3-3-8.3 7.8-8.43 13-8.9.3-.03.6-.04 1-.04zm100.5 4.46c-.9.01-1.8.14-2.8.36-2.4.61-4.2 2.17-5.1 4.67-1 2.42-.8 4.74.6 6.88 1.4 2.22 3.3 3.73 6 4.78 2.9 1.15 5.4 1.41 8 .73 2.5-.56 4.3-2.12 5.2-4.54 1-2.5.8-4.82-.7-7.01-1.4-2.14-3.5-3.77-6.4-4.92-1.6-.66-3.2-.96-4.8-.95zm28.9 10.15c-1.1.05-2.2.27-3.2.65-2.7 1.17-4.5 2.96-5.4 5.39-1 2.5-.9 5.09.4 7.59 1.2 2.6 3.6 4.6 7.2 6.1 2.9 1.1 5.8 1.3 8.6.6 2.8-.8 4.7-2.7 5.8-5.6 1.1-2.9 1.1-5.53-.5-8.01-1.5-2.47-3.7-4.37-6.6-5.51-2.3-.9-4.4-1.29-6.3-1.21zM242 144.9L55 149l72 192.9 115-197zm28 0l115.4 197L456.6 149 270 144.9zm-14 7.5L139 352.6h234.1L256 152.4zm116.6 16.4l19.2 42.5 7.2-3.3 4.1 9.2-7.1 3.2 6.3 14-10.4 4.7-6.3-14-30.2 13.6-3.9-8.7c1.4-9.2 4.4-27.8 8.9-55.7l1.8-.8.8-.3 3.1-1.5 6.5-2.9zm-225.9 12.1h1.3c2.9 0 5.5.5 7.8 1.6 6.9 3.2 10.7 8.4 11.7 15.3.9 6.9-1 15.3-5.7 25.1-4.7 9.7-10 16.5-15.8 20.3-6 3.8-12.3 4.1-19.1 1-5.9-2.8-9.4-6.7-10.6-11.9-1.2-5.3-.9-9.7.9-13.5l9.6 4.4c-.9 1.7-1.1 3.8-.8 6.3.3 2.6 1.9 4.5 5 6 3.1 1.4 6.1 1.3 9.2-.2 3.1-1.4 6.3-5.2 9.7-11.3.5-1 1.1-2.1 1.7-3.3-1.8 1.2-3.6 2-5.5 2.6-3.2.9-6.6.5-10.3-1.2-4.3-2-7.5-5.5-9.5-10.6-2.1-5-1.5-10.7 1.6-17.2l.1-.1c1.1-2.3 2.4-4.4 4-6 1.4-1.7 3.1-3.1 4.8-4.2 3.1-1.9 6.4-3 9.9-3.1zM52 186v173.2l62-5.7L52 186zm408 0l-61.9 167.5 61.9 5.7V186zm-91.9.6c-1.6 9.7-3.6 22.5-6.2 38.2l19.6-8.8-8.2-17.9-5.2-11.5zm-219.7 4.1c-1.5.1-2.9.4-4.3 1.1-3 1.4-5.1 3.5-6.5 6.5-1.6 3.4-2.1 6.5-1.2 9.6.9 3 2.7 5.1 5.4 6.4 2.8 1.3 5.7 1.3 8.5 0s5.1-3.6 6.8-7c1.4-2.9 1.7-5.9 1-9-.8-3.1-2.6-5.3-5.4-6.6-1.4-.7-2.9-1-4.3-1zm103.2 47.7h15.6v84.2h-15.6v-70.2c-8.8 5.8-15.3 9.6-19.4 11.2l-6.3 2.8v-14l6.3-2.8c4.1-1.8 10.6-5.4 19.4-11.2zm201.7 6.2h.5c3.6.3 5.7 7 4.7 11.1-.1 18.6 1.1 39.2-9.7 55.3-.9 1.2-2.2 1.9-3.7 2.5-5.8-4.1-3-11.3 1.2-15.5 1 7.3 5.5-2.9 6.6-5.6 1.3-3.2 3.6-17.7-1-10.2.7 4-6.8 13.1-9.3 8.1-5-14.4 0-30.5 7-43.5 1.3-1.4 2.5-2.1 3.7-2.2zm-393.3.9c1 .1 1 1 2 3.6v61.1c-7-7-3-17.4-4-26.4-1-7.6 2-16.3-1-23.2-5-1.7-6-17-3-12.7 4 4.8 4-2.7 6-2.4zm390.9 10.6c-1 0-2 1-2.8 3.7-1.6 5.9-3.3 13.4-.7 19.3 5.1-2 5.4-9.6 6.6-14.5 1.2-3.3-.9-8.4-3.1-8.5zM75 268.2c4-.5 7 7.2 9 10.8 3.28 12.7 4.21 13.9 3 16.8-5-3.7-4.87-7.4-5.36-8.9-1-3-1.64-5.3-3.64-8.4-3.34 2.8-3 9.1-3 13.4 0-1.6 1-2.3 4-.7 7 12.6 12 29.1 7 43.5l-2 1.1c-11-5.8-12-19.4-14-30-1-12.3-1-24.7 2-36.7 1-.6 2-.9 3-.9zm358.2 4.8c4.5.3.8 35.2.8 55l-4.4 6.7v-42.3c-4.6 7.5-9.1 9.1-6.1-.9 4.9-13.4 7.9-18.6 9.7-18.5zM77 299.2c-4 4.7-2 12.8-1 18.4 2 5.5 7 10.2 6 1.6 0-5.7 1-11.8-3-16.4 0-.6-1-1.9-2-3.6zm66 69.4l113 123.1 112.8-123.1H143zm-21 .3l-54 4.9 64 41.1c-2-2.7-5-5.7-7-8.8-5-6.9-10-13.6-19-16.6-9-6.5-4-5.3 3-2.6-1-1.8-1-2.6 0-2.6 2-.2 9 4.2 10 6.3l25 31.6 65 41.7-87-95zm268.2 0l-42.4 46.3c6.4-3.1 11.3-8.5 17-12.4 2.4-1.4 3.7-1.9 4.3-1.9 2.1 0-5.4 7.1-7.7 10.3-9.4 9.8-16 23-28.6 29.1l18.9-24.5c-2.3 1.3-6 3.2-8.2 4.1l-40.3 44 74.5-47.6c5.4-6.7 1.9-5.6-5.7-.9l-11.4 6c11.4-13.7 26.8-23.6 40-35.6 3.2-1.5 9.5-5.6 11-5.7.8-.1.2 1-2.8 4.2l-12.6 16c10-7.6.9 3.9-4.5 5.5-.7 1-1.4 2-2.2 2.9l54.5-34.9-53.8-4.9zm-158.3 16.7c1.4 0 2.7.1 4.1.2v43.4h-13v-30c-5-1.4-11 1.7-16-.3-4-2.9 1-6.8 5-5.9 3-.1 7 .2 9-3.2 3.4-3.1 7-4.2 10.9-4.2zm33.1.7s1 .1 1 .2c4 .8 7 .3 10 .4h25.6c1.5 3 .8 7.8-3.3 7.9-3.9.5-7.8-.4-11.7.2-4.7.2-9.6-1.8-14.6.4-3 1.7-4 8.5 1 6.1 4-1.1 7.3-1.8 10.8-.9 7 1.1 15 2.9 19.1 9.2 2.1 3.1 2.7 7.3.7 10.7-3.6 6.5-11.6 8.4-18.3 9.7-2.4.4-4.7 1.4-7.3 1.2-7-.6-15-1.1-20-7.1-3-2.5-3-7.1 2-6.7 3-.1 8-.4 10 3.5 3 3.7 9 3 13 2 3.6-.5 7.5-2.6 7.6-6.7.6-4.2-3.1-7.2-6.9-7.8-5.7-2.3-11.7 1.4-17.7 1.8-3 1.1-9 .5-9-4.4 1-4.2 3-8.1 3-12.5 0-3 2-7 5-7.2zm133.5 5c-.2-.2-7 5.8-9.9 8.1l-15.8 13.1c8.6-4.4 16.5-9.6 22.3-17.4 2.6-2.6 3.5-3.7 3.4-3.8zM151 405.5c3 0 8 4.6 10 7l26 31.1c-8-2.1-13-7.1-18-13.7-6-7.3-11-16.6-21-19.6-9-5-5-6.4 2-2.2 0-1.9 0-2.6 1-2.6z"/>
</svg>`,
        hero: `<svg viewBox="0 0 512 512" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M387.366,317.875c0,0,0.014-0.014,0.027-0.014l-0.04,0.014H387.366z"/>
  <path d="M401.674,301.43c0,0,0,0.027-0.013,0.034l0.027-0.054C401.688,301.417,401.688,301.423,401.674,301.43z"/>
  <path d="M395.683,246.881l0.23,0.237l-0.257-0.271C395.669,246.861,395.683,246.867,395.683,246.881z"/>
  <path d="M383.565,264.219c-0.771-1.095-1.677-1.941-3.002-2.684c-1.745-0.98-4.382-1.758-8.317-1.941v-0.007c-7.763-0.054-15.133-2.272-22.22-5.632c-7.14-3.415-14.065-7.993-21.057-12.963c-13.956-9.96-28.238-21.503-44.169-28.996c-10.616-5.004-21.882-8.236-34.432-8.236c-18.771,0-34.838,7.29-49.85,16.872c-15.011,9.554-28.684,21.327-42.708,29.549c-9.291,5.41-18.907,9.332-29.307,9.406v0.007c-2.934,0.142-5.166,0.608-6.829,1.251c-1.664,0.649-2.759,1.426-3.651,2.36c-1.758,1.819-2.881,4.788-3.422,9.189c-0.352,2.908-0.446,6.316-0.446,10.056c-0.014,5.477,0.446,9.812,1.595,12.868c1.19,3.064,2.732,5.031,6.114,6.938c1.46,0.805,3.353,1.528,5.626,2.164l2.299-0.805c0.176,0.501,0.379,0.988,0.555,1.481l1.271,0.271c11.793,2.143,35.013,4.233,58.383,5.741c23.397,1.514,47.158,2.482,60.371,2.482c13.227,0,36.988-0.967,60.385-2.482c23.383-1.508,46.59-3.598,58.396-5.741c0.46-0.082,0.825-0.197,1.271-0.285c0.176-0.493,0.379-0.974,0.542-1.467l2.326,0.818c4.03-1.122,6.694-2.57,8.426-4.145c2.259-2.063,3.462-4.524,4.22-8.452c0.473-2.59,0.663-5.741,0.663-9.386c0-4.206-0.108-8-0.596-11.117C385.54,268.202,384.701,265.848,383.565,264.219z M131.761,290.063c-4.666,0-8.452-3.787-8.452-8.46c0-4.679,3.787-8.466,8.452-8.466c4.68,0,8.466,3.786,8.466,8.466C140.227,286.277,136.441,290.063,131.761,290.063z M172.536,296.352c-6.6-0.203-12.888-0.507-18.636-0.913v-29.591c6.451-2.846,12.591-6.504,18.636-10.562V296.352z M216.097,297.217c-5.896-0.047-12.144-0.108-18.582-0.257v-59.594c6.032-4.267,12.186-8.324,18.582-11.779V297.217z M259.699,297.319h-18.636v-80.617c3.056-0.508,6.154-0.758,9.291-0.758c3.205,0,6.302,0.25,9.345,0.758V297.319z M303.259,296.961c-6.45,0.149-12.739,0.21-18.636,0.257v-71.63c6.397,3.401,12.591,7.512,18.636,11.779V296.961z M346.82,295.439c-5.747,0.406-12.036,0.71-18.582,0.913v-41.066c6.032,4.058,12.186,7.716,18.582,10.562V295.439z M368.987,290.063c-4.666,0-8.453-3.787-8.453-8.46c0-4.679,3.787-8.466,8.453-8.466s8.452,3.786,8.452,8.466C377.439,286.277,373.652,290.063,368.987,290.063z"/>
  <path d="M189.333,325.401c-20.746-1.352-41.154-3.103-54.461-5.064c5.342,11.637,11.942,22.47,18.609,32.89c8.993,14.092,18.135,27.42,24.167,41.356l-9.318,4.024c-2.489-5.782-5.707-11.651-9.318-17.67c-0.284,5.937-0.893,12.28-2.015,18.562c-1.65,9.108-4.274,18-8.723,25.114c-0.69,1.095-1.447,2.13-2.232,3.144c2.036,2.408,6.316,6.174,12.293,10.17c5.992,4.023,13.714,8.364,22.843,12.354c18.257,7.972,42.114,14.512,69.175,14.512h0.852c40.586,0.02,74.017-14.762,92.018-26.866c5.653-3.767,9.71-7.296,11.861-9.717c-0.933-1.136-1.812-2.34-2.61-3.598c-2.975-4.74-5.112-10.278-6.708-16.128c-2.435-8.973-3.611-18.724-4.044-27.534c-3.597,6.011-6.816,11.881-9.304,17.656l-9.318-4.024c6.031-13.937,15.174-27.264,24.167-41.356c6.667-10.42,13.267-21.253,18.609-32.89c-13.294,1.961-33.716,3.719-54.475,5.064c-20.895,1.352-41.924,2.259-55.949,2.448v113.582h-10.157V327.849C231.271,327.66,210.241,326.754,189.333,325.401z"/>
  <path d="M364.551,439.713c-0.582-0.244-1.082-0.588-1.623-0.872c-3.056,3.469-7.709,7.418-14.052,11.679c-6.518,4.374-14.754,8.993-24.424,13.226c-19.367,8.446-44.535,15.35-73.247,15.357h-0.852c-43.088-0.027-78.128-15.485-97.671-28.583c-6.505-4.376-11.279-8.433-14.322-11.976c-0.704,0.412-1.393,0.844-2.151,1.169c-5.869,2.482-10.13,5.389-12.739,8.284c-2.624,2.928-3.665,5.639-3.692,8.568c0,3.245,1.447,7.262,5.355,11.935c3.882,4.652,10.144,9.784,18.974,14.951c14.024,8.25,34.635,15.506,54.692,20.563c20.029,5.078,39.707,8,51.567,7.986c11.874,0.013,31.538-2.908,51.581-7.986c20.056-5.058,40.666-12.314,54.691-20.563c8.831-5.166,15.093-10.306,18.988-14.951c3.895-4.68,5.342-8.69,5.342-11.935c-0.027-2.928-1.068-5.64-3.679-8.568C374.667,445.103,370.407,442.195,364.551,439.713z"/>
  <path d="M196.299,96.535c-1.623-1.535-3.462-3.428-5.315-5.504c-1.042,2.204-1.934,5.355-1.921,8.749c0,3.023,0.65,6.208,2.408,9.42c1.217,2.204,3.029,4.45,5.599,6.647c14.606-6.836,30.808-10.968,48.226-11.637V20.306h10.157v83.903c17.419,0.67,33.621,4.801,48.227,11.637c2.556-2.197,4.382-4.443,5.599-6.647c1.758-3.212,2.407-6.397,2.407-9.42c0.027-3.36-0.879-6.518-1.893-8.716c-1.867,2.096-3.719,3.922-5.342,5.471c-2.069,1.968-3.8,3.59-4.49,4.429l-7.804-6.492c1.501-1.771,3.286-3.367,5.288-5.281c1.988-1.886,4.125-4.016,6.086-6.39c3.922-4.808,6.951-10.36,6.951-17.203c-0.014-4.382-1.285-9.602-4.841-15.803c-1.488,2.813-3.408,5.558-5.829,8.189l-7.506-6.83c5.003-5.545,6.775-10.643,6.802-15.539c0-4.233-1.42-8.52-4.125-12.706s-6.681-8.189-11.441-11.624C274.034,4.402,261.376-0.034,250.367,0c-8.236-0.014-17.432,2.448-25.52,6.62c-8.088,4.146-15.039,10.014-19.083,16.29c-2.704,4.186-4.125,8.472-4.125,12.706c0.014,4.896,1.799,9.994,6.803,15.539l-7.52,6.83c-2.394-2.63-4.341-5.376-5.815-8.189c-3.557,6.201-4.842,11.421-4.842,15.803c0,5.159,1.704,9.514,4.219,13.457c2.502,3.928,5.842,7.303,8.818,10.136c1.988,1.914,3.786,3.51,5.287,5.281l-7.803,6.492C200.099,100.125,198.367,98.503,196.299,96.535z"/>
  <path d="M128.164,245.285h0.108c5.883,0,11.821-1.677,18.082-4.659c6.248-2.969,12.739-7.222,19.528-12.064c13.619-9.677,28.346-21.692,45.725-29.909c11.59-5.463,24.438-9.21,38.76-9.21c21.517,0,39.572,8.412,55.327,18.467c15.756,10.076,29.496,21.862,42.37,29.34c8.574,5.018,16.594,8.047,24.425,8.034h0.108l0.122,0.007c0.77,0.034,1.433,0.176,2.164,0.25c-2.083-31.707-14.795-62.583-35.311-85.884c-21.99-24.966-52.676-41.269-89.205-41.282c-36.515,0.013-67.214,16.316-89.204,41.282c-20.488,23.282-33.188,54.143-35.284,85.83c0.717-0.068,1.407-0.162,2.151-0.196L128.164,245.285z"/>
</svg>`,
        enemy: `<svg viewBox="0 0 32 32" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M20.624 5.42c-0.707-0.58-1.541-1.011-2.519-1.267-0.187-0.231-0.411-0.43-0.663-0.588-0.623-1.288-1.424-2.596-1.424-2.596s-0.8 1.307-1.423 2.595c-0.215 0.135-0.41 0.299-0.578 0.487-1.162 0.232-2.132 0.695-2.939 1.351-6.017-0.988-11.433 5.057-9.516 11.428 0.771 2.562 4.546 4.208 6.506 3.134-3.694 0.006-4.792-4.007-3.65-6.791 0.73-1.779 2.011-2.784 3.783-2.794-0.587 2.2-0.797 4.817-0.797 7.625h4.405c-0.105 0.75-0.151 1.563-0.157 2.413-0.102 0.919 0.559 4.765 0.559 4.765s1.887-3.121 2.23-4.136c0.384 1.498 1.424 4.285 1.424 4.285s1.030-2.76 1.418-4.263c0.362 1.037 2.222 4.114 2.222 4.114s0.682-3.963 0.554-4.805c-0.007-0.836-0.053-1.635-0.157-2.374h4.372c0-2.808-0.21-5.425-0.796-7.624 1.841-0.041 3.168 0.969 3.917 2.793 1.142 2.784 0.045 6.797-3.65 6.791 1.96 1.073 5.735-0.572 6.506-3.134 1.929-6.41-3.566-12.49-9.627-11.409zM11.99 11.264c0.555 0.59 1.343 1.012 2.444 1.201 0 0.002 0 0.003 0 0.005 0 0.839-0.68 1.519-1.519 1.519s-1.519-0.68-1.519-1.519c0-0.491 0.233-0.928 0.595-1.205zM20.553 12.469c-0 0.839-0.68 1.519-1.519 1.519s-1.519-0.68-1.519-1.519c0-0.019 0.001-0.038 0.001-0.057 1.026-0.222 1.759-0.663 2.274-1.26 0.11 0.063 0.212 0.14 0.302 0.228l0.001 0.003c0.001-0 0.001-0.001 0.002-0.001 0.283 0.276 0.459 0.661 0.459 1.087zM7.131 28.033c-0.737 2.75 3.066 3.588 3.758 1.007 0.278-1.038-0.252-6.577-0.252-6.577s-3.228 4.532-3.506 5.57zM20.954 22.463c0 0-0.529 5.539-0.252 6.577 0.692 2.581 4.495 1.743 3.758-1.007-0.278-1.038-3.506-5.57-3.506-5.57zM17.467 23.943c0 0-1.025 3.982-0.942 4.772 0.207 1.964 3.080 1.79 2.859-0.302-0.083-0.79-1.917-4.47-1.917-4.47zM12.318 28.413c-0.221 2.092 2.652 2.266 2.859 0.302 0.083-0.79-0.942-4.772-0.942-4.772s-1.834 3.68-1.917 4.47z"/>
</svg>`,
        potion: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M10 9V6.82446C10.2515 6.93762 10.5295 7 10.8198 7H13.1802C13.4705 7 13.7485 6.93762 14 6.82446V9C14 9.55228 14.4477 10 15 10C18.3137 10 21 12.6863 21 16C21 19.3137 18.3137 22 15 22H9C5.68629 22 3 19.3137 3 16C3 12.6863 5.68629 10 9 10C9.55228 10 10 9.55228 10 9ZM16 2H15.7809C15.7832 0.921269 14.9075 0 13.7802 0H10.2198C9.09245 0 8.21684 0.92127 8.21913 2H8C7.44772 2 7 2.44772 7 3C7 3.55228 7.44772 4 8 4V8.06189C4.05369 8.55399 1 11.9204 1 16C1 20.4183 4.58172 24 9 24H15C19.4183 24 23 20.4183 23 16C23 11.9204 19.9463 8.55399 16 8.06189V4C16.5523 4 17 3.55228 17 3C17 2.44772 16.5523 2 16 2ZM10.2198 2L10.8198 5L13.1802 5L13.7802 2H10.2198ZM15.5 14.4999C14.4117 14.5668 13.3536 14.1606 12.2932 13.7535C11.371 13.3995 10.4471 13.0448 9.5 13C7.89583 12.9239 6.20559 13.609 5.17036 14.129C4.51271 14.4593 4.03027 15.0786 4.00339 15.814C4.00114 15.8757 4 15.9377 4 15.9999C4 18.7613 6.23858 20.9999 9 20.9999H15C17.7614 20.9999 20 18.7613 20 15.9999C20 15.6347 19.9608 15.2786 19.8865 14.9357C19.6683 13.9292 18.4938 13.6409 17.5283 13.9993C16.8742 14.2421 16.1303 14.4612 15.5 14.4999ZM9 16.5C9 17.3284 8.32843 18 7.5 18C6.67157 18 6 17.3284 6 16.5C6 15.6715 6.67157 15 7.5 15C8.32843 15 9 15.6715 9 16.5ZM12.5 19.75C13.1904 19.75 13.75 19.1903 13.75 18.5C13.75 17.8096 13.1904 17.25 12.5 17.25C11.8096 17.25 11.25 17.8096 11.25 18.5C11.25 19.1903 11.8096 19.75 12.5 19.75ZM17 17C17 17.5522 16.5523 18 16 18C15.4477 18 15 17.5522 15 17C15 16.4477 15.4477 16 16 16C16.5523 16 17 16.4477 17 17Z"/>
</svg>`,
        initiative: `<svg viewBox="-24.5 0 155 155" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M29.9801 99.6718C25.9694 111.25 21.7567 122.977 17.6831 134.318C16.1595 138.559 14.6381 142.8 13.1188 147.041C12.2587 149.449 11.5771 152.176 14.4031 154.081C15.1805 154.645 16.112 154.958 17.0735 154.98C18.8423 154.98 20.3793 153.811 21.708 152.537C24.2358 150.122 26.8472 147.704 29.375 145.368C35.0139 140.152 40.8474 134.759 46.1123 129.006C55.2428 119.03 64.1887 108.588 72.8407 98.4899C76.2831 94.4728 79.7325 90.4616 83.1865 86.4567C88.7696 80.0075 94.4195 73.4296 99.8834 67.0675L103.327 63.0589C105.009 61.1014 106.399 58.8998 105.19 56.0614C104.011 53.2953 101.56 52.8568 99.0901 52.7948C93.9814 52.6682 88.874 52.5313 83.7666 52.3841C80.2342 52.285 76.7018 52.188 73.17 52.0933C72.2276 52.0681 71.2943 52.0747 70.2164 52.0812L69.4146 52.0856C69.5118 51.8027 69.6039 51.5303 69.6933 51.2687C70.0368 50.2567 70.3344 49.3827 70.6656 48.5348C72.2146 44.55 73.7663 40.5662 75.3218 36.5831C78.3681 28.7685 81.522 20.6897 84.5852 12.7285C85.466 10.4306 86.1712 8.06956 86.6943 5.66569C86.8472 5.13061 86.8861 4.56956 86.8077 4.01871C86.7293 3.46786 86.5368 2.93951 86.2412 2.46759C85.9249 2.05423 85.523 1.71279 85.0642 1.46612C84.6046 1.21945 84.0978 1.07315 83.5773 1.03701C82.9454 0.953699 82.3141 0.855545 81.6828 0.757379C80.0157 0.454569 78.3286 0.280517 76.635 0.236816H76.5799C68.8579 0.262649 61.0078 0.350502 53.4173 0.434461C48.9399 0.483974 44.4627 0.529837 39.9853 0.572031C33.905 0.623052 33.0728 1.22759 31.0745 7.03881C30.8723 7.62845 30.6489 8.25484 30.3903 8.84707L25.4058 20.2558C20.183 32.2244 14.7824 44.5992 9.42547 56.7499C8.38455 59.1143 7.24732 61.4897 6.14741 63.7863C4.90102 66.3894 3.61237 69.0819 2.45284 71.7808C0.864876 75.4705 0.631518 77.8743 1.69772 79.5773C2.76392 81.2804 5.01261 82.1167 9.00586 82.3169L13.8929 82.5585C17.0247 82.7122 20.1563 82.8704 23.2873 83.0332C25.909 83.1733 28.529 83.3316 31.3011 83.4982L34.4773 83.6881C34.043 85.2781 33.6348 86.8591 33.2329 88.3942C32.2114 92.317 31.2453 96.0222 29.9801 99.6718ZM60.2298 53.2249C59.7923 55.4137 59.9792 56.9261 60.8134 57.986C61.6475 59.0458 63.0477 59.567 65.2359 59.6574C71.3792 59.91 77.6254 60.0623 83.6668 60.2102C86.0623 60.2683 88.4579 60.3288 90.8534 60.3917H91.0096C91.3441 60.3919 91.6772 60.4168 92.0071 60.466C85.4544 68.0221 79.0234 75.8554 72.798 83.4413C59.2444 99.9572 45.2476 117.012 29.3466 131.918C29.974 130.027 30.6064 128.137 31.2441 126.249C33.3182 120.083 35.4576 113.708 37.3028 107.355C38.8616 101.984 40.1034 96.4342 41.3044 91.0673C41.771 88.9832 42.2374 86.8998 42.7216 84.8215C42.9358 83.8011 43.041 82.7606 43.0349 81.7176C43.0997 76.6155 41.4011 74.866 36.2989 74.7904C30.7592 74.7084 25.1277 74.6832 19.6813 74.6612C17.4543 74.6516 15.2275 74.6406 13.0005 74.6283C12.55 74.6283 12.1006 74.6251 11.6029 74.6251H9.61791C11.0944 71.4779 12.5731 68.3463 14.0531 65.2301C23.3488 45.5924 32.1322 27.0376 38.3966 7.27964H78.3053C78.2515 7.45078 78.2009 7.61224 78.1536 7.76466C77.9397 8.45376 77.7855 8.9517 77.5897 9.42639C75.8656 13.6213 74.1383 17.8147 72.4084 22.0066C69.1029 30.0285 65.6813 38.323 62.3502 46.496C61.4296 48.6664 60.7194 50.9197 60.2298 53.2249Z"/>
</svg>`,
        loading: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/>
  <path d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"/>
</svg>`,
        logout: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5-5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
</svg>`,
        settings: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.82,11.69,4.82,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
</svg>`,
        stats: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
</svg>`,
        skull: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
</svg>`,
        'spell': `<svg viewBox="0 0 32 32" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M30.527 5.467c-0.147-0.118-0.33-0.196-0.531-0.216l-0.004-0-3.242 0.033v-3.283c-0-0.208-0.085-0.395-0.221-0.531v0c-0.134-0.135-0.319-0.219-0.524-0.219-0.003 0-0.007 0-0.010 0h0c-0.296-0.024-0.64-0.038-0.988-0.038-3.501 0-6.678 1.386-9.012 3.64l0.004-0.004c-2.33-2.25-5.507-3.637-9.008-3.637-0.348 0-0.693 0.014-1.034 0.041l0.045-0.003c-0.206 0.006-0.393 0.088-0.533 0.219l0-0c-0.136 0.136-0.221 0.323-0.221 0.531 0 0 0 0 0 0v-0 3.283l-3.242-0.033c-0.003-0-0.007-0-0.011-0-0.205 0-0.39 0.083-0.524 0.217v0c-0.137 0.136-0.223 0.324-0.223 0.533 0 0 0 0 0 0v0 24c0 0.414 0.336 0.749 0.75 0.749 0.13 0 0.252-0.033 0.359-0.091l-0.004 0.002c1.904-1.129 4.196-1.797 6.645-1.797 2.443 0 4.731 0.665 6.693 1.823l-0.061-0.034c0.058 0.034 0.125 0.061 0.196 0.077l0.005 0.001c0.028 0.007 0.060 0.013 0.094 0.016l0.002 0h0.004l0.069 0.004 0.013-0.004c0.13-0.001 0.253-0.036 0.359-0.096l-0.004 0.002c1.901-1.124 4.189-1.788 6.632-1.788 2.449 0 4.742 0.667 6.707 1.83l-0.061-0.034c0.102 0.058 0.224 0.092 0.354 0.092 0.142 0 0.275-0.041 0.387-0.111l-0.003 0.002c0.22-0.133 0.365-0.371 0.365-0.642 0-0 0-0 0-0v0-24c0-0 0-0 0-0 0-0.208-0.085-0.397-0.223-0.533l-0-0zM6.75 2.766c0.166-0.009 0.36-0.014 0.556-0.014 3.142 0 5.969 1.346 7.937 3.494l0.007 0.008v21.837c-2.233-1.764-5.090-2.83-8.195-2.83-0.107 0-0.214 0.001-0.321 0.004l0.016-0zM2.75 28.793v-22.035l2.5 0.025v19.217c0 0.413 0.335 0.749 0.748 0.75h0c0.088-0.002 0.192-0.003 0.296-0.003 1.834 0 3.596 0.308 5.238 0.876l-0.112-0.034c-0.729-0.13-1.569-0.204-2.426-0.204-2.269 0-4.416 0.519-6.33 1.445l0.087-0.038zM16.75 6.253c1.975-2.155 4.803-3.502 7.945-3.502 0.195 0 0.39 0.005 0.582 0.015l-0.027-0.001v22.498c-0.091-0.002-0.198-0.003-0.305-0.003-3.105 0-5.962 1.066-8.223 2.851l0.028-0.021zM29.25 28.793c-1.831-0.877-3.978-1.397-6.244-1.414l-0.006-0c-0.855 0-1.691 0.077-2.503 0.224l0.085-0.013c1.529-0.534 3.291-0.843 5.126-0.843 0.103 0 0.207 0.001 0.309 0.003l-0.015-0c0.413-0.001 0.748-0.336 0.748-0.75 0-0 0-0 0-0v0-19.217l2.5-0.025z"/>
</svg>`,
        description: `<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
</svg>`
    };
    
    // –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç icons –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ icons.js
    window.icons = icons;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    document.addEventListener('DOMContentLoaded', function() {
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤
        const questForm = document.getElementById('questForm');
        if (questForm) {
            questForm.addEventListener('submit', function(e) {
                e.preventDefault();
                generateQuest();
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ—Ä–∞
        const loreForm = document.getElementById('loreForm');
        if (loreForm) {
            loreForm.addEventListener('submit', function(e) {
                e.preventDefault();
                generateLore();
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        const spellForm = document.getElementById('spellForm');
        if (spellForm) {
            spellForm.addEventListener('submit', function(e) {
                e.preventDefault();
                generateSpell();
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–Ω—Å—Ç—Ä–æ–≤
        const monsterForm = document.getElementById('monsterForm');
        if (monsterForm) {
            monsterForm.addEventListener('submit', function(e) {
                e.preventDefault();
                generateMonster();
            });
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞
    function generateQuest() {
        const form = document.getElementById('questForm');
        const formData = new FormData(form);
        const resultDiv = document.getElementById('questResult');
        const submitBtn = form.querySelector('button[type="submit"]');
        
        submitBtn.innerHTML = '<span class="svg-icon" data-icon="loading" style="width: 20px; height: 20px;"></span> –°–æ–∑–¥–∞–Ω–∏–µ...';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞...</div>';
        
        const params = new URLSearchParams();
        params.append('action', 'generate_quest');
        params.append('type', formData.get('quest_type'));
        params.append('difficulty', formData.get('difficulty'));
        params.append('theme', formData.get('theme'));
        
        fetch('api/external-services.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: params.toString()
        })
        .then(response => response.json())
        .then(data => {
            if (data.success && data.quest) {
                const quest = data.quest;
                resultDiv.innerHTML = `
                    <div class="quest-result" style="background: var(--bg-primary); border-radius: var(--radius-lg); padding: var(--space-6); border-left: 4px solid var(--accent-primary);">
                        <div class="quest-header" style="display: flex; align-items: center; margin-bottom: var(--space-4);">
                            <span class="svg-icon" data-icon="dice" style="width: 32px; height: 32px; margin-right: var(--space-3); color: var(--accent-primary);"></span>
                            <h3 style="margin: 0; color: var(--text-primary);">${quest.type} –∫–≤–µ—Å—Ç</h3>
                            <span style="margin-left: auto; background: var(--accent-primary); color: white; padding: var(--space-1) var(--space-3); border-radius: var(--radius-sm); font-size: var(--text-sm);">${quest.difficulty}</span>
                        </div>
                        <div class="quest-content" style="color: var(--text-primary); line-height: var(--line-height-relaxed);">
                            ${quest.description.replace(/\n/g, '<br>')}
                        </div>
                        <div class="quest-meta" style="margin-top: var(--space-4); padding-top: var(--space-4); border-top: 1px solid var(--border-primary); font-size: var(--text-sm); color: var(--text-secondary);">
                            <strong>–¢–µ–º–∞:</strong> ${quest.theme} | <strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${quest.difficulty} | <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${data.source}
                        </div>
                    </div>
                `;
            } else {
                resultDiv.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</div>`;
            }
        })
        .catch(error => {
            console.error('Quest generation error:', error);
            resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="svg-icon" data-icon="dice" style="width: 20px; height: 20px;"></span> –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç';
            submitBtn.disabled = false;
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ—Ä–∞
    function generateLore() {
        const form = document.getElementById('loreForm');
        const formData = new FormData(form);
        const resultDiv = document.getElementById('loreResult');
        const submitBtn = form.querySelector('button[type="submit"]');
        
        submitBtn.innerHTML = '<span class="svg-icon" data-icon="loading" style="width: 20px; height: 20px;"></span> –°–æ–∑–¥–∞–Ω–∏–µ...';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ä–∞...</div>';
        
        const params = new URLSearchParams();
        params.append('action', 'generate_lore');
        params.append('type', formData.get('lore_type'));
        params.append('setting', formData.get('setting'));
        params.append('mood', formData.get('mood'));
        
        fetch('api/external-services.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: params.toString()
        })
        .then(response => response.json())
        .then(data => {
            if (data.success && data.lore) {
                const lore = data.lore;
                resultDiv.innerHTML = `
                    <div class="lore-result" style="background: var(--bg-primary); border-radius: var(--radius-lg); padding: var(--space-6); border-left: 4px solid var(--accent-primary);">
                        <div class="lore-header" style="display: flex; align-items: center; margin-bottom: var(--space-4);">
                            <span class="svg-icon" data-icon="description" style="width: 32px; height: 32px; margin-right: var(--space-3); color: var(--accent-primary);"></span>
                            <h3 style="margin: 0; color: var(--text-primary);">${lore.type}</h3>
                            <span style="margin-left: auto; background: var(--accent-primary); color: white; padding: var(--space-1) var(--space-3); border-radius: var(--radius-sm); font-size: var(--text-sm);">${lore.setting}</span>
                        </div>
                        <div class="lore-content" style="color: var(--text-primary); line-height: var(--line-height-relaxed);">
                            ${lore.description.replace(/\n/g, '<br>')}
                        </div>
                        <div class="lore-meta" style="margin-top: var(--space-4); padding-top: var(--space-4); border-top: 1px solid var(--border-primary); font-size: var(--text-sm); color: var(--text-secondary);">
                            <strong>–¢–∏–ø:</strong> ${lore.type} | <strong>–°–µ—Ç—Ç–∏–Ω–≥:</strong> ${lore.setting} | <strong>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</strong> ${lore.mood} | <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${data.source}
                        </div>
                    </div>
                `;
            } else {
                resultDiv.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</div>`;
            }
        })
        .catch(error => {
            console.error('Lore generation error:', error);
            resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ä–∞</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="svg-icon" data-icon="description" style="width: 20px; height: 20px;"></span> –°–æ–∑–¥–∞—Ç—å –ª–æ—Ä';
            submitBtn.disabled = false;
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    function generateSpell() {
        const form = document.getElementById('spellForm');
        const formData = new FormData(form);
        const spellName = formData.get('spell_name').trim();
        const resultDiv = document.getElementById('spellResult');
        const submitBtn = form.querySelector('button[type="submit"]');
        
        if (!spellName) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è');
            return;
        }
        
        submitBtn.innerHTML = '<span class="svg-icon" data-icon="loading" style="width: 20px; height: 20px;"></span> –ü–æ–∏—Å–∫...';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–ü–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è...</div>';
        
        const params = new URLSearchParams();
        params.append('action', 'get_comprehensive_spell');
        params.append('spell', spellName);
        
        fetch('api/dnd-libraries.php?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (data.success && data.data) {
                let html = '<div class="spell-results">';
                
                Object.keys(data.data).forEach(source => {
                    const spellData = data.data[source];
                    html += `
                        <div class="spell-source" style="background: var(--bg-primary); border-radius: var(--radius-lg); padding: var(--space-6); margin-bottom: var(--space-4); border-left: 4px solid var(--accent-primary);">
                            <div class="spell-header" style="display: flex; align-items: center; margin-bottom: var(--space-4);">
                                <span class="svg-icon" data-icon="crystal-ball" style="width: 32px; height: 32px; margin-right: var(--space-3); color: var(--accent-primary);"></span>
                                <h3 style="margin: 0; color: var(--text-primary);">${spellName}</h3>
                                <span style="margin-left: auto; background: var(--accent-primary); color: white; padding: var(--space-1) var(--space-3); border-radius: var(--radius-sm); font-size: var(--text-sm);">${source}</span>
                            </div>
                            <div class="spell-content" style="color: var(--text-primary); line-height: var(--line-height-relaxed);">
                                ${typeof spellData === 'string' ? spellData.replace(/\n/g, '<br>') : JSON.stringify(spellData, null, 2).replace(/\n/g, '<br>')}
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                html += `<div style="margin-top: var(--space-4); padding-top: var(--space-4); border-top: 1px solid var(--border-primary); font-size: var(--text-sm); color: var(--text-secondary);">
                    <strong>–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</strong> ${data.total_sources} | <strong>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</strong> ${data.sources_used.join(', ')}
                </div>`;
                
                resultDiv.innerHTML = html;
            } else {
                resultDiv.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error || '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</div>`;
            }
        })
        .catch(error => {
            console.error('Spell search error:', error);
            resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="svg-icon" data-icon="crystal-ball" style="width: 20px; height: 20px;"></span> –ù–∞–π—Ç–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ';
            submitBtn.disabled = false;
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    function generateMonster() {
        const form = document.getElementById('monsterForm');
        const formData = new FormData(form);
        const monsterName = formData.get('monster_name').trim();
        const resultDiv = document.getElementById('monsterResult');
        const submitBtn = form.querySelector('button[type="submit"]');
        
        if (!monsterName) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞');
            return;
        }
        
        submitBtn.innerHTML = '<span class="svg-icon" data-icon="loading" style="width: 20px; height: 20px;"></span> –ü–æ–∏—Å–∫...';
        submitBtn.disabled = true;
        resultDiv.innerHTML = '<div class="loading">–ü–æ–∏—Å–∫ –º–æ–Ω—Å—Ç—Ä–∞...</div>';
        
        const params = new URLSearchParams();
        params.append('action', 'get_comprehensive_monster');
        params.append('monster', monsterName);
        
        fetch('api/dnd-libraries.php?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (data.success && data.data) {
                let html = '<div class="monster-results">';
                
                Object.keys(data.data).forEach(source => {
                    const monsterData = data.data[source];
                    html += `
                        <div class="monster-source" style="background: var(--bg-primary); border-radius: var(--radius-lg); padding: var(--space-6); margin-bottom: var(--space-4); border-left: 4px solid var(--accent-primary);">
                            <div class="monster-header" style="display: flex; align-items: center; margin-bottom: var(--space-4);">
                                <span class="svg-icon" data-icon="skull" style="width: 32px; height: 32px; margin-right: var(--space-3); color: var(--accent-primary);"></span>
                                <h3 style="margin: 0; color: var(--text-primary);">${monsterName}</h3>
                                <span style="margin-left: auto; background: var(--accent-primary); color: white; padding: var(--space-1) var(--space-3); border-radius: var(--radius-sm); font-size: var(--text-sm);">${source}</span>
                            </div>
                            <div class="monster-content" style="color: var(--text-primary); line-height: var(--line-height-relaxed);">
                                ${typeof monsterData === 'string' ? monsterData.replace(/\n/g, '<br>') : JSON.stringify(monsterData, null, 2).replace(/\n/g, '<br>')}
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                html += `<div style="margin-top: var(--space-4); padding-top: var(--space-4); border-top: 1px solid var(--border-primary); font-size: var(--text-sm); color: var(--text-secondary);">
                    <strong>–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</strong> ${data.total_sources} | <strong>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</strong> ${data.sources_used.join(', ')}
                </div>`;
                
                resultDiv.innerHTML = html;
            } else {
                resultDiv.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error || '–ú–æ–Ω—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>`;
            }
        })
        .catch(error => {
            console.error('Monster search error:', error);
            resultDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–Ω—Å—Ç—Ä–∞</div>';
        })
        .finally(() => {
            submitBtn.innerHTML = '<span class="svg-icon" data-icon="skull" style="width: 20px; height: 20px;"></span> –ù–∞–π—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞';
            submitBtn.disabled = false;
        });
    }
    
    // –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    window.externalServices = {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        generateNames: async function(race = 'human', gender = 'any', count = 1) {
            try {
                const response = await fetch('api/external-services.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `action=generate_names&race=${race}&gender=${gender}&count=${count}`
                });
                
                const result = await response.json();
                
                if (result.success) {
                    return result.names;
                } else {
                    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω:', result.error);
                    return [];
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω:', error);
                return [];
            }
        },
        
        // –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
        rollDice: async function(diceString = '1d20') {
            try {
                const response = await fetch('api/external-services.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `action=roll_dice&dice=${diceString}`
                });
                
                const result = await response.json();
                
                if (result.success) {
                    return result;
                } else {
                    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π:', result.error);
                    return null;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π:', error);
                return null;
            }
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        getWeather: async function(location = 'Moscow') {
            try {
                const response = await fetch('api/external-services.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `action=get_weather&location=${location}`
                });
                
                const result = await response.json();
                
                if (result.success) {
                    return result;
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', result.error);
                    return null;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã:', error);
                return null;
            }
        }
    };
    
    function replaceIcons() {
        const elements = document.querySelectorAll('[data-icon]');
        console.log(`Found ${elements.length} elements with data-icon`);
        
        elements.forEach(element => {
            const iconName = element.getAttribute('data-icon');
            if (icons[iconName]) {
                element.innerHTML = icons[iconName];
                element.removeAttribute('data-icon');
                console.log(`‚úì Loaded icon: ${iconName}`);
            } else {
                console.warn(`‚úó Icon not found: ${iconName}`);
            }
        });
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫ —Å—Ä–∞–∑—É
    replaceIcons();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(replaceIcons, 500);
    
    console.log('Icon loading completed');
})();
</script>


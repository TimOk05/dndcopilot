// SVG Icons Manager for DnD Copilot
class IconManager {
    constructor() {
        this.iconCache = new Map();
        this.iconPath = '/icons/';
    }

    // –ü–æ–ª—É—á–∏—Ç—å SVG –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏
    async getIcon(iconName, className = 'svg-icon') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.iconCache.has(iconName)) {
            return this.createIconElement(this.iconCache.get(iconName), className);
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º SVG —Ñ–∞–π–ª
            const response = await fetch(`${this.iconPath}${iconName}.svg`);
            if (!response.ok) {
                throw new Error(`Icon ${iconName} not found`);
            }

            const svgContent = await response.text();
            this.iconCache.set(iconName, svgContent);

            return this.createIconElement(svgContent, className);
        } catch (error) {
            console.error(`Failed to load icon ${iconName}:`, error);
            throw error; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ NO FALLBACK
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏
    createIconElement(svgContent, className) {
        const wrapper = document.createElement('span');
        wrapper.className = className;
        wrapper.innerHTML = svgContent;

        // –£–¥–∞–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ SVG, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSS
        const svg = wrapper.querySelector('svg');
        if (svg) {
            svg.removeAttribute('width');
            svg.removeAttribute('height');
        }

        return wrapper;
    }

    // Fallback —Å–∏—Å—Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ NO FALLBACK

    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ innerHTML
    getIconHTML(iconName, className = 'svg-icon') {
        if (this.iconCache.has(iconName)) {
            const svgContent = this.iconCache.get(iconName);
            // –£–¥–∞–ª—è–µ–º XML declaration –∏ —É–ø—Ä–æ—â–∞–µ–º SVG –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
            let cleanSvg = svgContent
                .replace(/<\?xml[^>]*>/g, '')
                .replace(/<!DOCTYPE[^>]*>/g, '')
                .replace(/<!--[^>]*-->/g, '')
                .trim();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ SVG
            cleanSvg = cleanSvg.replace('<svg', `<svg class="${className}"`);
            return cleanSvg;
        }

        // Fallback —Å–∏—Å—Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ NO FALLBACK
        throw new Error(`Icon ${iconName} not loaded in cache`);
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∫–æ–Ω–∫–∏
    async preloadIcons() {
        const iconNames = [
            'enemy', 'potion', 'initiative', 'dice',
            'hero', 'skull', 'crystal-ball-magic-svgrepo-com', 'description', 'loading'
        ];

        const loadPromises = iconNames.map(name => this.getIcon(name));
        await Promise.allSettled(loadPromises);
    }

    // –ó–∞–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏ –Ω–∞ SVG –∏–∫–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    replaceEmojisWithSVG() {
        // –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω —ç–º–æ–¥–∑–∏ -> –∏–∫–æ–Ω–∫–∞
        const emojiMap = {
            'üëπ': 'enemy',
            'üß™': 'potion',
            '‚ö°': 'initiative',
            'üé≤': 'dice',
            'üßô‚Äç‚ôÇÔ∏è': 'hero',
            'üíÄ': 'skull',
            'üîÆ': 'crystal-ball-magic-svgrepo-com',
            'üìù': 'description',
            'üè∑Ô∏è': 'description',
            'üìä': 'description',
            'üõ°Ô∏è': 'description',
            'üìñ': 'description',
            'üéí': 'description'
        };

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç–º–æ–¥–∑–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
        document.querySelectorAll('*').forEach(element => {
            if (element.children.length === 0) { // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã
                let text = element.textContent;
                let hasEmoji = false;

                for (const [emoji, iconName] of Object.entries(emojiMap)) {
                    if (text.includes(emoji)) {
                        hasEmoji = true;
                        const iconHTML = this.getIconHTML(iconName, 'svg-icon');
                        text = text.replace(new RegExp(emoji, 'g'), iconHTML);
                    }
                }

                if (hasEmoji) {
                    element.innerHTML = text;
                }
            }
        });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.iconManager = new IconManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async() => {
    await window.iconManager.preloadIcons();

    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-icon –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    replaceDataIconElements();

    console.log('Icons preloaded and replaced');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-icon –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
async function replaceDataIconElements() {
    const elements = document.querySelectorAll('[data-icon]');

    for (const element of elements) {
        const iconName = element.getAttribute('data-icon');
        if (iconName) {
            try {
                const iconElement = await window.iconManager.getIcon(iconName, element.className);
                if (iconElement) {
                    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É
                    element.innerHTML = iconElement.innerHTML;
                }
            } catch (error) {
                console.warn(`Failed to load icon ${iconName}:`, error);
            }
        }
    }
}
// === –ì–ï–ù–ï–†–ê–¢–û–† –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
// –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π D&D 5e

console.log('Character generator script loaded');

// --- –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
function testCharacterModal() {
    console.log('=== TEST CHARACTER MODAL ===');
    console.log('Testing modal elements...');

    const modalContent = document.getElementById('modal-content');
    const modalBg = document.getElementById('modal-bg');

    console.log('Modal content element:', modalContent);
    console.log('Modal bg element:', modalBg);

    if (modalContent && modalBg) {
        console.log('Modal elements found, opening modal...');
        modalContent.innerHTML = '<div style="padding: 20px; text-align: center;"><h2>üé≠ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞</h2><p>–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p><button onclick="closeModal()" class="btn btn-primary">–ó–∞–∫—Ä—ã—Ç—å</button></div>';
        modalBg.classList.add('active');
        console.log('Modal opened successfully!');
    } else {
        console.error('Modal elements not found!');
        alert('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
function openCharacterModal() {
    console.log('=== OPEN CHARACTER MODAL CALLED ===');
    console.log('Function openCharacterModal is working!');

    const content = `
        <div class="character-generator">
            <h2>üé≠ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</h2>
            <p>–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D 5e</p>
            
            <div class="form-group">
                <label for="char-race">–†–∞—Å–∞</label>
                <select id="char-race" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É</option>
                    <option value="race_human">–ß–µ–ª–æ–≤–µ–∫</option>
                    <option value="race_elf">–≠–ª—å—Ñ</option>
                    <option value="race_dwarf">–î–≤–∞—Ä—Ñ</option>
                    <option value="race_halfling">–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫</option>
                    <option value="race_dragonborn">–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="char-class">–ö–ª–∞—Å—Å</label>
                <select id="char-class" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>
                    <option value="fighter">–í–æ–∏–Ω</option>
                    <option value="wizard">–ú–∞–≥</option>
                    <option value="rogue">–ü–ª—É—Ç</option>
                    <option value="cleric">–ñ—Ä–µ—Ü</option>
                    <option value="ranger">–°–ª–µ–¥–æ–ø—ã—Ç</option>
                </select>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-primary" onclick="generateSimpleCharacter()">
                    üé≤ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">
                    ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
            </div>
            
            <div id="char-progress" style="display: none; margin-top: 20px;">
                <div style="background: #333; border-radius: 10px; overflow: hidden;">
                    <div id="char-progress-bar" style="background: #007bff; height: 20px; width: 0%; transition: width 0.3s;"></div>
                </div>
                <div id="char-progress-text" style="text-align: center; margin-top: 10px;">–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</div>
            </div>
            
            <div id="char-result" style="display: none; margin-top: 20px;">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—é–¥–∞ -->
            </div>
        </div>
    `;

    showModal(content);
}

// --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
function generateSimpleCharacter() {
    console.log('=== GENERATE SIMPLE CHARACTER ===');

    const race = document.getElementById('char-race').value;
    const charClass = document.getElementById('char-class').value;

    if (!race || !charClass) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –∏ –∫–ª–∞—Å—Å');
        return;
    }

    console.log('Generating character:', { race, class: charClass });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    document.getElementById('char-progress').style.display = 'block';
    document.getElementById('char-result').style.display = 'none';

    const progressBar = document.getElementById('char-progress-bar');
    const progressText = document.getElementById('char-progress-text');

    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 20;
        if (progress > 90) progress = 90;
        progressBar.style.width = progress + '%';

        if (progress < 30) {
            progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
        } else if (progress < 60) {
            progressText.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...';
        } else {
            progressText.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è...';
        }
    }, 200);

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è API
    const formData = new FormData();
    formData.append('race', race);
    formData.append('class', charClass);
    formData.append('level', '1');
    formData.append('gender', 'random');
    formData.append('alignment', 'random');
    formData.append('use_ai', '1');

    fetch('api/generate-characters.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            console.log('API response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('API response data:', data);
            clearInterval(interval);
            progressBar.style.width = '100%';
            progressText.textContent = '–ì–æ—Ç–æ–≤–æ!';

            setTimeout(() => {
                document.getElementById('char-progress').style.display = 'none';
                document.getElementById('char-result').style.display = 'block';

                if (data.success && data.character) {
                    const character = data.character;
                    const resultHtml = `
                    <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin-top: 20px;">
                        <h3 style="color: #fff; margin-bottom: 15px;">${character.name}</h3>
                        <div style="color: #ccc; margin-bottom: 10px;">
                            <strong>${character.race} ${character.class}</strong> (${character.level} —É—Ä–æ–≤–µ–Ω—å)
                        </div>
                        
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin: 15px 0;">
                            <div style="text-align: center; background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px;">
                                <div style="color: #fff; font-weight: bold;">–•–∏—Ç—ã</div>
                                <div style="color: #4CAF50; font-size: 18px;">${character.hit_points}</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px;">
                                <div style="color: #fff; font-weight: bold;">–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏</div>
                                <div style="color: #2196F3; font-size: 18px;">${character.armor_class}</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px;">
                                <div style="color: #fff; font-weight: bold;">–°–∫–æ—Ä–æ—Å—Ç—å</div>
                                <div style="color: #FF9800; font-size: 18px;">${character.speed} —Ñ—Ç</div>
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin: 15px 0;">
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–°–∏–ª–∞</div>
                                <div style="color: #fff;">${character.abilities.str} (${character.modifiers.str >= 0 ? '+' : ''}${character.modifiers.str})</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–õ–æ–≤–∫–æ—Å—Ç—å</div>
                                <div style="color: #fff;">${character.abilities.dex} (${character.modifiers.dex >= 0 ? '+' : ''}${character.modifiers.dex})</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ</div>
                                <div style="color: #fff;">${character.abilities.con} (${character.modifiers.con >= 0 ? '+' : ''}${character.modifiers.con})</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç</div>
                                <div style="color: #fff;">${character.abilities.int} (${character.modifiers.int >= 0 ? '+' : ''}${character.modifiers.int})</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–ú—É–¥—Ä–æ—Å—Ç—å</div>
                                <div style="color: #fff;">${character.abilities.wis} (${character.modifiers.wis >= 0 ? '+' : ''}${character.modifiers.wis})</div>
                            </div>
                            <div style="text-align: center; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 5px;">
                                <div style="color: #ccc; font-size: 12px;">–•–∞—Ä–∏–∑–º–∞</div>
                                <div style="color: #fff;">${character.abilities.cha} (${character.modifiers.cha >= 0 ? '+' : ''}${character.modifiers.cha})</div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 20px; text-align: center;">
                            <button onclick="saveCharacterToNotes('${character.name}', '${character.race}', '${character.class}')" class="btn btn-success" style="margin-right: 10px;">
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏
                            </button>
                            <button onclick="generateSimpleCharacter()" class="btn btn-primary" style="margin-right: 10px;">
                                üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                            </button>
                            <button onclick="closeModal()" class="btn btn-secondary">
                                ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                `;

                    document.getElementById('char-result').innerHTML = resultHtml;

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    saveCharacterToNotes(character.name, character.race, character.class);

                } else {
                    document.getElementById('char-result').innerHTML = `
                    <div style="background: rgba(255,0,0,0.1); padding: 20px; border-radius: 10px; color: #ff6b6b; text-align: center;">
                        <h3>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                        <p>${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                        <button onclick="generateSimpleCharacter()" class="btn btn-primary">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    </div>
                `;
                }
            }, 500);
        })
        .catch(error => {
            console.error('Generation error:', error);
            clearInterval(interval);
            document.getElementById('char-progress').style.display = 'none';
            document.getElementById('char-result').style.display = 'block';
            document.getElementById('char-result').innerHTML = `
            <div style="background: rgba(255,0,0,0.1); padding: 20px; border-radius: 10px; color: #ff6b6b; text-align: center;">
                <h3>–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</h3>
                <p>${error.message}</p>
                <button onclick="generateSimpleCharacter()" class="btn btn-primary">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
        });
}

// --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∑–∞–º–µ—Ç–∫–∏ ---
function saveCharacterToNotes(name, race, charClass) {
    const noteContent = `<div><strong>${name}</strong> - ${race} ${charClass}</div>`;

    fetch('api/save-note.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'content=' + encodeURIComponent(noteContent) + '&title=' + encodeURIComponent(name)
        })
        .then(r => r.json())
        .then(data => {
            if (data.success) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞–º–µ—Ç–∫–∏!');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        });
}

console.log('Character generator functions defined');
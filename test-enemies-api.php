<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç API –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ D&D</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 20px; border: 1px solid #ccc; border-radius: 8px; }
        .result { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 4px; max-height: 400px; overflow-y: auto; }
        button { padding: 10px 20px; margin: 5px; cursor: pointer; }
        input, select { padding: 8px; margin: 5px; }
        .error { color: red; background: #ffe6e6; padding: 10px; border-radius: 4px; }
        .success { color: green; background: #e6ffe6; padding: 10px; border-radius: 4px; }
        .loading { color: blue; background: #e6f3ff; padding: 10px; border-radius: 4px; }
        .enemy-card { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 8px; background: #fafafa; }
        .enemy-header { font-weight: bold; font-size: 18px; margin-bottom: 10px; }
        .enemy-cr { color: #666; font-size: 14px; }
        .enemy-details { margin: 10px 0; }
    </style>
</head>
<body>
    <h1>üêâ –¢–µ—Å—Ç API –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ D&D</h1>
    
    <div class="test-section">
        <h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</h3>
        <label>–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: 
            <select id="threatLevel">
                <option value="easy">–õ–µ–≥–∫–∏–π (CR 0-3)</option>
                <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π (CR 1-7)</option>
                <option value="hard">–°–ª–æ–∂–Ω—ã–π (CR 5-12)</option>
                <option value="deadly">–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π (CR 10-20)</option>
                <option value="random">–°–ª—É—á–∞–π–Ω—ã–π</option>
            </select>
        </label>
        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <input type="number" id="count" value="1" min="1" max="10"></label>
        <label>–¢–∏–ø: 
            <select id="enemyType">
                <option value="">–õ—é–±–æ–π</option>
                <option value="humanoid">–ì—É–º–∞–Ω–æ–∏–¥—ã</option>
                <option value="beast">–ó–≤–µ—Ä–∏</option>
                <option value="undead">–ù–µ–∂–∏—Ç—å</option>
                <option value="giant">–í–µ–ª–∏–∫–∞–Ω—ã</option>
                <option value="dragon">–î—Ä–∞–∫–æ–Ω—ã</option>
            </select>
        </label>
        <label>–°—Ä–µ–¥–∞: 
            <select id="environment">
                <option value="">–õ—é–±–∞—è</option>
                <option value="forest">–õ–µ—Å</option>
                <option value="mountain">–ì–æ—Ä—ã</option>
                <option value="urban">–ì–æ—Ä–æ–¥</option>
                <option value="underdark">–ü–æ–¥–∑–µ–º–µ–ª—å–µ</option>
            </select>
        </label>
        <br><br>
        <button onclick="testEnemyGeneration()">üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</button>
        <div id="enemyResult" class="result"></div>
    </div>
    
    <div class="test-section">
        <h3>–¢–µ—Å—Ç D&D API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
        <button onclick="testDnDApiConnection()">üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ D&D API</button>
        <div id="connectionResult" class="result"></div>
    </div>
    
    <div class="test-section">
        <h3>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤</h3>
        <button onclick="testMonstersList()">üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤</button>
        <div id="monstersResult" class="result"></div>
    </div>

    <script>
        async function testEnemyGeneration() {
            const threatLevel = document.getElementById('threatLevel').value;
            const count = document.getElementById('count').value;
            const enemyType = document.getElementById('enemyType').value;
            const environment = document.getElementById('environment').value;
            
            const formData = new FormData();
            formData.append('threat_level', threatLevel);
            formData.append('count', count);
            formData.append('use_ai', 'on');
            if (enemyType) formData.append('enemy_type', enemyType);
            if (environment) formData.append('environment', environment);
            
            try {
                document.getElementById('enemyResult').innerHTML = '<div class="loading">‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...</div>';
                
                const response = await fetch('api/generate-enemies.php', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success && data.enemies) {
                    let html = `<div class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤: ${data.enemies.length}</div>`;
                    html += `<h4>–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: ${data.threat_level_display || data.threat_level}</h4>`;
                    
                    data.enemies.forEach((enemy, index) => {
                        html += `
                            <div class="enemy-card">
                                <div class="enemy-header">${enemy.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫'}</div>
                                <div class="enemy-cr">CR: ${enemy.challenge_rating || enemy.cr || '?'}</div>
                                <div class="enemy-details">
                                    <strong>–¢–∏–ø:</strong> ${enemy.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}<br>
                                    <strong>–•–∏—Ç—ã:</strong> ${enemy.hit_points || enemy.hp || '?'}<br>
                                    <strong>–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞:</strong> ${enemy.armor_class || enemy.ac || '?'}<br>
                                    <strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${enemy.speed || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}<br>
                                    <strong>–°—Ä–µ–¥–∞:</strong> ${enemy.environment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                                </div>
                                ${enemy.description ? `<div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${enemy.description}</div>` : ''}
                                ${enemy.tactics ? `<div><strong>–¢–∞–∫—Ç–∏–∫–∞:</strong> ${enemy.tactics}</div>` : ''}
                            </div>
                        `;
                    });
                    
                    document.getElementById('enemyResult').innerHTML = html;
                } else {
                    let errorMsg = data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    document.getElementById('enemyResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${errorMsg}</div>`;
                }
            } catch (error) {
                document.getElementById('enemyResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            }
        }
        
        async function testDnDApiConnection() {
            try {
                document.getElementById('connectionResult').innerHTML = '<div class="loading">‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</div>';
                
                const response = await fetch('https://www.dnd5eapi.co/api/');
                const data = await response.json();
                
                if (data && typeof data === 'object') {
                    document.getElementById('connectionResult').innerHTML = `
                        <div class="success">‚úÖ D&D API –¥–æ—Å—Ç—É–ø–µ–Ω</div>
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h4>
                        <pre>${JSON.stringify(data, null, 2)}</pre>
                    `;
                } else {
                    document.getElementById('connectionResult').innerHTML = `<div class="error">‚ùå D&D API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>`;
                }
            } catch (error) {
                document.getElementById('connectionResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ D&D API: ${error.message}</div>`;
            }
        }
        
        async function testMonstersList() {
            try {
                document.getElementById('monstersResult').innerHTML = '<div class="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤...</div>';
                
                const response = await fetch('https://www.dnd5eapi.co/api/monsters');
                const data = await response.json();
                
                if (data && data.results) {
                    let html = `<div class="success">‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${data.results.length}</div>`;
                    html += '<h4>–ü–µ—Ä–≤—ã–µ 10 –º–æ–Ω—Å—Ç—Ä–æ–≤:</h4><ul>';
                    
                    data.results.slice(0, 10).forEach(monster => {
                        html += `<li><strong>${monster.name}</strong> (index: ${monster.index})</li>`;
                    });
                    
                    html += '</ul>';
                    document.getElementById('monstersResult').innerHTML = html;
                } else {
                    document.getElementById('monstersResult').innerHTML = `<div class="error">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤</div>`;
                }
            } catch (error) {
                document.getElementById('monstersResult').innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${error.message}</div>`;
            }
        }
    </script>
</body>
</html>

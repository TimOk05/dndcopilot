<?php
/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4 (–±–µ–∑ fallback —Å–∏—Å—Ç–µ–º—ã)
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
 */

require_once 'config.php';
require_once 'api/dnd-api-service.php';
require_once 'api/ai-service.php';
require_once 'api/generate-characters-v4.php';

echo "<h1>üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4 (–±–µ–∑ fallback)</h1>\n";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
    .test-section { background: white; margin: 10px 0; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .success { border-left: 4px solid #4CAF50; }
    .error { border-left: 4px solid #f44336; }
    .warning { border-left: 4px solid #ff9800; }
    .info { border-left: 4px solid #2196F3; }
    pre { background: #f8f8f8; padding: 10px; border-radius: 4px; overflow-x: auto; }
    .api-info { background: #e3f2fd; padding: 10px; border-radius: 4px; margin: 10px 0; }
    .character-info { background: #f3e5f5; padding: 10px; border-radius: 4px; margin: 10px 0; }
</style>\n";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ D&D API Service
echo "<div class='test-section info'>\n";
echo "<h2>üîß –¢–µ—Å—Ç 1: D&D API Service</h2>\n";

try {
    $dnd_service = new DndApiService();
    echo "<p>‚úÖ D&D API Service —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã
    echo "<h3>–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã (Human):</h3>\n";
    $race_data = $dnd_service->getRaceData('human');
    if (isset($race_data['error'])) {
        echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã: " . $race_data['message'] . "</p>\n";
    } else {
        echo "<div class='api-info'>\n";
        echo "<strong>–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—ã:</strong><br>\n";
        echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($race_data['name'] ?? 'N/A') . "<br>\n";
        echo "–°–∫–æ—Ä–æ—Å—Ç—å: " . ($race_data['speed'] ?? 'N/A') . "<br>\n";
        echo "–ë–æ–Ω—É—Å—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: " . json_encode($race_data['ability_bonuses'] ?? []) . "<br>\n";
        echo "–ß–µ—Ä—Ç—ã: " . json_encode($race_data['traits'] ?? []) . "<br>\n";
        echo "–Ø–∑—ã–∫–∏: " . json_encode($race_data['languages'] ?? []) . "<br>\n";
        echo "</div>\n";
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
    echo "<h3>–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞ (Fighter):</h3>\n";
    $class_data = $dnd_service->getClassData('fighter');
    if (isset($class_data['error'])) {
        echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞: " . $class_data['message'] . "</p>\n";
    } else {
        echo "<div class='api-info'>\n";
        echo "<strong>–î–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞:</strong><br>\n";
        echo "–ù–∞–∑–≤–∞–Ω–∏–µ: " . ($class_data['name'] ?? 'N/A') . "<br>\n";
        echo "–ö–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è: " . ($class_data['hit_die'] ?? 'N/A') . "<br>\n";
        echo "–í–ª–∞–¥–µ–Ω–∏—è: " . json_encode($class_data['proficiencies'] ?? []) . "<br>\n";
        echo "–ó–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å—Å—Ç–≤–æ: " . ($class_data['spellcasting'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
        echo "</div>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ D&D API Service: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Service
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>ü§ñ –¢–µ—Å—Ç 2: AI Service</h2>\n";

try {
    $ai_service = new AiService();
    echo "<p>‚úÖ AI Service —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    $test_character = [
        'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ü–µ—Ä—Å–æ–Ω–∞–∂',
        'race' => '–ß–µ–ª–æ–≤–µ–∫',
        'class' => '–í–æ–∏–Ω',
        'level' => 1,
        'occupation' => '–ö—É–∑–Ω–µ—Ü',
        'gender' => '–ú—É–∂—á–∏–Ω–∞',
        'alignment' => '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä—ã–π',
        'abilities' => ['str' => 16, 'dex' => 14, 'con' => 15, 'int' => 12, 'wis' => 10, 'cha' => 8]
    ];
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    echo "<h3>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</h3>\n";
    $description = $ai_service->generateCharacterDescription($test_character, true);
    if (isset($description['error'])) {
        echo "<p class='warning'>‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: " . $description['message'] . "</p>\n";
    } else {
        echo "<div class='api-info'>\n";
        echo "<strong>AI –û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>\n";
        echo htmlspecialchars($description) . "<br>\n";
        echo "</div>\n";
    }
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
    echo "<h3>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</h3>\n";
    $background = $ai_service->generateCharacterBackground($test_character, true);
    if (isset($background['error'])) {
        echo "<p class='warning'>‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: " . $background['message'] . "</p>\n";
    } else {
        echo "<div class='api-info'>\n";
        echo "<strong>AI –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</strong><br>\n";
        echo htmlspecialchars($background) . "<br>\n";
        echo "</div>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ AI Service: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>‚öîÔ∏è –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4</h2>\n";

try {
    $generator = new CharacterGeneratorV4();
    echo "<p>‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4 —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>\n";
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    echo "<h3>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (Human Fighter):</h3>\n";
    $params = [
        'race' => 'human',
        'class' => 'fighter',
        'level' => 1,
        'alignment' => 'neutral-good',
        'gender' => 'male',
        'use_ai' => 'on'
    ];
    
    $result = $generator->generateCharacter($params);
    
    if ($result['success']) {
        echo "<p class='success'>‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</p>\n";
        
        $character = $result['character'];
        echo "<div class='character-info'>\n";
        echo "<strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ:</strong><br>\n";
        echo "–ò–º—è: " . ($character['name'] ?? 'N/A') . "<br>\n";
        echo "–†–∞—Å–∞: " . ($character['race'] ?? 'N/A') . "<br>\n";
        echo "–ö–ª–∞—Å—Å: " . ($character['class'] ?? 'N/A') . "<br>\n";
        echo "–£—Ä–æ–≤–µ–Ω—å: " . ($character['level'] ?? 'N/A') . "<br>\n";
        echo "HP: " . ($character['hit_points'] ?? 'N/A') . "<br>\n";
        echo "AC: " . ($character['armor_class'] ?? 'N/A') . "<br>\n";
        echo "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: " . json_encode($character['abilities'] ?? []) . "<br>\n";
        echo "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: " . ($character['occupation'] ?? 'N/A') . "<br>\n";
        echo "–û–ø–∏—Å–∞–Ω–∏–µ: " . htmlspecialchars(substr($character['description'] ?? 'N/A', 0, 100)) . "...<br>\n";
        echo "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: " . htmlspecialchars(substr($character['background'] ?? 'N/A', 0, 100)) . "...<br>\n";
        echo "</div>\n";
        
        echo "<div class='api-info'>\n";
        echo "<strong>API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>\n";
        echo "D&D API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: " . ($result['api_info']['dnd_api_used'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
        echo "AI API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: " . ($result['api_info']['ai_api_used'] ? '–î–∞' : '–ù–µ—Ç') . "<br>\n";
        echo "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: " . ($result['api_info']['data_source'] ?? 'N/A') . "<br>\n";
        echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ: " . ($result['api_info']['cache_info'] ?? 'N/A') . "<br>\n";
        echo "</div>\n";
        
    } else {
        echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " . ($result['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>\n";
        if (isset($result['details'])) {
            echo "<p class='warning'>–î–µ—Ç–∞–ª–∏: " . $result['details'] . "</p>\n";
        }
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>üíæ –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</h2>\n";

try {
    echo "<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫ –∫—ç—à–∞:</h3>\n";
    
    $dnd_cache_dir = __DIR__ . '/cache/dnd_api/';
    $ai_cache_dir = __DIR__ . '/cache/ai/';
    
    if (is_dir($dnd_cache_dir)) {
        echo "<p>‚úÖ –ü–∞–ø–∫–∞ D&D API –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>\n";
        $dnd_files = glob($dnd_cache_dir . '*.json');
        echo "<p>üìÅ D&D –∫—ç—à —Ñ–∞–π–ª–æ–≤: " . count($dnd_files) . "</p>\n";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –ü–∞–ø–∫–∞ D&D API –∫—ç—à–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>\n";
    }
    
    if (is_dir($ai_cache_dir)) {
        echo "<p>‚úÖ –ü–∞–ø–∫–∞ AI –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>\n";
        $ai_files = glob($ai_cache_dir . '*.json');
        echo "<p>üìÅ AI –∫—ç—à —Ñ–∞–π–ª–æ–≤: " . count($ai_files) . "</p>\n";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –ü–∞–ø–∫–∞ AI –∫—ç—à–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>\n";
    }
    
    echo "<h3>–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:</h3>\n";
    
    if (method_exists($dnd_service, 'clearAllCache')) {
        $cleared_count = $dnd_service->clearAllCache();
        echo "<p>üßπ –û—á–∏—â–µ–Ω–æ D&D –∫—ç—à —Ñ–∞–π–ª–æ–≤: {$cleared_count}</p>\n";
    }
    
    if (method_exists($ai_service, 'clearAllAiCache')) {
        $cleared_count = $ai_service->clearAllAiCache();
        echo "<p>üßπ –û—á–∏—â–µ–Ω–æ AI –∫—ç—à —Ñ–∞–π–ª–æ–≤: {$cleared_count}</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: " . $e->getMessage() . "</p>\n";
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
echo "</div>\n<div class='test-section info'>\n";
echo "<h2>üö® –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</h2>\n";

try {
    echo "<h3>–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å–æ–π:</h3>\n";
    $params = [
        'race' => 'nonexistent_race',
        'class' => 'fighter',
        'level' => 1,
        'alignment' => 'neutral',
        'gender' => 'male',
        'use_ai' => 'off'
    ];
    
    $result = $generator->generateCharacter($params);
    
    if (!$result['success']) {
        echo "<p class='success'>‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: " . ($result['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>\n";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p class='success'>‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: " . $e->getMessage() . "</p>\n";
}

echo "</div>\n<div class='test-section success'>\n";
echo "<h2>üéØ –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>\n";
echo "<h3>–ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</h3>\n";
echo "<ul>\n";
echo "<li>‚úÖ D&D API Service - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–∞—Ö, –∫–ª–∞—Å—Å–∞—Ö, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö</li>\n";
echo "<li>‚úÖ AI Service - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–π</li>\n";
echo "<li>‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v4 - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ fallback</li>\n";
echo "<li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π</li>\n";
echo "<li>‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—à–∏–±–æ–∫</li>\n";
echo "</ul>\n";

echo "<h3>–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è v4:</h3>\n";
echo "<ul>\n";
echo "<li>üö´ –£–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ fallback –¥–∞–Ω–Ω—ã—Ö</li>\n";
echo "<li>üîó –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ D&D API</li>\n";
echo "<li>ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è</li>\n";
echo "<li>üíæ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</li>\n";
echo "<li>üö® –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</li>\n";
echo "</ul>\n";

echo "<h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>\n";
echo "<ul>\n";
echo "<li>üåê –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ D&D API</li>\n";
echo "<li>üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–µ–π</li>\n";
echo "<li>üìÅ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫–∏ –∫—ç—à–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç</li>\n";
echo "<li>üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º</li>\n";
echo "</ul>\n";

echo "</div>\n";
?>

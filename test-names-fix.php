<?php
/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
 */

require_once 'config.php';
require_once 'auth.php';

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è isAdmin –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function isAdmin() {
    if (!isset($_SESSION['username'])) {
        return false;
    }
    $adminUsers = ['admin', 'administrator', 'root', 'master'];
    return in_array(strtolower($_SESSION['username']), $adminUsers);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if (!isLoggedIn()) {
    header('Location: login.php');
    exit;
}

$currentUser = $_SESSION['username'] ?? '–ì–æ—Å—Ç—å';
$isAdmin = isAdmin();

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–º–µ–Ω - DnD Copilot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }
        .test-container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .test-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .test-title {
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
            font-size: 1.1em;
        }
        .test-result {
            padding: 10px;
            border-radius: 4px;
            margin: 5px 0;
        }
        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        .warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        .test-buttons {
            margin: 20px 0;
            text-align: center;
        }
        .test-btn {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            margin: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
        .test-btn:hover {
            background: #0056b3;
        }
        .test-btn.success {
            background: #28a745;
        }
        .test-btn.success:hover {
            background: #1e7e34;
        }
        .test-btn.warning {
            background: #ffc107;
            color: #212529;
        }
        .test-btn.warning:hover {
            background: #e0a800;
        }
        .code-block {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 10px;
            font-family: monospace;
            font-size: 0.9em;
            margin: 10px 0;
            overflow-x: auto;
        }
        .api-test {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        }
        .api-test button {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        .api-test button:hover {
            background: #0056b3;
        }
        .api-result {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9em;
            max-height: 300px;
            overflow-y: auto;
        }
        .character-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        }
        .character-name {
            font-weight: bold;
            font-size: 1.1em;
            color: #333;
        }
        .character-details {
            margin-top: 5px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="test-container">
        <h1>üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</h1>
        
        <div class="test-section">
            <div class="test-title">1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω</div>
            <div class="test-result success">
                ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
            </div>
            <div class="test-result success">
                ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É–Ω–∏—Å–µ–∫—Å –∏–º–µ–Ω–∞ –≤ fallback
            </div>
            <div class="test-result success">
                ‚úÖ –£–ª—É—á—à–µ–Ω—ã fallback –∏–º–µ–Ω–∞ (D&D —Ç–µ–º–∞—Ç–∏–∫–∞)
            </div>
            <div class="test-result info">
                ‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –∏–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–∞
            </div>
        </div>
        
        <div class="test-section">
            <div class="test-title">2. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤</div>
            <div class="api-test">
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤:</p>
                <button onclick="testCharacterGeneration('male')">–¢–µ—Å—Ç –º—É–∂—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
                <button onclick="testCharacterGeneration('female')">–¢–µ—Å—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
                <button onclick="testCharacterGeneration('random')">–¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª–∞</button>
                <div id="api-result" class="api-result" style="display: none;"></div>
            </div>
        </div>
        
        <div class="test-section">
            <div class="test-title">3. –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π</div>
            <div class="code-block">
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω
// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª–∞
if ($gender === 'male' && !empty($raceData['male'])) {
    $nameList = $raceData['male'];
} elseif ($gender === 'female' && !empty($raceData['female'])) {
    $nameList = $raceData['female'];
}

// –ü–æ—Ç–æ–º —É–Ω–∏—Å–µ–∫—Å –∏–º–µ–Ω–∞
if (empty($nameList) && !empty($raceData['unisex'])) {
    $nameList = $raceData['unisex'];
}

// –¢–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª–∞

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback –∏–º–µ–Ω–∞
$fallbackNames = [
    'male' => ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–õ–µ–≥–æ–ª–∞—Å', '–ê—Ä–∞–≥–æ—Ä–Ω', '–ë–æ—Ä–æ–º–∏—Ä'],
    'female' => ['–ê—Ä–≤–µ–Ω', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–≠–æ–≤–∏–Ω', '–†–æ–∑–º–∞—Ä–∏', '–õ—é—Ç–∏—ç–Ω'],
    'unisex' => ['–†–∏–≤–µ–Ω', '–°–∫–∞–π', '–¢–µ–π–ª–æ—Ä', '–ú–æ—Ä–≥–∞–Ω', '–ö–µ–π—Å–∏']
];
            </div>
        </div>
        
        <div class="test-buttons">
            <a href="index.php" class="test-btn success">‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</a>
            <a href="test-generation-fix.php" class="test-btn">üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</a>
        </div>
        
        <div class="test-section">
            <div class="test-title">4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</div>
            <div class="test-result info">
                1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—à–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
            </div>
            <div class="test-result info">
                2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤
            </div>
            <div class="test-result info">
                3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º—É–∂—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
            </div>
            <div class="test-result info">
                4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∂–µ–Ω—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç –∂–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
            </div>
        </div>
        
        <div class="test-section">
            <div class="test-title">5. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>
            <div class="test-result success">
                ‚úÖ –ú—É–∂—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–¢–æ—Ä–∏–Ω, –ì–∏–º–ª–∏, –õ–µ–≥–æ–ª–∞—Å)
            </div>
            <div class="test-result success">
                ‚úÖ –ñ–µ–Ω—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç –∂–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–ê—Ä–≤–µ–Ω, –ì–∞–ª–∞–¥—Ä–∏—ç–ª—å, –≠–æ–≤–∏–Ω)
            </div>
            <div class="test-result success">
                ‚úÖ –ù–µ—Ç –±–æ–ª—å—à–µ —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "–¢–∏–º–æ—Ñ–µ–π" –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </div>
            <div class="test-result success">
                ‚úÖ –ò–º–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç D&D —Ç–µ–º–∞—Ç–∏–∫–µ
            </div>
        </div>
    </div>

    <script>
        function testCharacterGeneration(gender) {
            const resultDiv = document.getElementById('api-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...';
            
            const formData = new FormData();
            formData.append('race', 'human');
            formData.append('class', 'fighter');
            formData.append('level', '1');
            formData.append('alignment', 'neutral');
            formData.append('gender', gender);
            formData.append('use_ai', 'off');
            
            fetch('api/generate-characters.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('API Response:', data);
                
                if (data.success) {
                    const character = data.character || data.npc;
                    if (character && character.name) {
                        const genderText = gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : 
                                          gender === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' : '–°–ª—É—á–∞–π–Ω—ã–π';
                        
                        resultDiv.innerHTML = `
                            <div style="color: green; font-weight: bold;">‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</div>
                            <div class="character-card">
                                <div class="character-name">${character.name}</div>
                                <div class="character-details">
                                    <strong>–ü–æ–ª:</strong> ${character.gender} (–∑–∞–ø—Ä–æ—à–µ–Ω: ${genderText})<br>
                                    <strong>–†–∞—Å–∞:</strong> ${character.race}<br>
                                    <strong>–ö–ª–∞—Å—Å:</strong> ${character.class}<br>
                                    <strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${character.level}
                                </div>
                            </div>
                            <div style="margin-top: 10px;">
                                <strong>–ü—Ä–æ–≤–µ—Ä–∫–∞:</strong> 
                                ${isAppropriateName(character.name, character.gender) ? 
                                    '‚úÖ –ò–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞' : 
                                    '‚ö†Ô∏è –ò–º—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞'}
                            </div>
                        `;
                    } else {
                        resultDiv.innerHTML = `
                            <div style="color: orange; font-weight: bold;">‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—Ö, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã</div>
                            <pre>${JSON.stringify(data, null, 2)}</pre>
                        `;
                    }
                } else {
                    resultDiv.innerHTML = `
                        <div style="color: red; font-weight: bold;">‚ùå –û—à–∏–±–∫–∞ API</div>
                        <div>${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</div>
                        <pre>${JSON.stringify(data, null, 2)}</pre>
                    `;
                }
            })
            .catch(error => {
                resultDiv.innerHTML = `
                    <div style="color: red; font-weight: bold;">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</div>
                    <div>${error.message}</div>
                `;
            });
        }
        
        function isAppropriateName(name, gender) {
            const maleNames = ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–õ–µ–≥–æ–ª–∞—Å', '–ê—Ä–∞–≥–æ—Ä–Ω', '–ë–æ—Ä–æ–º–∏—Ä', '–ì—ç–Ω–¥–∞–ª—å—Ñ', '–§—Ä–æ–¥–æ', '–°—ç–º', '–ú–µ—Ä—Ä–∏', '–ü–∏–ø–ø–∏–Ω'];
            const femaleNames = ['–ê—Ä–≤–µ–Ω', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–≠–æ–≤–∏–Ω', '–†–æ–∑–º–∞—Ä–∏', '–õ—é—Ç–∏—ç–Ω', '–ò–¥—Ä–∏–ª—å', '–ê–Ω–∫–∞–ª–∏–º–µ', '–ù–∏–º—Ä–æ–¥—ç–ª—å', '–≠–ª–≤–∏–Ω–≥', '–ê—ç—Ä–∏–Ω'];
            const unisexNames = ['–†–∏–≤–µ–Ω', '–°–∫–∞–π', '–¢–µ–π–ª–æ—Ä', '–ú–æ—Ä–≥–∞–Ω', '–ö–µ–π—Å–∏', '–î–∂–æ—Ä–¥–∞–Ω', '–ê–ª–µ–∫—Å–∏—Å', '–î—Ä—é', '–ö–∏–º', '–ü—ç—Ç'];
            
            if (gender === '–ú—É–∂—á–∏–Ω–∞') {
                return maleNames.includes(name) || unisexNames.includes(name);
            } else if (gender === '–ñ–µ–Ω—â–∏–Ω–∞') {
                return femaleNames.includes(name) || unisexNames.includes(name);
            }
            
            return true; // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
        }
    </script>
</body>
</html>

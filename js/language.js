/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

class LanguageManager {
    constructor() {
        this.currentLanguage = 'ru';
        this.translations = {
            'ru': {
                'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
                'logout': 'üö™ –í—ã–π—Ç–∏',
                'character_generator': 'üé≠ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
                'character_subtitle': '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º D&D API –∏ AI',
                'enemy_generator': 'üëπ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤',
                'enemy_subtitle': '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã',
                'potion_generator': 'üß™ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–µ–ª–∏–π',
                'potion_subtitle': '–°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–µ–ª—å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏',
                'initiative': '‚ö° –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞',
                'participants': '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                'round': '–†–∞—É–Ω–¥',
                'notes': 'üìù –ó–∞–º–µ—Ç–∫–∏',
                'dice': 'üé≤ –ö–æ—Å—Ç–∏',
                'generate': 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
                'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
                'error': '–û—à–∏–±–∫–∞',
                'success': '–£—Å–ø–µ—à–Ω–æ',
                'race': '–†–∞—Å–∞',
                'class': '–ö–ª–∞—Å—Å',
                'level': '–£—Ä–æ–≤–µ–Ω—å',
                'gender': '–ü–æ–ª'
            },
            'en': {
                'welcome': 'Welcome',
                'logout': 'üö™ Logout',
                'character_generator': 'üé≠ Character Generator',
                'character_subtitle': 'Create a full character using D&D API and AI',
                'enemy_generator': 'üëπ Enemy Generator',
                'enemy_subtitle': 'Create suitable enemies for your group',
                'potion_generator': 'üß™ Potion Generator',
                'potion_subtitle': 'Create magical potions of various types and rarity',
                'initiative': '‚ö° Initiative',
                'participants': 'Participants',
                'round': 'Round',
                'notes': 'üìù Notes',
                'dice': 'üé≤ Dice',
                'generate': 'üé≤ Generate',
                'loading': 'Loading...',
                'error': 'Error',
                'success': 'Success',
                'race': 'Race',
                'class': 'Class',
                'level': 'Level',
                'gender': 'Gender'
            }
        };

        this.init();
    }

    init() {
        this.loadLanguageFromStorage();
        this.loadLanguageFromURL();
        this.updateLanguageSelector();
        this.updateInterface();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
     */
    t(key) {
        return this.translations[this.currentLanguage] ? .[key] ||
            this.translations['ru'][key] ||
            key;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –∏–∑ localStorage
     */
    loadLanguageFromStorage() {
        try {
            const savedLanguage = localStorage.getItem('dnd_language');
            if (savedLanguage && this.translations[savedLanguage]) {
                this.currentLanguage = savedLanguage;
                console.log('–Ø–∑—ã–∫ –∏–∑ localStorage:', this.currentLanguage);
            }
        } catch (e) {
            console.log('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    loadLanguageFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const urlLang = urlParams.get('lang');
        if (urlLang && this.translations[urlLang]) {
            this.currentLanguage = urlLang;
            console.log('–Ø–∑—ã–∫ –∏–∑ URL:', this.currentLanguage);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –≤ localStorage
     */
    saveLanguage() {
        try {
            localStorage.setItem('dnd_language', this.currentLanguage);
            console.log('–Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        } catch (e) {
            console.log('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
     */
    updateLanguageSelector() {
        const selector = document.getElementById('languageSelector');
        if (selector) {
            selector.value = this.currentLanguage;
            console.log('–°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:', this.currentLanguage);
        }
    }

    /**
     * –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
     */
    changeLanguage() {
        const selector = document.getElementById('languageSelector');
        if (selector) {
            this.currentLanguage = selector.value;
            console.log('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', this.currentLanguage);

            this.saveLanguage();
            this.updateInterface();

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            setTimeout(() => {
                console.log('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                window.location.href = `index.php?lang=${this.currentLanguage}`;
            }, 100);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    updateInterface() {
        console.log('=== –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ===');
        console.log('–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:', this.currentLanguage);

        let updatedCount = 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const welcomeElement = document.querySelector('.welcome-text');
        if (welcomeElement) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', welcomeElement.textContent);
            const currentText = welcomeElement.textContent;
            const username = currentText.replace(/^(–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å|Welcome)\s+/, '');
            const newText = this.t('welcome') + ' ' + username;
            welcomeElement.textContent = newText;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:', newText);
            updatedCount++;
        } else {
            console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        const logoutBtn = document.querySelector('.logout-btn');
        if (logoutBtn) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞:', logoutBtn.textContent);
            const newText = this.t('logout');
            logoutBtn.textContent = newText;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞:', newText);
            updatedCount++;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const characterHeader = document.querySelector('#character-modal .modal-header h2');
        if (characterHeader) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', characterHeader.textContent);
            const newText = this.t('character_generator');
            characterHeader.innerHTML = newText;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', newText);
            updatedCount++;
        } else {
            console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const generateBtn = document.querySelector('.generate-btn');
        if (generateBtn) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', generateBtn.textContent);
            const newText = this.t('generate') + ' ' + (this.currentLanguage === 'en' ? 'Character' : '–ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
            generateBtn.textContent = newText;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', newText);
            updatedCount++;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã —Ñ–æ—Ä–º
        const labels = document.querySelectorAll('label');
        console.log('–ù–∞–π–¥–µ–Ω–æ –ª–µ–π–±–ª–æ–≤:', labels.length);
        labels.forEach((label, index) => {
            const forAttr = label.getAttribute('for');
            if (forAttr === 'race') {
                const newText = this.t('race') + ':';
                label.textContent = newText;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–µ–π–±–ª —Ä–∞—Å—ã (${index}):`, newText);
                updatedCount++;
            } else if (forAttr === 'class') {
                const newText = this.t('class') + ':';
                label.textContent = newText;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–µ–π–±–ª –∫–ª–∞—Å—Å–∞ (${index}):`, newText);
                updatedCount++;
            } else if (forAttr === 'level') {
                const newText = this.t('level') + ':';
                label.textContent = newText;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–µ–π–±–ª —É—Ä–æ–≤–Ω—è (${index}):`, newText);
                updatedCount++;
            } else if (forAttr === 'gender') {
                const newText = this.t('gender') + ':';
                label.textContent = newText;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–µ–π–±–ª –ø–æ–ª–∞ (${index}):`, newText);
                updatedCount++;
            }
        });

        console.log(`=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û. –û–±–Ω–æ–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${updatedCount} ===`);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadLanguageInfo() {
        try {
            const response = await fetch('api/generate-potions.php?action=languages');
            if (response.ok) {
                const data = await response.json();
                if (data && data.success) {
                    this.currentLanguage = data.data.current;
                    this.updateLanguageSelector();
                }
            }
        } catch (error) {
            console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     */
    debug() {
        console.log('=== –û–¢–õ–ê–î–ö–ê –Ø–ó–´–ö–ê ===');
        console.log('–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:', this.currentLanguage);
        console.log('–ü–µ—Ä–µ–≤–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:', Object.keys(this.translations[this.currentLanguage] || {}));
        this.updateInterface();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    forceUpdate() {
        console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ===');
        this.updateInterface();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.languageManager = new LanguageManager();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.changeLanguage = () => window.languageManager.changeLanguage();
window.updateInterfaceLanguage = () => window.languageManager.updateInterface();
window.updateLanguageSelector = () => window.languageManager.updateLanguageSelector();
window.debugLanguage = () => window.languageManager.debug();
window.forceUpdateInterface = () => window.languageManager.forceUpdate();